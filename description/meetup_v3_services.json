{
    "name": "Meetup",
    "apiVersion": 3,
    "description": "Meetup API v3 methods",
    "operations": {
        "CreateBatch": {
            "version": "3",
            "name": "CreateBatch",
            "httpMethod": "POST",
            "parameters": {
                "requests": {
                    "location": "query",
                    "required": false,
                    "description": "JSON-encoding of multiple request objects as described in the parameter notes"
                }
            },
            "summary": "Performs multiple API requests in batch, useful for reducing HTTP network requests. This method is only available for OAuth authentication",
            "uri": "/batch",
            "notes": " You may supply a limited number of API requests, typically 1 to 4, in one batch request using the required \"requests\" parameter.\n Each of these individual batched requests will be tallied separately the same way they would when making individual requests.\n The batch request itself will not be tallied. As such, batch requests can not be rate limited.\n The only failures that you should account for are an authentication failure or a malformed JSON encoding of requests provided with the \"requests\" parameter.\n\n#### Composing batch requests\n\n Requests should be provided within a JSON-encoded array in the following format attached the `requests` parameter\n within a POST body\n\n<pre>\n [{\n   \"path\": \"/2/member/self\",\n   \"ref\":  \"me\",\n   \"params\": {\n     \"only\": \"name,id\"\n   }\n }]\n</pre>\n\n Only \"path\" is required for HTTP GET requests. \"path\" represents the API path for the method. \"ref\" provides a way to tag a request in a batch\n with a label that you can associated with its response in the body of the batch response. This will default to the\n provided \"path\". You may also supply a \"params\" key with a JSON object representing the parameters provided for the\n request. At this time only HTTP GET, DELETE, and POST requests are supported. You may specify one of these as a \"method\" property of the request.\n Methods requiring a multipart form POST are currently not supported. You may also supply headers on a per request basis by adding a \"headers\" field to the\n JSON object representing the request as key value pairs of strings.\n\n#### Interpreting batch responses\n\n A response to a batch request will be in the format\n\n<pre>\n [{\n   \"path\": \"/2/member/self\"\n   \"status\": 200,\n   \"ref\": \"me\",\n   \"body\": {\n     \"id\": 1234,\n     \"name\": \"Noah\"\n   },\n   \"headers\": {\n     \"key\": \"value\"\n    }\n }]\n</pre>\n\n \"path\" is the path of the method invoked. \"status\" represents the HTTP status code returned for the request.\n \"ref\" is the name provided for the inbound request. \"body\" is the JSON-encoded response from the given API request.\n \"headers\" is a JSON-encoded object representing the headers returned for that request.\n These requests may fail the same way they would when making individual requests. The response will indicate these\n failures.\n\n In order to preserve server resources and return batch responses within a reasonable amount of time, individual requests may timeout\n if a response is not computed within a reasonable amount of time. This allows for some requests to fail and others to pass which is a nicer\n alternative to an all or nothing response timeout.\n A timed out request can be identified by inspecting its response's \"status\" field for a value of 504. A timed out response may look like.\n\n<pre>\n [{\n   \"status\" : 504,\n   \"body\" : {\n    \"errors\" : [{\"code\": \"request_timeout\", \"message\":\"request timed out\"}]\n   },\n   \"headers\" : { ... },\n   \"path\" : \"/end/point\",\n   \"ref\" : \"request_ref\"\n }]\n</pre>\n",
            "response": null,
            "tag": null,
            "responseModel": "CreateBatch"
        },
        "CreateGroupAbuseReports": {
            "version": "3",
            "name": "CreateGroupAbuseReports",
            "httpMethod": "POST",
            "parameters": {
                "urlname": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "type": {
                    "location": "query",
                    "required": false,
                    "description": "A required identifier for type of abuse you are reporting. Acceptable values include dangerous, graphic_content, graphic_photo, harmful_activities, licensed_services, not_accurate, not_community, not_irl, nudity, other, promotion_focus, sex, smyte_warn, transactional, violence"
                }
            },
            "summary": "Submits a new abuse report for a target group. Abuse reports will be followed up on by our Community Support team.",
            "uri": "/{urlname}/abuse_reports",
            "notes": "This method requires the oauth `reporting` scope for oauth-authenticated requests",
            "response": null,
            "tag": null,
            "responseModel": "CreateGroupAbuseReports"
        },
        "CreateGroupEvents": {
            "version": "3",
            "name": "CreateGroupEvents",
            "httpMethod": "POST",
            "parameters": {
                "urlname": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "rsvp_limit": {
                    "location": "query",
                    "required": false,
                    "description": "Total number of RSVPs slots available for the event"
                },
                "rsvp_open_time": {
                    "location": "query",
                    "required": false,
                    "description": "Sets the time when members can starting RSVPing to the event.\nThe time should be specified in milliseconds since the epoch, or relative to the current time in the d/w/m format.\nTo remove this RSVP restriction, set this parameter to 0"
                },
                "question": {
                    "location": "query",
                    "required": false,
                    "description": "Sets or edits the RSVP survey question for the event.\nA maximum of 250 characters is permitted"
                },
                "venue_visibility": {
                    "location": "query",
                    "required": false,
                    "description": "Controls the visibility of the event venue for non members of the hosting group. May be one of \"public\" or \"members\""
                },
                "description": {
                    "location": "query",
                    "required": false,
                    "description": "Description of the event, in simple HTML format. This value is translated to HTML to update the description. May not be longer than 50000 characters."
                },
                "rsvp_close_time": {
                    "location": "query",
                    "required": false,
                    "description": "Sets the time when members can no longer RSVP to the event.\nThe time should be specified in milliseconds since the epoch, or relative to the current time in the d/w/m format.\nTo remove this RSVP restriction, set this parameter to 0"
                },
                "lon": {
                    "location": "query",
                    "required": false,
                    "description": "Adjusted venue longitude. Must be accompanied by 'lat' request parameter."
                },
                "how_to_find_us": {
                    "location": "query",
                    "required": false,
                    "description": "The information provided by the event host for \"How will members find you there?\". Visible when location is visible to the authenticated member"
                },
                "announce": {
                    "location": "query",
                    "required": false,
                    "description": "Boolean value indicating whether or not Meetup should announce this event to interested group members"
                },
                "duration": {
                    "location": "query",
                    "required": false,
                    "description": "Event duration in milliseconds. When not specified, a default of 3 hours from the event `time` may be assumed by applications.\nTo clear event duration, set this to 0"
                },
                "event_hosts": {
                    "location": "query",
                    "required": false,
                    "description": "Up to 5 comma-separated valid member ids to be hosts for the event."
                },
                "name": {
                    "location": "query",
                    "required": false,
                    "description": "Display name of the event. May not be longer than 80 characters"
                },
                "guest_limit": {
                    "location": "query",
                    "required": false,
                    "description": "Number of guests members may include in their RSVP, 0 or more. This defaults to 2 when undefined."
                },
                "self_rsvp": {
                    "location": "query",
                    "required": false,
                    "description": "The authenticated member will be RSVP'd to the created event. If `event_hosts` is not provided or is empty, the authenticated member will also be the event host. Defaults to \"true\"."
                },
                "time": {
                    "location": "query",
                    "required": false,
                    "description": "Event start time in milliseconds since the epoch, or relative to the current time in the d/w/m format.\n\nScheduling Meetup events without a time will result in events in \"proposed\" status"
                },
                "venue_id": {
                    "location": "query",
                    "required": false,
                    "description": "Numeric identifier of a venue"
                },
                "publish_status": {
                    "location": "query",
                    "required": false,
                    "description": "If you are an organizer of the group, you may set this to \"draft\" to save the event as a draft. Doing so will require a status=draft filter on /2/event queries"
                },
                "lat": {
                    "location": "query",
                    "required": false,
                    "description": "Adjusted venue latitude. Must be accompanied by a 'lon' request parameter."
                }
            },
            "summary": "Creates a new Meetup group event",
            "uri": "/{urlname}/events",
            "notes": "A valid path parameter for __:urlname__ is required.\n\nOnly members of the lead team may post new Meetup events\n\nCreating an event without a `time` will result in an event with a \"proposed\"\nstatus.\n\nEvent descriptions only support a subset of HTML, `B`, `I`, `A` in particular. Response bodies will include a description field that\nreturns a full HTML rendering of the provided description. Links to images will be rendered in `IMG` tags, but when editing, you should omit the `IMG` tag markup.\nTo get back the simplified markup, append 'simple_html_description' to the 'fields' request parameter.\n\nOAuth authenticated applications should request the [event_management](/meetup_api/auth/#event_management_scope) OAuth scope.",
            "response": {
                "utc_offset": "The local offset from UTC time, in milliseconds",
                "comment_count": "An aggregate count of all comments and replies for a given event, returned when fields request parameter value includes 'comment_count'",
                "rsvp_limit": "The number of \"yes\" RSVPS an event has capacity for",
                "venue": [
                    "The event venue, present only if selected and not hidden by an organizer",
                    {
                        "zip": "ZIP code if, venue is in US or Canada",
                        "country": "Country code of venue",
                        "localized_country_name": "The localized name of the venue's country",
                        "city": "City of venue",
                        "address_1": "Line 1 of venue address",
                        "address_2": "Line 2 of venue address",
                        "address_3": "Line 3 of venue address",
                        "lon": "Approximate longitude",
                        "phone": "Phone number of venue",
                        "name": "Venue name",
                        "state": "State of venue where available",
                        "id": "Unique numeric venue id",
                        "repinned": "true if the editor of the event altered the original venues pin location, false otherwise",
                        "lat": "Approximate latitude"
                    }
                ],
                "featured": "Boolean indicator of whether or not a given event is featured, returned when fields request parameter value includes 'featured'",
                "survey_questions": [
                    "List of organizer-defined survey questions intended to be asked of RSVPing members. Returned when the \"fields\"' request parameter contains \"answers\"",
                    {
                        "question": "Question text",
                        "id": "Numeric question identifier"
                    }
                ],
                "venue_visibility": "Represents who can see the venue with a potential value of \"members\" or \"public\", returned when fields request parameter value includes \"venue_visibility\" and the authenticated member is a member of the group hosting the event",
                "manual_attendance_count": "Manually entered total attendee headcount, if any exists",
                "fee": [
                    "Ticketing fee information for events that support payments",
                    {
                        "amount": "Amount of the fee",
                        "accepts": "Acceptable methods of payments may be one of \"paypal\", \"amazon\", \"wepay\", or \"cash\"",
                        "description": "Fee description, typically \"per-person\"",
                        "currency": "Currency accepted for fee",
                        "label": "Label for fee, typically \"Price\"",
                        "required": "Boolean flag indicating if this fee is required to RSVP"
                    }
                ],
                "link": "Link to event on meetup.com",
                "why": "We should do this because...",
                "description": "Description of the event in HTML. Email addresses and phone numbers will be masked for non-members",
                "short_link": "A shortened link for the event on meetup.com, returned when fields request parameter value includes \"short_link\"",
                "yes_rsvp_count": "Number of yes RSVPs including guests",
                "duration": "Scheduled event duration in milliseconds, if an end time is specified by the organizer. When not present, a default of 3 hours may be assumed by applications",
                "event_hosts": [
                    "List of members hosting the event, returned when fields request parameter value includes 'event_hosts'",
                    {
                        "name": "Host member's name",
                        "photo": [
                            "Member photo if one exists",
                            {
                                "highres_link": "Link for full sized photo",
                                "base_url": "A base url that can be use to construct a photo url from its components",
                                "id": "Numeric photo ID",
                                "photo_link": "Link for standard sized photo",
                                "type": "Type of photo. One of \"event\" or \"member\"",
                                "thumb_link": "Link for thumbnail sized photo"
                            }
                        ],
                        "id": "Host member's id"
                    }
                ],
                "simple_html_description": "Description of the event, in simple HTML source format. If this event's description was saved in simple HTML format, the description field will be an HTML translation of this source. Returned when the \"fields\"' request parameter contains \"simple_html_description\"",
                "id": "A unique alphanumeric identifier for event",
                "group": [
                    "Information about group hosting the event",
                    {
                        "photo_gradient": [
                            "Color combination used to generate group duotone, returned when fields request parameter value includes 'group_photo_gradient'",
                            {
                                "dark_color": "Dark color in hexidecimal format",
                                "id": "Unique numeric identifier",
                                "composite_color": "Composite color in hexidecimal format",
                                "light_color": "Light color in hexidecimal format",
                                "swagger_type": "Duotone"
                            }
                        ],
                        "join_info": [
                            "Lists any questions requested when joining and required fields. Returned with \"fields\" request parameter value includes \"group_join_info\"",
                            {
                                "photo_req": "true if required, false otherwise",
                                "questions": [
                                    "List of profile questions organizer would like new members to answer prior to joining",
                                    {
                                        "question": "The text of the question",
                                        "id": "Unique numeric identifier for the question"
                                    }
                                ],
                                "questions_req": "true if required, false otherwise",
                                "swagger_type": "GroupJoinInfo"
                            }
                        ],
                        "visibility": "Group visibility, returned when fields request parameter value includes 'group_visibility'. Value may be \"public\", \"public_limited\", or \"members\".",
                        "topics": [
                            "Topics related to the group, returned when fields request parameter value includes 'group_topics'",
                            {
                                "name": "Display name of the topic",
                                "urlkey": "The unique keyword used to identify this topic",
                                "id": "Numeric topic id",
                                "lang": "Language topic originates from",
                                "swagger_type": "TopicSummary"
                            }
                        ],
                        "key_photo": [
                            "Group primary photo, returned when fields request parameter value includes 'group_key_photo'",
                            {
                                "highres_link": "Link for full sized photo",
                                "base_url": "A base url that can be use to construct a photo url from its components",
                                "id": "Numeric photo ID",
                                "photo_link": "Link for standard sized photo",
                                "type": "Type of photo. One of \"event\" or \"member\"",
                                "thumb_link": "Link for thumbnail sized photo"
                            }
                        ],
                        "photo": [
                            "Photo associated with group, returned when fields request parameter value includes 'group_photo'",
                            {
                                "highres_link": "Link for full sized photo",
                                "base_url": "A base url that can be use to construct a photo url from its components",
                                "id": "Numeric photo ID",
                                "photo_link": "Link for standard sized photo",
                                "type": "Type of photo. One of \"event\" or \"member\"",
                                "thumb_link": "Link for thumbnail sized photo"
                            }
                        ],
                        "lon": "Approximate group longitude",
                        "join_mode": "Indicator of how new members may be able to join. be one of \"open\", \"approval\" or \"closed\"",
                        "name": "Name of the group",
                        "self": [
                            "Information pertaining to the authenticated member with respect to the group, returned when fields request parameter value includes 'group_self_actions', 'group_self_membership_dues', or 'group_self_status'",
                            {
                                "actions": "list of actions the authenticated member may perform, potentially \"event_create\": the ability to create new events, \"event_draft\": the ability to save new events as drafts, \"role_assign\": the ability to assign member roles, \"edit\": the ability to edit group settings, \"member_approval\": the ability to approve or decline member requests to join, or \"subscription_upgrade\": the ability to upgrade this group's subscription plan",
                                "membership_dues": "Membership dues information associated with hosting group, returned when \"fields\" request parameter value includes \"group_membership_dues\" and group has dues",
                                "status": "Indicates the authorized user's membership with this group.\n\nValue may be one of \"none\", \"pending\", \"pending_payment\", \"active\", or \"blocked\""
                            }
                        ],
                        "id": "Numeric identifier for the group",
                        "urlname": "Alphanumeric urlname identifier for the group",
                        "category": [
                            "Category group belongs to, returned when fields request parameter value includes 'group_category'",
                            {
                                "name": "Display name of the category",
                                "sort_name": "Name used for sorting",
                                "id": "Numeric category id",
                                "shortname": "String identifier of the category",
                                "swagger_type": "GroupCategory"
                            }
                        ],
                        "membership_dues": [
                            "Membership dues information associated with hosting group, returned when fields request parameter value includes 'group_membership_dues'",
                            {
                                "refund_policy": [
                                    "Conditions for refunds",
                                    {
                                        "group_closes": "refund applies when the group closes",
                                        "member_leaves": "refund applies when member leaves the group",
                                        "none": "indicates there is no refund policy",
                                        "member_banned": "refund applies when the member is banned",
                                        "custom": "Boolean indicator of a custom refund policy"
                                    }
                                ],
                                "reasons": "Array of reasons containing one or more of the following values compensate_organizer, cover_costs, encourage_engagement, improve_meetups, other, provide_supplies, reserve_fund",
                                "methods": [
                                    "Methods of payments",
                                    {
                                        "credit_card": "Boolean indicator that credit cards are accepted",
                                        "other": "Boolean indicator that other forms of payment are accepted",
                                        "paypal": "Boolean indicator that Paypal payments are accepted",
                                        "amazon_payments": "Boolean indicator that Amazon Payments are accepted"
                                    }
                                ],
                                "fee": "Numeric fee value",
                                "trial_days": "When present, returns the number of days the group is offering a free trial period for to new members. When not present, this indicates that the group does not offer a trial membership period",
                                "self_payment_required": "Returns true if the authorized user is prevented from participating in the group until a payment is made",
                                "required": "true if dues are required",
                                "swagger_type": "MembershipDues",
                                "fee_desc": "The interval at which dues must be paid. Possible values may include: \"month\", \"year\", \"day\", or \"every other day\"",
                                "currency": "Currency in which the fee is declared",
                                "reasons_other": "An additional reason if specified.",
                                "required_to": "If the dues are required this indicates what they are required for. May be one of 'join' or 'rsvp'"
                            }
                        ],
                        "lat": "Approximate group latitude",
                        "who": "What the group calls its members"
                    }
                ],
                "rsvpable_after_join": "Boolean value indicating whether or not the authenticated member can RSVP\nafter joining the hosting group.\nReturned when the \"fields\" request parameter\nincludes \"rsvpable_after_join\"\nand the authenticated member is _not_ a member of the\ngroup hosting this event",
                "rsvp_rules": [
                    "Information about conditions that allow for member RSVPs, returned when fields request parameter value include 'rsvp_rules'",
                    {
                        "refund_policy": [
                            "The organizer-defined terms for refunds. If this is defined, you must provide the authenticated member a way to access this information before they can RSVP. They will need to agree to these terms before they RSVP",
                            {
                                "policies": "list of one or more of the following. 'no_refunds' if the organizer will not issue refunds', 'member_cancellation' if the organizer offers a refund for member cancellation, 'event_cancellation' if the organizer offers a refund if the event is canceled, 'event_rescheduled' if the organizer offers a refund when the event is rescheduled",
                                "days": "if member_cancellation is present, it's relative to this many days before the event",
                                "notes": "additional refund policy notes"
                            }
                        ],
                        "closed": "Boolean value indicating whether or not RSVPing was explicitly closed for the event.",
                        "open_time": "UTC time that members may begin to RSVP",
                        "waitlisting": "Wait list handling when RSVP limit is reached. Value may be one of 'auto', 'manual' or 'off'",
                        "guest_limit": "Number of guests members may include in their RSVP, 0 or more",
                        "close_time": "UTC time that RSVPs will no longer be accepted, though organizers may close RSVPs earlier"
                    }
                ],
                "visibility": "Event visibility: \"public\", \"public_limited\", or \"members\". Events in private groups that do not expose limited information are visible only to that group's members and should not be made public.",
                "waitlist_count": "Number of members on the waitlist, if one exists",
                "created": "Creation time of the event, in milliseconds since the epoch",
                "plain_text_description": "Plain text version of the event description. Email addresses and photo numbers will be masked for non-members. Returned when \"fields\" request parameter value contains \"plain_text_description\"",
                "how_to_find_us": "Additional information on how to find members at a venue when provided by an organizer, returned when fields request parameter value includes 'how_to_find_us'",
                "swagger_type": "EventSummary",
                "photo_album": [
                    "Information about photo uploads for this event, returned when fields request parameter value includes 'photo_album'",
                    {
                        "photo_count": "Number of photos uploaded",
                        "photo_sample": [
                            "A small collection of photos uploaded for this event",
                            {
                                "highres_link": "Link for full sized photo",
                                "base_url": "A base url that can be use to construct a photo url from its components",
                                "id": "Numeric photo ID",
                                "photo_link": "Link for standard sized photo",
                                "type": "Type of photo. One of \"event\" or \"member\"",
                                "thumb_link": "Link for thumbnail sized photo"
                            }
                        ],
                        "id": "Unique numeric identifier for photo album",
                        "event": [
                            "Event photo album belongs to. This will be absent if the album\nis not associated with an event",
                            {
                                "utc_offset": "The local offset from UTC time, in milliseconds",
                                "name": "Name of event",
                                "id": "Alphanumeric event ID",
                                "time": "UTC start time of the event, in milliseconds since the epoch",
                                "swagger_type": "BasicEvent",
                                "yes_rsvp_count": "Number of yes RSVPs"
                            }
                        ],
                        "title": "Album title",
                        "swagger_type": "PhotoAlbumSummary"
                    }
                ],
                "rsvpable": "Boolean value indicating whether or not the authenticated member can RSVP or join the waitlist when the event is full.\nReturned when the \"fields\" request parameter value\nincludes \"rsvpable\"",
                "rsvp_sample": [
                    "A small collection RSVPs for members attending this event, returned when fields request parameter value includes 'rsvp_sample'",
                    {
                        "member": [
                            "Member who RSVP'd",
                            {
                                "role": "The leadership role of this member within the group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
                                "name": "Name of member",
                                "photo": [
                                    "Member photo, if available.\nMembers who registered via Facebook may not have highres photos",
                                    {
                                        "highres_link": "Link for full sized photo",
                                        "base_url": "A base url that can be use to construct a photo url from its components",
                                        "id": "Numeric photo ID",
                                        "photo_link": "Link for standard sized photo",
                                        "type": "Type of photo. One of \"event\" or \"member\"",
                                        "thumb_link": "Link for thumbnail sized photo"
                                    }
                                ],
                                "self": [
                                    "Represents the authenticated member's relation to member.\nReturned with the \"fields\" request parameter includes \"self\" and\nthe target member is not the authenticated member",
                                    {
                                        "common": [
                                            "Information the authenticated member has in common with this member",
                                            {
                                                "groups": [
                                                    "List of common groups",
                                                    {
                                                        "join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
                                                        "photo_gradient": [
                                                            "Color combination used generate group duotone",
                                                            {
                                                                "dark_color": "Dark color in hexidecimal format",
                                                                "id": "Unique numeric identifier",
                                                                "composite_color": "Composite color in hexidecimal format",
                                                                "light_color": "Light color in hexidecimal format",
                                                                "swagger_type": "Duotone"
                                                            }
                                                        ],
                                                        "name": "Name of the group",
                                                        "key_photo": [
                                                            "Group primary photo",
                                                            {
                                                                "highres_link": "Link for full sized photo",
                                                                "base_url": "A base url that can be use to construct a photo url from its components",
                                                                "id": "Numeric photo ID",
                                                                "photo_link": "Link for standard sized photo",
                                                                "type": "Type of photo. One of \"event\" or \"member\"",
                                                                "thumb_link": "Link for thumbnail sized photo"
                                                            }
                                                        ],
                                                        "id": "Numeric group ID",
                                                        "urlname": "Urlname used to identify the group on meetup.com",
                                                        "group_photo": [
                                                            "Group photo",
                                                            {
                                                                "highres_link": "Link for full sized photo",
                                                                "base_url": "A base url that can be use to construct a photo url from its components",
                                                                "id": "Numeric photo ID",
                                                                "photo_link": "Link for standard sized photo",
                                                                "type": "Type of photo. One of \"event\" or \"member\"",
                                                                "thumb_link": "Link for thumbnail sized photo"
                                                            }
                                                        ],
                                                        "swagger_type": "GroupSummary",
                                                        "who": "What the group calls its members"
                                                    }
                                                ]
                                            }
                                        ],
                                        "actions": "List of actions available for the authenticated member to perform.\nCurrently only \"message\" is supported",
                                        "blocks": "Boolean indication of whether or not the authenticated member blocks this member",
                                        "friends": "Boolean indication of whether or not the authenticated member is a friend of the member",
                                        "swagger_type": "MemberSelf"
                                    }
                                ],
                                "bio": "Intro of member",
                                "id": "Numeric member ID",
                                "title": "Organizer defined title of member. May be absent if not defined",
                                "event_context": [
                                    "Member's context within the event. Only returned in the context of an event",
                                    {
                                        "host": "Boolean indicator for whether this member is a host for the event"
                                    }
                                ],
                                "swagger_type": "AttendanceSummary"
                            }
                        ],
                        "id": "Unique numeric identifier for the RSVP. May be -1 for events scheduled in the future",
                        "updated": "Last modified time of the RSVP, in milliseconds since the epoch",
                        "swagger_type": "RSVPSummary",
                        "created": "Creation time of the RSVP, in milliseconds since the epoch"
                    }
                ],
                "series": [
                    "Returned when the \"fields\" request parameter value includes \"series\" for events that are part of a series of events",
                    {
                        "end_date": "Date when this series ends/ended, in milliseconds since the epoch",
                        "description": "Human displayable description of how often events in this series occur",
                        "id": "Unique numeric identifier for the series",
                        "swagger_type": "RecurrenceSchedule",
                        "weekly": [
                            "Returned for events that are part of a weekly recurring series of events",
                            {
                                "days_of_week": "List of integers 1-7 (Monday-Sunday) of days of week recurrence occurs upon",
                                "end_date": "Date when series ends/ended, in LocalDate (yyyy-MM-dd) format",
                                "interval": "Integer number of weeks between each recurrence"
                            }
                        ],
                        "start_date": "Date when this series begins/began, in milliseconds since the epoch"
                    }
                ],
                "name": "Name of the event",
                "self": [
                    "represents details particular to the authorized user, only present if requested and authenticated member is a member of the hosting group, returned when fields request parameter value includes 'self'",
                    {
                        "pay_status": "The authenticated member's payment status. This may be one of 'none', 'paid', 'partially_paid', 'payment_pending', 'echeck_pending', 'refund_pending', 'partially_refunded', 'refunded'",
                        "role": "The authenticated member's role in within the group, if any. This may be one of: Organizer, Assistant Organizer, Event Organizer, etc.",
                        "actions": "List of actions the authenticated member may perform, potentially one or more of the following\n\n\"announce\" to announce the event to the group's members\n\n\"attendance\" to view or take attendance for the event\n\n\"comment\" the ability to post a comment or reply\n\n\"payments\" the ability to mark members as paid if the event is ticketed\n\n\"publish\" to publish a draft event\n\n\"edit\" to edit the event information\n\n\"edit_hosts\" to edit the hosts for the event\n\n\"delete\" to delete the event\n\n\"rsvp\" to RSVP yes or no to the event\n\n\"wait\" to get on the waiting list (using the same RSVP methods).\n\n\"dues\" if an organizer requires membership dues to RSVP and the authorized\n member has not paid theirs\n\n\"upload_photo\" the ability to upload a photo for an event",
                        "rsvp": [
                            "Member's RSVP, if any",
                            {
                                "answers": [
                                    "List of answers to event survey questions asked when the member RSVP'd in the order asked, only available to organizers and assistant organizers",
                                    {
                                        "question": "Question text",
                                        "answer": "Answer text for question",
                                        "updated": "The last time this answer was updated",
                                        "question_id": "Unique number identifier for question",
                                        "swagger_type": "SurveyQuestionAnswer"
                                    }
                                ],
                                "guests": "Number of guests the RSVP'd member will be bringing",
                                "response": "May be \"yes\" or \"no\".\n\nIn cases where an event is over capacity and the member has shown an intent to attend,\nresponse may be \"waitlist\" if the event has a waitlist.\n\nIn cases of ticketed events, this may be \"yes_pending_payment\"\nfor a \"yes\" response for a ticketed event with an unprocessed payment"
                            }
                        ],
                        "swagger_type": "EventSelf"
                    }
                ],
                "time": "UTC start time of the event, in milliseconds since the epoch",
                "updated": "Last modified time for the event in milliseconds since the epoch",
                "status": "\"cancelled\", \"upcoming\", \"past\", \"proposed\", \"suggested\", or \"draft\""
            },
            "tag": "create",
            "responseModel": "CreateGroupEvents"
        },
        "CreateGroupEventsComments": {
            "version": "3",
            "name": "CreateGroupEventsComments",
            "httpMethod": "POST",
            "parameters": {
                "urlname": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "event_id": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "comment": {
                    "location": "query",
                    "required": false,
                    "description": "The text of the comment in at most 1024 characters"
                },
                "notifications": {
                    "location": "query",
                    "required": false,
                    "description": "A boolean value indicating whether or not you wish to recieve future notifications about updates to this comment thread"
                },
                "in_reply_to": {
                    "location": "query",
                    "required": false,
                    "description": "If posting a reply, set this to the numeric identifier of the associated top level comment"
                }
            },
            "summary": "Creates new comments and replies to existing comments within an Meetup event",
            "uri": "/{urlname}/events/{event_id}/comments",
            "notes": "A path parameter for __:urlname__, __:event_id__,\nand __:comment_id__ is required.\n\nIn addition,\nauthorized oauth applications should request the\n[group_content_edit](/meetup_api/auth/#group_content_edit_scope) permission scope.",
            "response": {
                "like_count": "The number of likes the comment has",
                "replies": "A list of replies, with the same structure as a comment.\nThis field may be absent in cases where there are no replies",
                "created": "Time the comment was posted in milliseconds since the epoch",
                "member": [
                    "The member that made the comment.\n\nIn cases where member has since left the group,\nthis member may have an id of 0",
                    {
                        "role": "The leadership role of this member within the group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
                        "name": "Name of member",
                        "photo": [
                            "Member photo, if available.\nMembers who registered via Facebook may not have highres photos",
                            {
                                "highres_link": "Link for full sized photo",
                                "base_url": "A base url that can be use to construct a photo url from its components",
                                "id": "Numeric photo ID",
                                "photo_link": "Link for standard sized photo",
                                "type": "Type of photo. One of \"event\" or \"member\"",
                                "thumb_link": "Link for thumbnail sized photo"
                            }
                        ],
                        "bio": "Intro of member",
                        "id": "Numeric member ID",
                        "title": "Organizer defined title of member. May be absent if not defined",
                        "event_context": [
                            "Member's context within the event. Only returned in the context of an event",
                            {
                                "host": "Boolean indicator for whether this member is a host for the event"
                            }
                        ],
                        "swagger_type": "AttendanceSummary"
                    }
                ],
                "self": [
                    "Context for the authenticated member",
                    {
                        "actions": "A list of actions the authenticated member may perform on the comment.\n\nValue may be one or more of the following:\n\n__flag_spam__ mark this comment as spam\n\n__delete__ delete this comment\n\n__unlike__ unlike this comment\n\n__like__ like this comment",
                        "liked": "A boolean indicator of whether or not the authenticated member has liked the comment",
                        "notifications": "Indicator of whether or not the authenticated member may\n              receive notifications about related comments. May be one of 'on' or 'off'"
                    }
                ],
                "comment": "The comment the member left for the event",
                "id": "Comment id",
                "swagger_type": "EventComment",
                "in_reply_to": "The id of the comment a reply was in relation to"
            },
            "tag": "create",
            "responseModel": "CreateGroupEventsComments"
        },
        "CreateGroupEventsCommentsLikes": {
            "version": "3",
            "name": "CreateGroupEventsCommentsLikes",
            "httpMethod": "POST",
            "parameters": {
                "urlname": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "event_id": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "comment_id": {
                    "location": "uri",
                    "required": true,
                    "description": null
                }
            },
            "summary": "Like a given event comment",
            "uri": "/{urlname}/events/{event_id}/comments/{comment_id}/likes",
            "notes": "A path parameter for __:urlname__,  __:event_id__,\nand __:comment_id__ is required\n\nThe __:comment_id__ should be formatted as `comment:{comment_id}` for top level comments\nor `reply:{reply_id}` for comment replies.\n\nTo obtain a list of comments and their replies for an event, see the\n[event comments](/meetup_api/docs/:urlname/events/:event_id/comments/) endpoint",
            "response": null,
            "tag": "create",
            "responseModel": "CreateGroupEventsCommentsLikes"
        },
        "CreateGroupEventsPhotos": {
            "version": "3",
            "name": "CreateGroupEventsPhotos",
            "httpMethod": "POST",
            "parameters": {
                "urlname": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "event_id": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "await": {
                    "location": "query",
                    "required": false,
                    "description": "Optional boolean parameter that will defer a request's a response until confirmation that photo is immediately displayable is received."
                },
                "caption": {
                    "location": "query",
                    "required": false,
                    "description": "Caption for display. Max length 255"
                },
                "fields": {
                    "location": "query",
                    "required": false,
                    "description": "A comma-delimited list of optional response fields.\nCurrently supported values are \"self\" and \"comment_count\""
                },
                "photo": {
                    "location": "query",
                    "required": false,
                    "description": "Photo upload data, encoded as multipart/form-data. The maximum file size allowed is 10MB"
                }
            },
            "summary": "Support for uploading new Event photos",
            "uri": "/{urlname}/events/{event_id}/photos",
            "notes": "A valid path parameter value for\n__:urlname__ and __:event_id__\nis required\n\nThis method expects an HTTP POST containing a Content-Type of `multipart/form-data`.\nOnly the `photo` parameter, which represents the photo being uploaded, is required.\n\nUploaded photos are fed into a separate photo staging process and may not be\nimmediately available for display. To receive responses for photos that are immediately\ndisplayable, send the `await` request parameter with a value of `true`.\n\nA maximum of 500 photos are allowed for a given event.\n\nAuthentication credentials should be omitted from the request body and be sent via\nHTTP Authorization header or as query string parameters",
            "response": {
                "utc_offset": "Numeric utc offset based on the timezone of the group\nhosting the event this photo was posted in",
                "comment_count": "The number of comments posted about this photo.\nReturned when 'comment_count' is present\nin the 'fields' request parameter.",
                "highres_link": "Link for full sized photo",
                "created": "Time photo was uploaded, in milliseconds since the epoch",
                "base_url": "A base url that can be use to construct a photo url from its components",
                "link": "Link to photo on meetup.com",
                "caption": "Photo caption, if defined",
                "type": "Type of photo. One of \"event\" or \"member\"",
                "thumb_link": "Link for thumbnail sized photo",
                "short_link": "Shortened link to photo on meetup.com. Returned when 'short_link'\nis present in the 'fields' request parameter",
                "swagger_type": "EventPhoto",
                "photo_album": [
                    "Photo album the photo is associated with",
                    {
                        "photo_count": "Number of photos uploaded",
                        "id": "Unique numeric identifier for photo album",
                        "event": [
                            "Event photo album belongs to. This will be absent if the album\nis not associated with an event",
                            {
                                "utc_offset": "The local offset from UTC time, in milliseconds",
                                "name": "Name of event",
                                "id": "Alphanumeric event ID",
                                "time": "UTC start time of the event, in milliseconds since the epoch",
                                "swagger_type": "BasicEvent",
                                "yes_rsvp_count": "Number of yes RSVPs"
                            }
                        ],
                        "title": "Album title",
                        "swagger_type": "EventPhotoSummary"
                    }
                ],
                "member": [
                    "Member who uploaded the photo. If member has since left the group,\nthis will return a member with an id of 0",
                    {
                        "role": "The leadership role of this member within the group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
                        "name": "Name of member",
                        "photo": [
                            "Member photo, if available.\nMembers who registered via Facebook may not have highres photos",
                            {
                                "highres_link": "Link for full sized photo",
                                "base_url": "A base url that can be use to construct a photo url from its components",
                                "id": "Numeric photo ID",
                                "photo_link": "Link for standard sized photo",
                                "type": "Type of photo. One of \"event\" or \"member\"",
                                "thumb_link": "Link for thumbnail sized photo"
                            }
                        ],
                        "bio": "Intro of member",
                        "id": "Numeric member ID",
                        "title": "Organizer defined title of member. May be absent if not defined",
                        "event_context": [
                            "Member's context within the event. Only returned in the context of an event",
                            {
                                "host": "Boolean indicator for whether this member is a host for the event"
                            }
                        ],
                        "swagger_type": "AttendanceSummary"
                    }
                ],
                "self": [
                    "Context for the authenticated member.\nReturned when 'self' is present\nin the 'fields' request parameter and the authenticated\nis a member of the group the photo is associated with.",
                    {
                        "actions": "List of actions the authenticated member may perform on this photo\nor its containing album, potentially one or more of the following\n\n\"comment\" if member can comment on this photo\n\n\"delete\" if the member can delete the photo\n\n\"edit\" if the member can edit the photo details\n\n\"upload_photo\" if the member can upload new photos"
                    }
                ],
                "id": "Numeric photo ID",
                "photo_link": "Link for standard sized photo",
                "updated": "Time photo was last updated, in milliseconds since the epoch",
                "group": [
                    "Group the photo is associated with.\" +\n          \"|Returned when 'group' is present \" +\n          \"|in the 'fields' request parameter.",
                    {
                        "join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
                        "photo_gradient": [
                            "Color combination used generate group duotone",
                            {
                                "dark_color": "Dark color in hexidecimal format",
                                "id": "Unique numeric identifier",
                                "composite_color": "Composite color in hexidecimal format",
                                "light_color": "Light color in hexidecimal format",
                                "swagger_type": "Duotone"
                            }
                        ],
                        "name": "Name of the group",
                        "key_photo": [
                            "Group primary photo",
                            {
                                "highres_link": "Link for full sized photo",
                                "base_url": "A base url that can be use to construct a photo url from its components",
                                "id": "Numeric photo ID",
                                "photo_link": "Link for standard sized photo",
                                "type": "Type of photo. One of \"event\" or \"member\"",
                                "thumb_link": "Link for thumbnail sized photo"
                            }
                        ],
                        "id": "Numeric group ID",
                        "urlname": "Urlname used to identify the group on meetup.com",
                        "group_photo": [
                            "Group photo",
                            {
                                "highres_link": "Link for full sized photo",
                                "base_url": "A base url that can be use to construct a photo url from its components",
                                "id": "Numeric photo ID",
                                "photo_link": "Link for standard sized photo",
                                "type": "Type of photo. One of \"event\" or \"member\"",
                                "thumb_link": "Link for thumbnail sized photo"
                            }
                        ],
                        "swagger_type": "GroupSummary",
                        "who": "What the group calls its members"
                    }
                ]
            },
            "tag": "upload",
            "responseModel": "CreateGroupEventsPhotos"
        },
        "CreateGroupEventsPhotosComments": {
            "version": "3",
            "name": "CreateGroupEventsPhotosComments",
            "httpMethod": "POST",
            "parameters": {
                "urlname": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "event_id": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "photo_id": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "comment": {
                    "location": "query",
                    "required": false,
                    "description": "The text of the comment"
                }
            },
            "summary": "Creates a new photo comment",
            "uri": "/{urlname}/events/{event_id}/photos/{photo_id}/comments",
            "notes": "Valid path parameters for __:urlname__, __:event_id__, and __:photo_id__ are required.\n\nYou must be a member of the group to post comments on the photo.\n\nIn addition,\nauthorized oauth applications must request the\n[group_content_edit](/meetup_api/auth/#group_content_edit_scope) permission scope.",
            "response": {
                "member": [
                    "The member that made the comment.\n\nIn cases where member has since left the group,\nthis member may have an id of 0",
                    {
                        "role": "The leadership role of this member within the group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
                        "name": "Name of member",
                        "photo": [
                            "Member photo, if available.\nMembers who registered via Facebook may not have highres photos",
                            {
                                "highres_link": "Link for full sized photo",
                                "base_url": "A base url that can be use to construct a photo url from its components",
                                "id": "Numeric photo ID",
                                "photo_link": "Link for standard sized photo",
                                "type": "Type of photo. One of \"event\" or \"member\"",
                                "thumb_link": "Link for thumbnail sized photo"
                            }
                        ],
                        "bio": "Intro of member",
                        "id": "Numeric member ID",
                        "title": "Organizer defined title of member. May be absent if not defined",
                        "event_context": [
                            "Member's context within the event. Only returned in the context of an event",
                            {
                                "host": "Boolean indicator for whether this member is a host for the event"
                            }
                        ],
                        "swagger_type": "AttendanceSummary"
                    }
                ],
                "self": [
                    "Context for the authenticated member",
                    {
                        "actions": "A list of actions the authenticated member may perform on the comment.\n\nValue may be one or more of the following:\n\n__delete__ delete this comment"
                    }
                ],
                "comment": "The comment the member left for the photo",
                "id": "Comment id",
                "created": "Time the comment was posted in milliseconds since the epoch"
            },
            "tag": "post",
            "responseModel": "CreateGroupEventsPhotosComments"
        },
        "CreateGroupEventsRsvps": {
            "version": "3",
            "name": "CreateGroupEventsRsvps",
            "httpMethod": "POST",
            "parameters": {
                "urlname": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "event_id": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "guests": {
                    "location": "query",
                    "required": false,
                    "description": "The number of guests Member will be attending with.\nEvents may define guest limits which is 2 by default"
                },
                "response": {
                    "location": "query",
                    "required": false,
                    "description": "The authenticated Member's RSVP response. Supported values are either \"yes\" or \"no\""
                },
                "opt_to_pay": {
                    "location": "query",
                    "required": false,
                    "description": "A boolean indicator used for Events with ticketing fees to imply the Member has opted to pay as part of the RSVP request"
                },
                "answer_{qid}": {
                    "location": "query",
                    "required": false,
                    "description": "Answers to Event survey questions.\nParameter names should have a suffix specifying the question's identifier.\nAnswers may not be longer than 250 characters."
                },
                "agree_to_refund": {
                    "location": "query",
                    "required": false,
                    "description": "A boolean indicator used for Events with ticketing feeds to imply the Member has agreed to the Event's refund policy"
                }
            },
            "summary": "Creates or updates an existing RSVP",
            "uri": "/{urlname}/events/{event_id}/rsvps",
            "notes": "The RSVP with be attributed to the currently authenticated member.\n\nOrganizers may define a set of survey questions they intend members to answer when\nRSVPing. Members RSVPing may provide answers to those questions\nby supplying parameter names that correspond with question identifiers.\nTo resolve any defined survey questions, you can inspect the\n[Event Get](/meetup_api/docs/:urlname/events/:id/#get)'s\nresponse body for the 'survey_questions' field\n\nIf the Event requires payment, you are required to send an\n'agree_to_refund' parameter set to true. This represents\nthe authenticated Member's agreement to understanding the\nEvent's refund policy.\n\nNote: When space is not available, \"yes\" responses may be coerced into a\nwaitlist response. This indicates that the authenticated member\nhas expressed interest in attending when space becomes available.\n\nOAuth authenticated applications should\nrequest the [rsvp](/meetup_api/auth/#rsvp_scope)\npermission scope",
            "response": {
                "venue": [
                    "Venue of event RSVP is hosted at.\nWill be omitted when venue is not yet defined or organizer has chosen to hide it from non-members.",
                    {
                        "zip": "ZIP code if, venue is in US or Canada",
                        "country": "Country code of venue",
                        "localized_country_name": "The localized name of the venue's country",
                        "city": "City of venue",
                        "address_1": "Line 1 of venue address",
                        "address_2": "Line 2 of venue address",
                        "address_3": "Line 3 of venue address",
                        "lon": "Approximate longitude",
                        "phone": "Phone number of venue",
                        "name": "Venue name",
                        "state": "State of venue where available",
                        "id": "Unique numeric venue id",
                        "repinned": "true if the editor of the event altered the original venues pin location, false otherwise",
                        "lat": "Approximate latitude"
                    }
                ],
                "created": "Creation time of the RSVP, in milliseconds since the epoch.",
                "answers": [
                    "Answers to event survey questions.\nVisible only to the posting member, hosts and the lead team",
                    {
                        "question": "Question text",
                        "answer": "Answer text for question",
                        "updated": "The last time this answer was updated",
                        "question_id": "Unique number identifier for question",
                        "swagger_type": "SurveyQuestionAnswer"
                    }
                ],
                "swagger_type": "Rsvp",
                "pay_status": "The member's pay status for ticketed events returned with \"pay_status\"\nis requested with the \"fields\" parameter.\n\nVisible only to the member and the lead team.\nMay be one of \"refunded\", \"partial_refund\", \"refund_pending\", \"pending\", \"echeck_pending\", \"paid\", \"none\", or \"exempt\"",
                "response": "The response to the RSVP. May be \"yes\" or \"no\".\n\nIn cases where an event is over capacity and the member has shown an intent to attend,\nresponse will be \"waitlist\" if the event has a waitlist.\n\nIn cases of ticketed events, this may be \"yes_pending_payment\"\nfor a \"yes\" response for a ticketed event with an unprocessed payment",
                "guests": "Number of guests the RSVP'd member will be bringing",
                "member": [
                    "Member who RSVP'd",
                    {
                        "role": "The leadership role of this member within the group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
                        "name": "Name of member",
                        "photo": [
                            "Member photo, if available.\nMembers who registered via Facebook may not have highres photos",
                            {
                                "highres_link": "Link for full sized photo",
                                "base_url": "A base url that can be use to construct a photo url from its components",
                                "id": "Numeric photo ID",
                                "photo_link": "Link for standard sized photo",
                                "type": "Type of photo. One of \"event\" or \"member\"",
                                "thumb_link": "Link for thumbnail sized photo"
                            }
                        ],
                        "self": [
                            "Represents the authenticated member's relation to member.\nReturned with the \"fields\" request parameter includes \"self\" and\nthe target member is not the authenticated member",
                            {
                                "common": [
                                    "Information the authenticated member has in common with this member",
                                    {
                                        "groups": [
                                            "List of common groups",
                                            {
                                                "join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
                                                "photo_gradient": [
                                                    "Color combination used generate group duotone",
                                                    {
                                                        "dark_color": "Dark color in hexidecimal format",
                                                        "id": "Unique numeric identifier",
                                                        "composite_color": "Composite color in hexidecimal format",
                                                        "light_color": "Light color in hexidecimal format",
                                                        "swagger_type": "Duotone"
                                                    }
                                                ],
                                                "name": "Name of the group",
                                                "key_photo": [
                                                    "Group primary photo",
                                                    {
                                                        "highres_link": "Link for full sized photo",
                                                        "base_url": "A base url that can be use to construct a photo url from its components",
                                                        "id": "Numeric photo ID",
                                                        "photo_link": "Link for standard sized photo",
                                                        "type": "Type of photo. One of \"event\" or \"member\"",
                                                        "thumb_link": "Link for thumbnail sized photo"
                                                    }
                                                ],
                                                "id": "Numeric group ID",
                                                "urlname": "Urlname used to identify the group on meetup.com",
                                                "group_photo": [
                                                    "Group photo",
                                                    {
                                                        "highres_link": "Link for full sized photo",
                                                        "base_url": "A base url that can be use to construct a photo url from its components",
                                                        "id": "Numeric photo ID",
                                                        "photo_link": "Link for standard sized photo",
                                                        "type": "Type of photo. One of \"event\" or \"member\"",
                                                        "thumb_link": "Link for thumbnail sized photo"
                                                    }
                                                ],
                                                "swagger_type": "GroupSummary",
                                                "who": "What the group calls its members"
                                            }
                                        ]
                                    }
                                ],
                                "actions": "List of actions available for the authenticated member to perform.\nCurrently only \"message\" is supported",
                                "blocks": "Boolean indication of whether or not the authenticated member blocks this member",
                                "friends": "Boolean indication of whether or not the authenticated member is a friend of the member",
                                "swagger_type": "MemberSelf"
                            }
                        ],
                        "bio": "Intro of member",
                        "id": "Numeric member ID",
                        "title": "Organizer defined title of member. May be absent if not defined",
                        "event_context": [
                            "Member's context within the event. Only returned in the context of an event",
                            {
                                "host": "Boolean indicator for whether this member is a host for the event"
                            }
                        ],
                        "swagger_type": "AttendanceSummary"
                    }
                ],
                "event": [
                    "The Event associated with the RSVP",
                    {
                        "utc_offset": "The local offset from UTC time, in milliseconds",
                        "name": "Name of event",
                        "id": "Alphanumeric event ID",
                        "time": "UTC start time of the event, in milliseconds since the epoch",
                        "swagger_type": "BasicEvent",
                        "yes_rsvp_count": "Number of yes RSVPs"
                    }
                ],
                "attendance_status": "Represents an attendance status for this RSVP,\nreturned when \"attendance_status\" is requested with the\n\"fields\" parameter and when the authorized member has\npermission to take attendance.\n\nValue may be \"attended\" when marked attending,\n\"absent\" when marked absent or \"noshow\" when marked noshow",
                "updated": "Last time the RSVP was updated, in milliseconds since the epoch.",
                "group": [
                    "The Group associated with the RSVP",
                    {
                        "join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
                        "photo_gradient": [
                            "Color combination used generate group duotone",
                            {
                                "dark_color": "Dark color in hexidecimal format",
                                "id": "Unique numeric identifier",
                                "composite_color": "Composite color in hexidecimal format",
                                "light_color": "Light color in hexidecimal format",
                                "swagger_type": "Duotone"
                            }
                        ],
                        "name": "Name of the group",
                        "key_photo": [
                            "Group primary photo",
                            {
                                "highres_link": "Link for full sized photo",
                                "base_url": "A base url that can be use to construct a photo url from its components",
                                "id": "Numeric photo ID",
                                "photo_link": "Link for standard sized photo",
                                "type": "Type of photo. One of \"event\" or \"member\"",
                                "thumb_link": "Link for thumbnail sized photo"
                            }
                        ],
                        "id": "Numeric group ID",
                        "urlname": "Urlname used to identify the group on meetup.com",
                        "group_photo": [
                            "Group photo",
                            {
                                "highres_link": "Link for full sized photo",
                                "base_url": "A base url that can be use to construct a photo url from its components",
                                "id": "Numeric photo ID",
                                "photo_link": "Link for standard sized photo",
                                "type": "Type of photo. One of \"event\" or \"member\"",
                                "thumb_link": "Link for thumbnail sized photo"
                            }
                        ],
                        "swagger_type": "GroupSummary",
                        "who": "What the group calls its members"
                    }
                ]
            },
            "tag": null,
            "responseModel": "CreateGroupEventsRsvps"
        },
        "CreateGroupMemberApprovals": {
            "version": "3",
            "name": "CreateGroupMemberApprovals",
            "httpMethod": "POST",
            "parameters": {
                "urlname": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "member": {
                    "location": "query",
                    "required": false,
                    "description": "Comma-delimited numeric pending member IDs. The maximum allowed is 200"
                },
                "welcome_message": {
                    "location": "query",
                    "required": false,
                    "description": "Optional message to send to the members being approved. If not provided, the groups default welcome message will be sent. Max message size is 2000"
                },
                "send_copy": {
                    "location": "query",
                    "required": false,
                    "description": "Optional boolean value indicating whether or not the org should receive a copy of the message sent to the approved members"
                }
            },
            "summary": "Approves one or more requests for group membership",
            "uri": "/{urlname}/member/approvals",
            "notes": "The :urlname path element may be any valid group urlname or domain name. If you need access to your group's welcome message, you can access it from the [/2/groups](/meetup_api/docs/2/groups/#response) method, providing a value of `welcome_message` for the fields parameter. To get a list of pending members, as an organizer, you can request the status `pending` in the [/2/profiles](/meetup_api/docs/2/profiles/#params) method.",
            "response": null,
            "tag": "create",
            "responseModel": "CreateGroupMemberApprovals"
        },
        "CreateGroupMembers": {
            "version": "3",
            "name": "CreateGroupMembers",
            "httpMethod": "POST",
            "parameters": {
                "urlname": {
                    "location": "uri",
                    "required": true,
                    "description": null
                }
            },
            "summary": "This method allows an authenticated member to join a group by creating a profile",
            "uri": "/{urlname}/members",
            "notes": "This method requires https and an HTTP POST. All required parameters must be supplied.\nAn intro and answers to group profile questions may be required based for the group the member is joining.\n\nOAuth authenticated applications should\nrequest the [group_join](/meetup_api/auth/#group_join_scope)\npermission scope\n\nTo find out if a group requires an intro or answers to questions, query for the group\nthrough one of the groups methods providing setting the fields parameter to join_info and\ninspecting the join_info in the results.\nAnswers to the questions must be named using the convention answer_{question_id}.",
            "response": {
                "birthday": [
                    "Returned only when the fields request parameter value includes 'birthday'\nand only for the authenticated member when defined",
                    {
                        "month": "Numeric month member was born. May be absent if not defined",
                        "year": "Year member was born",
                        "day": "Numeric day member was born. May be absent if not defined"
                    }
                ],
                "country": "Country code associated with Member's location",
                "gender": "Returned only when the fields request parameter value includes \"gender\"\nand only for the authenticated member.\nValue may be one of \"female\", \"male\", \"none\", or \"other\".\nThis field may be absent where gender is not defined",
                "city": "City associated with Member's location",
                "bio": "Member bio. When profile does not belong to the authenticated member, this may be omitted if member opted to hide their bio from others",
                "privacy": [
                    "Member's privacy preferences\nReturned only when the \"fields\" request parameter value includes \"privacy\"",
                    {
                        "groups": "may be 'hidden' or 'visible",
                        "bio": "may be 'hidden' or 'visible'",
                        "topics": "may be 'hidden' or 'visible'",
                        "swagger_type": "MemberPrivacy",
                        "facebook": "may be 'hidden' of 'visible'.\nIf absent, the member has not connected their Facebook account to Meetup"
                    }
                ],
                "lon": "Geographic longitude associated with Member's location",
                "memberships": [
                    "Group memberships affiliated with this member.\nReturned only when fields request parameter value includes \"memberships\".\nThis list may be omitted if the member has opted to hide their groups from others.",
                    {
                        "member": [
                            "Memberships where member holds a basic membership",
                            {
                                "role": "The leadership role of this member within the Group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
                                "created": "The time this member joined the Group, represented as milliseconds since the epoch",
                                "visited": "The last time this member visited the Group, represented as milliseconds since the epoch",
                                "title": "Organizer defined title of member. May be absent if not defined",
                                "updated": "The last time this member edited their Group profile, represented as milliseconds since the epoch",
                                "swagger_type": "GroupProfileListEntry",
                                "status": "Membership status in this Group.\nValue may be one of\nactive, blocked, pending, pending_payment or none",
                                "group": [
                                    "The group associated with this membership",
                                    {
                                        "join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
                                        "photo_gradient": [
                                            "Color combination used generate group duotone",
                                            {
                                                "dark_color": "Dark color in hexidecimal format",
                                                "id": "Unique numeric identifier",
                                                "composite_color": "Composite color in hexidecimal format",
                                                "light_color": "Light color in hexidecimal format",
                                                "swagger_type": "Duotone"
                                            }
                                        ],
                                        "name": "Name of the group",
                                        "key_photo": [
                                            "Group primary photo",
                                            {
                                                "highres_link": "Link for full sized photo",
                                                "base_url": "A base url that can be use to construct a photo url from its components",
                                                "id": "Numeric photo ID",
                                                "photo_link": "Link for standard sized photo",
                                                "type": "Type of photo. One of \"event\" or \"member\"",
                                                "thumb_link": "Link for thumbnail sized photo"
                                            }
                                        ],
                                        "id": "Numeric group ID",
                                        "urlname": "Urlname used to identify the group on meetup.com",
                                        "group_photo": [
                                            "Group photo",
                                            {
                                                "highres_link": "Link for full sized photo",
                                                "base_url": "A base url that can be use to construct a photo url from its components",
                                                "id": "Numeric photo ID",
                                                "photo_link": "Link for standard sized photo",
                                                "type": "Type of photo. One of \"event\" or \"member\"",
                                                "thumb_link": "Link for thumbnail sized photo"
                                            }
                                        ],
                                        "swagger_type": "GroupSummary",
                                        "who": "What the group calls its members"
                                    }
                                ]
                            }
                        ],
                        "organizer": [
                            "Memberships where member is on the group's lead team",
                            {
                                "role": "The leadership role of this member within the Group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
                                "created": "The time this member joined the Group, represented as milliseconds since the epoch",
                                "visited": "The last time this member visited the Group, represented as milliseconds since the epoch",
                                "title": "Organizer defined title of member. May be absent if not defined",
                                "updated": "The last time this member edited their Group profile, represented as milliseconds since the epoch",
                                "swagger_type": "GroupProfileListEntry",
                                "status": "Membership status in this Group.\nValue may be one of\nactive, blocked, pending, pending_payment or none",
                                "group": [
                                    "The group associated with this membership",
                                    {
                                        "join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
                                        "photo_gradient": [
                                            "Color combination used generate group duotone",
                                            {
                                                "dark_color": "Dark color in hexidecimal format",
                                                "id": "Unique numeric identifier",
                                                "composite_color": "Composite color in hexidecimal format",
                                                "light_color": "Light color in hexidecimal format",
                                                "swagger_type": "Duotone"
                                            }
                                        ],
                                        "name": "Name of the group",
                                        "key_photo": [
                                            "Group primary photo",
                                            {
                                                "highres_link": "Link for full sized photo",
                                                "base_url": "A base url that can be use to construct a photo url from its components",
                                                "id": "Numeric photo ID",
                                                "photo_link": "Link for standard sized photo",
                                                "type": "Type of photo. One of \"event\" or \"member\"",
                                                "thumb_link": "Link for thumbnail sized photo"
                                            }
                                        ],
                                        "id": "Numeric group ID",
                                        "urlname": "Urlname used to identify the group on meetup.com",
                                        "group_photo": [
                                            "Group photo",
                                            {
                                                "highres_link": "Link for full sized photo",
                                                "base_url": "A base url that can be use to construct a photo url from its components",
                                                "id": "Numeric photo ID",
                                                "photo_link": "Link for standard sized photo",
                                                "type": "Type of photo. One of \"event\" or \"member\"",
                                                "thumb_link": "Link for thumbnail sized photo"
                                            }
                                        ],
                                        "swagger_type": "GroupSummary",
                                        "who": "What the group calls its members"
                                    }
                                ]
                            }
                        ]
                    }
                ],
                "other_services": [
                    "An object whose key's are the names of associated external\nnetworks and values are identities within those networks.\nThe keys may be one of facebook, flickr, linkedin, tumblr or twitter.\nReturned only when \"fields\" request parameter value\nincludes \"other_services\"",
                    {
                        "identifier": "A unique string identifier",
                        "url": "A url for this identity. May be the same as identifier in some cases",
                        "swagger_type": "SocialNetwork"
                    }
                ],
                "stats": [
                    "High level numeric member statistics\nReturned only when fields request parameter value includes 'stats'",
                    {
                        "groups": "Number of Meetup Group memberships.\nMay be 0 if member chose to hide their groups from others",
                        "rsvps": "Number of RSVPs.\nMay be 0 if member chose to hide their groups from others",
                        "topics": "Number of Meetup topics member is interested in.\nMay be 0 if member chose to hide their topics from others"
                    }
                ],
                "state": "State associated with Member's location, where available",
                "id": "Unique numeric identifier for the member",
                "lat": "Geographic latitude associated with Member's location",
                "next_event": [
                    "Optional field representing either the current ongoing or next RSVP'd Meetup, where available.\nReturned when the \"fields\"\nrequest parameter value contains \"next_event\"\nonly for the profile of the authenticated member",
                    {
                        "utc_offset": "The local offset from UTC time, in milliseconds",
                        "rsvp_limit": "The number of \"yes\" RSVPS an event has capacity for",
                        "venue": [
                            "The event venue, present only if selected and not hidden by an organizer",
                            {
                                "zip": "ZIP code if, venue is in US or Canada",
                                "country": "Country code of venue",
                                "localized_country_name": "The localized name of the venue's country",
                                "city": "City of venue",
                                "address_1": "Line 1 of venue address",
                                "address_2": "Line 2 of venue address",
                                "address_3": "Line 3 of venue address",
                                "lon": "Approximate longitude",
                                "phone": "Phone number of venue",
                                "name": "Venue name",
                                "state": "State of venue where available",
                                "id": "Unique numeric venue id",
                                "repinned": "true if the editor of the event altered the original venues pin location, false otherwise",
                                "lat": "Approximate latitude"
                            }
                        ],
                        "survey_questions": [
                            "Contains a list of organizer-defined survey questions intended to be asked of RSVPing members.\nReturned when the \"fields\" request parameter\ncontains \"survey_questions\"",
                            {
                                "question": "Question text",
                                "id": "Numeric question identifier"
                            }
                        ],
                        "waitlist_count": "Number of members on the waitlist, if one exists",
                        "created": "Creation time of the event, in milliseconds since the epoch",
                        "fee": [
                            "Ticketing fee information for events that support payments",
                            {
                                "amount": "Amount of the fee",
                                "accepts": "Acceptable methods of payments may be one of \"paypal\", \"amazon\", \"wepay\", or \"cash\"",
                                "description": "Fee description, typically \"per-person\"",
                                "currency": "Currency accepted for fee",
                                "label": "Label for fee, typically \"Price\"",
                                "required": "Boolean flag indicating if this fee is required to RSVP"
                            }
                        ],
                        "swagger_type": "EventSummary",
                        "yes_rsvp_count": "Number of yes RSVPs including guests",
                        "duration": "Scheduled event duration in milliseconds, if an end time is specified by the organizer. When not present, a default of 3 hours may be assumed by applications",
                        "photo_album": [
                            "Information about photo uploads for this event",
                            {
                                "photo_count": "Number of photos uploaded",
                                "photo_sample": [
                                    "A small collection of photos uploaded for this event",
                                    {
                                        "highres_link": "Link for full sized photo",
                                        "base_url": "A base url that can be use to construct a photo url from its components",
                                        "id": "Numeric photo ID",
                                        "photo_link": "Link for standard sized photo",
                                        "type": "Type of photo. One of \"event\" or \"member\"",
                                        "thumb_link": "Link for thumbnail sized photo"
                                    }
                                ],
                                "id": "Unique numeric identifier for photo album",
                                "event": [
                                    "Event photo album belongs to. This will be absent if the album\nis not associated with an event",
                                    {
                                        "utc_offset": "The local offset from UTC time, in milliseconds",
                                        "name": "Name of event",
                                        "id": "Alphanumeric event ID",
                                        "time": "UTC start time of the event, in milliseconds since the epoch",
                                        "swagger_type": "BasicEvent",
                                        "yes_rsvp_count": "Number of yes RSVPs"
                                    }
                                ],
                                "title": "Album title",
                                "swagger_type": "PhotoAlbumSummary"
                            }
                        ],
                        "rsvp_sample": [
                            "A small collection RSVPs for members attending this event, returned when the \"fields\" request parameter value includes \"rsvp_sample\"",
                            {
                                "member": [
                                    "Member who RSVP'd",
                                    {
                                        "role": "The leadership role of this member within the group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
                                        "name": "Name of member",
                                        "photo": [
                                            "Member photo, if available.\nMembers who registered via Facebook may not have highres photos",
                                            {
                                                "highres_link": "Link for full sized photo",
                                                "base_url": "A base url that can be use to construct a photo url from its components",
                                                "id": "Numeric photo ID",
                                                "photo_link": "Link for standard sized photo",
                                                "type": "Type of photo. One of \"event\" or \"member\"",
                                                "thumb_link": "Link for thumbnail sized photo"
                                            }
                                        ],
                                        "self": [
                                            "Represents the authenticated member's relation to member.\nReturned with the \"fields\" request parameter includes \"self\" and\nthe target member is not the authenticated member",
                                            {
                                                "common": [
                                                    "Information the authenticated member has in common with this member",
                                                    {
                                                        "groups": [
                                                            "List of common groups",
                                                            {
                                                                "join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
                                                                "photo_gradient": [
                                                                    "Color combination used generate group duotone",
                                                                    {
                                                                        "dark_color": "Dark color in hexidecimal format",
                                                                        "id": "Unique numeric identifier",
                                                                        "composite_color": "Composite color in hexidecimal format",
                                                                        "light_color": "Light color in hexidecimal format",
                                                                        "swagger_type": "Duotone"
                                                                    }
                                                                ],
                                                                "name": "Name of the group",
                                                                "key_photo": [
                                                                    "Group primary photo",
                                                                    {
                                                                        "highres_link": "Link for full sized photo",
                                                                        "base_url": "A base url that can be use to construct a photo url from its components",
                                                                        "id": "Numeric photo ID",
                                                                        "photo_link": "Link for standard sized photo",
                                                                        "type": "Type of photo. One of \"event\" or \"member\"",
                                                                        "thumb_link": "Link for thumbnail sized photo"
                                                                    }
                                                                ],
                                                                "id": "Numeric group ID",
                                                                "urlname": "Urlname used to identify the group on meetup.com",
                                                                "group_photo": [
                                                                    "Group photo",
                                                                    {
                                                                        "highres_link": "Link for full sized photo",
                                                                        "base_url": "A base url that can be use to construct a photo url from its components",
                                                                        "id": "Numeric photo ID",
                                                                        "photo_link": "Link for standard sized photo",
                                                                        "type": "Type of photo. One of \"event\" or \"member\"",
                                                                        "thumb_link": "Link for thumbnail sized photo"
                                                                    }
                                                                ],
                                                                "swagger_type": "GroupSummary",
                                                                "who": "What the group calls its members"
                                                            }
                                                        ]
                                                    }
                                                ],
                                                "actions": "List of actions available for the authenticated member to perform.\nCurrently only \"message\" is supported",
                                                "blocks": "Boolean indication of whether or not the authenticated member blocks this member",
                                                "friends": "Boolean indication of whether or not the authenticated member is a friend of the member",
                                                "swagger_type": "MemberSelf"
                                            }
                                        ],
                                        "bio": "Intro of member",
                                        "id": "Numeric member ID",
                                        "title": "Organizer defined title of member. May be absent if not defined",
                                        "event_context": [
                                            "Member's context within the event. Only returned in the context of an event",
                                            {
                                                "host": "Boolean indicator for whether this member is a host for the event"
                                            }
                                        ],
                                        "swagger_type": "AttendanceSummary"
                                    }
                                ],
                                "id": "Unique numeric identifier for the RSVP. May be -1 for events scheduled in the future",
                                "updated": "Last modified time of the RSVP, in milliseconds since the epoch",
                                "swagger_type": "RSVPSummary",
                                "created": "Creation time of the RSVP, in milliseconds since the epoch"
                            }
                        ],
                        "series": [
                            "Returned when the \"fields\" request parameter value includes \"series\" for events that are part of a series of events",
                            {
                                "end_date": "Date when this series ends/ended, in milliseconds since the epoch",
                                "description": "Human displayable description of how often events in this series occur",
                                "id": "Unique numeric identifier for the series",
                                "swagger_type": "RecurrenceSchedule",
                                "weekly": [
                                    "Returned for events that are part of a weekly recurring series of events",
                                    {
                                        "days_of_week": "List of integers 1-7 (Monday-Sunday) of days of week recurrence occurs upon",
                                        "end_date": "Date when series ends/ended, in LocalDate (yyyy-MM-dd) format",
                                        "interval": "Integer number of weeks between each recurrence"
                                    }
                                ],
                                "start_date": "Date when this series begins/began, in milliseconds since the epoch"
                            }
                        ],
                        "name": "Name of the event",
                        "id": "A unique alphanumeric identifier for event",
                        "time": "UTC start time of the event, in milliseconds since the epoch",
                        "updated": "Last modified time for the event in milliseconds since the epoch",
                        "group": [
                            "Group hosting the event",
                            {
                                "join_mode": "Indicator of how new members may be able to join. be one of \"open\", \"approval\" or \"closed\"",
                                "name": "Name of the group",
                                "lon": "Approximate group longitude",
                                "id": "Numeric identifier for the group",
                                "urlname": "Alphanumeric urlname identifier for the group",
                                "lat": "Approximate group latitude",
                                "who": "What the group calls its members"
                            }
                        ]
                    }
                ],
                "localized_country_name": "Name of country associated with Member's location",
                "topics": [
                    "List of Meetup topics Member has interest in.\nReturned only when fields request parameter value includes \"topics\".\nThis list may be omitted when member has opted to hide the topics from others.",
                    {
                        "name": "Display name of the topic",
                        "urlkey": "The unique keyword used to identify this topic",
                        "id": "Numeric topic id",
                        "lang": "Language topic originates from",
                        "swagger_type": "TopicSummary"
                    }
                ],
                "joined": "Time member joined, represented as milliseconds since the epoch",
                "photo": [
                    "Member photo. May be absent if member has not chosen one.\nIn group contexts, the Member's Group profile photo will be returned.",
                    {
                        "highres_link": "Link for full sized photo",
                        "base_url": "A base url that can be use to construct a photo url from its components",
                        "id": "Numeric photo ID",
                        "photo_link": "Link for standard sized photo",
                        "type": "Type of photo. One of \"event\" or \"member\"",
                        "thumb_link": "Link for thumbnail sized photo"
                    }
                ],
                "swagger_type": "Profile",
                "group_profile": [
                    "Meetup Group profile information.\nThis field is only returned when profile is requested in group contexts",
                    {
                        "role": "The leadership role of this member within the Group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
                        "created": "The time this member joined the Group, represented as milliseconds since the epoch",
                        "intro": "Member intro, may be omitted if member opted to hide their intro from other members",
                        "visited": "The last time this member visited the Group, represented as milliseconds since the epoch",
                        "answers": [
                            "Array of answers to Group Profile questions",
                            {
                                "question": "Question text",
                                "answer": "Answer text",
                                "question_id": "Unique numeric question identifier"
                            }
                        ],
                        "link": "Member profile link, provides a link to the members chapter profile",
                        "title": "Organizer defined title of member. May be absent if not defined",
                        "updated": "The last time this member edited their Group profile, represented as milliseconds since the epoch",
                        "swagger_type": "GroupProfile",
                        "status": "Membership status in this Group.\nValue may be one of\nactive, blocked, pending, pending_payment or none",
                        "group": [
                            "The group associated with this membership",
                            {
                                "join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
                                "photo_gradient": [
                                    "Color combination used generate group duotone",
                                    {
                                        "dark_color": "Dark color in hexidecimal format",
                                        "id": "Unique numeric identifier",
                                        "composite_color": "Composite color in hexidecimal format",
                                        "light_color": "Light color in hexidecimal format",
                                        "swagger_type": "Duotone"
                                    }
                                ],
                                "name": "Name of the group",
                                "key_photo": [
                                    "Group primary photo",
                                    {
                                        "highres_link": "Link for full sized photo",
                                        "base_url": "A base url that can be use to construct a photo url from its components",
                                        "id": "Numeric photo ID",
                                        "photo_link": "Link for standard sized photo",
                                        "type": "Type of photo. One of \"event\" or \"member\"",
                                        "thumb_link": "Link for thumbnail sized photo"
                                    }
                                ],
                                "id": "Numeric group ID",
                                "urlname": "Urlname used to identify the group on meetup.com",
                                "group_photo": [
                                    "Group photo",
                                    {
                                        "highres_link": "Link for full sized photo",
                                        "base_url": "A base url that can be use to construct a photo url from its components",
                                        "id": "Numeric photo ID",
                                        "photo_link": "Link for standard sized photo",
                                        "type": "Type of photo. One of \"event\" or \"member\"",
                                        "thumb_link": "Link for thumbnail sized photo"
                                    }
                                ],
                                "swagger_type": "GroupSummary",
                                "who": "What the group calls its members"
                            }
                        ]
                    }
                ],
                "last_event": [
                    "Optional field representing the last RSVP'd Meetup this member attended within the last two weeks,\nwhere available. Returned when the \"fields\"\nrequest parameter value contains \"last_event\"\nonly for the profile of the authenticated member",
                    {
                        "utc_offset": "The local offset from UTC time, in milliseconds",
                        "rsvp_limit": "The number of \"yes\" RSVPS an event has capacity for",
                        "venue": [
                            "The event venue, present only if selected and not hidden by an organizer",
                            {
                                "zip": "ZIP code if, venue is in US or Canada",
                                "country": "Country code of venue",
                                "localized_country_name": "The localized name of the venue's country",
                                "city": "City of venue",
                                "address_1": "Line 1 of venue address",
                                "address_2": "Line 2 of venue address",
                                "address_3": "Line 3 of venue address",
                                "lon": "Approximate longitude",
                                "phone": "Phone number of venue",
                                "name": "Venue name",
                                "state": "State of venue where available",
                                "id": "Unique numeric venue id",
                                "repinned": "true if the editor of the event altered the original venues pin location, false otherwise",
                                "lat": "Approximate latitude"
                            }
                        ],
                        "survey_questions": [
                            "Contains a list of organizer-defined survey questions intended to be asked of RSVPing members.\nReturned when the \"fields\" request parameter\ncontains \"survey_questions\"",
                            {
                                "question": "Question text",
                                "id": "Numeric question identifier"
                            }
                        ],
                        "waitlist_count": "Number of members on the waitlist, if one exists",
                        "created": "Creation time of the event, in milliseconds since the epoch",
                        "fee": [
                            "Ticketing fee information for events that support payments",
                            {
                                "amount": "Amount of the fee",
                                "accepts": "Acceptable methods of payments may be one of \"paypal\", \"amazon\", \"wepay\", or \"cash\"",
                                "description": "Fee description, typically \"per-person\"",
                                "currency": "Currency accepted for fee",
                                "label": "Label for fee, typically \"Price\"",
                                "required": "Boolean flag indicating if this fee is required to RSVP"
                            }
                        ],
                        "swagger_type": "EventSummary",
                        "yes_rsvp_count": "Number of yes RSVPs including guests",
                        "duration": "Scheduled event duration in milliseconds, if an end time is specified by the organizer. When not present, a default of 3 hours may be assumed by applications",
                        "photo_album": [
                            "Information about photo uploads for this event",
                            {
                                "photo_count": "Number of photos uploaded",
                                "photo_sample": [
                                    "A small collection of photos uploaded for this event",
                                    {
                                        "highres_link": "Link for full sized photo",
                                        "base_url": "A base url that can be use to construct a photo url from its components",
                                        "id": "Numeric photo ID",
                                        "photo_link": "Link for standard sized photo",
                                        "type": "Type of photo. One of \"event\" or \"member\"",
                                        "thumb_link": "Link for thumbnail sized photo"
                                    }
                                ],
                                "id": "Unique numeric identifier for photo album",
                                "event": [
                                    "Event photo album belongs to. This will be absent if the album\nis not associated with an event",
                                    {
                                        "utc_offset": "The local offset from UTC time, in milliseconds",
                                        "name": "Name of event",
                                        "id": "Alphanumeric event ID",
                                        "time": "UTC start time of the event, in milliseconds since the epoch",
                                        "swagger_type": "BasicEvent",
                                        "yes_rsvp_count": "Number of yes RSVPs"
                                    }
                                ],
                                "title": "Album title",
                                "swagger_type": "PhotoAlbumSummary"
                            }
                        ],
                        "rsvp_sample": [
                            "A small collection RSVPs for members attending this event, returned when the \"fields\" request parameter value includes \"rsvp_sample\"",
                            {
                                "member": [
                                    "Member who RSVP'd",
                                    {
                                        "role": "The leadership role of this member within the group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
                                        "name": "Name of member",
                                        "photo": [
                                            "Member photo, if available.\nMembers who registered via Facebook may not have highres photos",
                                            {
                                                "highres_link": "Link for full sized photo",
                                                "base_url": "A base url that can be use to construct a photo url from its components",
                                                "id": "Numeric photo ID",
                                                "photo_link": "Link for standard sized photo",
                                                "type": "Type of photo. One of \"event\" or \"member\"",
                                                "thumb_link": "Link for thumbnail sized photo"
                                            }
                                        ],
                                        "self": [
                                            "Represents the authenticated member's relation to member.\nReturned with the \"fields\" request parameter includes \"self\" and\nthe target member is not the authenticated member",
                                            {
                                                "common": [
                                                    "Information the authenticated member has in common with this member",
                                                    {
                                                        "groups": [
                                                            "List of common groups",
                                                            {
                                                                "join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
                                                                "photo_gradient": [
                                                                    "Color combination used generate group duotone",
                                                                    {
                                                                        "dark_color": "Dark color in hexidecimal format",
                                                                        "id": "Unique numeric identifier",
                                                                        "composite_color": "Composite color in hexidecimal format",
                                                                        "light_color": "Light color in hexidecimal format",
                                                                        "swagger_type": "Duotone"
                                                                    }
                                                                ],
                                                                "name": "Name of the group",
                                                                "key_photo": [
                                                                    "Group primary photo",
                                                                    {
                                                                        "highres_link": "Link for full sized photo",
                                                                        "base_url": "A base url that can be use to construct a photo url from its components",
                                                                        "id": "Numeric photo ID",
                                                                        "photo_link": "Link for standard sized photo",
                                                                        "type": "Type of photo. One of \"event\" or \"member\"",
                                                                        "thumb_link": "Link for thumbnail sized photo"
                                                                    }
                                                                ],
                                                                "id": "Numeric group ID",
                                                                "urlname": "Urlname used to identify the group on meetup.com",
                                                                "group_photo": [
                                                                    "Group photo",
                                                                    {
                                                                        "highres_link": "Link for full sized photo",
                                                                        "base_url": "A base url that can be use to construct a photo url from its components",
                                                                        "id": "Numeric photo ID",
                                                                        "photo_link": "Link for standard sized photo",
                                                                        "type": "Type of photo. One of \"event\" or \"member\"",
                                                                        "thumb_link": "Link for thumbnail sized photo"
                                                                    }
                                                                ],
                                                                "swagger_type": "GroupSummary",
                                                                "who": "What the group calls its members"
                                                            }
                                                        ]
                                                    }
                                                ],
                                                "actions": "List of actions available for the authenticated member to perform.\nCurrently only \"message\" is supported",
                                                "blocks": "Boolean indication of whether or not the authenticated member blocks this member",
                                                "friends": "Boolean indication of whether or not the authenticated member is a friend of the member",
                                                "swagger_type": "MemberSelf"
                                            }
                                        ],
                                        "bio": "Intro of member",
                                        "id": "Numeric member ID",
                                        "title": "Organizer defined title of member. May be absent if not defined",
                                        "event_context": [
                                            "Member's context within the event. Only returned in the context of an event",
                                            {
                                                "host": "Boolean indicator for whether this member is a host for the event"
                                            }
                                        ],
                                        "swagger_type": "AttendanceSummary"
                                    }
                                ],
                                "id": "Unique numeric identifier for the RSVP. May be -1 for events scheduled in the future",
                                "updated": "Last modified time of the RSVP, in milliseconds since the epoch",
                                "swagger_type": "RSVPSummary",
                                "created": "Creation time of the RSVP, in milliseconds since the epoch"
                            }
                        ],
                        "series": [
                            "Returned when the \"fields\" request parameter value includes \"series\" for events that are part of a series of events",
                            {
                                "end_date": "Date when this series ends/ended, in milliseconds since the epoch",
                                "description": "Human displayable description of how often events in this series occur",
                                "id": "Unique numeric identifier for the series",
                                "swagger_type": "RecurrenceSchedule",
                                "weekly": [
                                    "Returned for events that are part of a weekly recurring series of events",
                                    {
                                        "days_of_week": "List of integers 1-7 (Monday-Sunday) of days of week recurrence occurs upon",
                                        "end_date": "Date when series ends/ended, in LocalDate (yyyy-MM-dd) format",
                                        "interval": "Integer number of weeks between each recurrence"
                                    }
                                ],
                                "start_date": "Date when this series begins/began, in milliseconds since the epoch"
                            }
                        ],
                        "name": "Name of the event",
                        "id": "A unique alphanumeric identifier for event",
                        "time": "UTC start time of the event, in milliseconds since the epoch",
                        "updated": "Last modified time for the event in milliseconds since the epoch",
                        "group": [
                            "Group hosting the event",
                            {
                                "join_mode": "Indicator of how new members may be able to join. be one of \"open\", \"approval\" or \"closed\"",
                                "name": "Name of the group",
                                "lon": "Approximate group longitude",
                                "id": "Numeric identifier for the group",
                                "urlname": "Alphanumeric urlname identifier for the group",
                                "lat": "Approximate group latitude",
                                "who": "What the group calls its members"
                            }
                        ]
                    }
                ],
                "name": "Display name for the member",
                "self": [
                    "Represents the authenticated member's relation to member.\nReturned when \"fields\" request parameter value includes \"self\" and\nthe target member is not the authenticated member",
                    {
                        "common": [
                            "Information the authenticated member has in common with this member",
                            {
                                "groups": [
                                    "List of common groups",
                                    {
                                        "join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
                                        "photo_gradient": [
                                            "Color combination used generate group duotone",
                                            {
                                                "dark_color": "Dark color in hexidecimal format",
                                                "id": "Unique numeric identifier",
                                                "composite_color": "Composite color in hexidecimal format",
                                                "light_color": "Light color in hexidecimal format",
                                                "swagger_type": "Duotone"
                                            }
                                        ],
                                        "name": "Name of the group",
                                        "key_photo": [
                                            "Group primary photo",
                                            {
                                                "highres_link": "Link for full sized photo",
                                                "base_url": "A base url that can be use to construct a photo url from its components",
                                                "id": "Numeric photo ID",
                                                "photo_link": "Link for standard sized photo",
                                                "type": "Type of photo. One of \"event\" or \"member\"",
                                                "thumb_link": "Link for thumbnail sized photo"
                                            }
                                        ],
                                        "id": "Numeric group ID",
                                        "urlname": "Urlname used to identify the group on meetup.com",
                                        "group_photo": [
                                            "Group photo",
                                            {
                                                "highres_link": "Link for full sized photo",
                                                "base_url": "A base url that can be use to construct a photo url from its components",
                                                "id": "Numeric photo ID",
                                                "photo_link": "Link for standard sized photo",
                                                "type": "Type of photo. One of \"event\" or \"member\"",
                                                "thumb_link": "Link for thumbnail sized photo"
                                            }
                                        ],
                                        "swagger_type": "GroupSummary",
                                        "who": "What the group calls its members"
                                    }
                                ]
                            }
                        ],
                        "actions": "List of actions available for the authenticated member to perform.\nCurrently only \"message\" is supported",
                        "blocks": "Boolean indication of whether or not the authenticated member blocks this member",
                        "friends": "Boolean indication of whether or not the authenticated member is a friend of the member",
                        "swagger_type": "MemberSelf"
                    }
                ],
                "messaging_pref": "The member's preference for being contacted from other members on the platform.\nReturned only when the fields request parameter value includes \"messaging_pref\".\nMay be one of the following: \"all_members\", \"groups_only\", or \"orgs_only\""
            },
            "tag": "create",
            "responseModel": "CreateGroupMembers"
        },
        "CreateGroupPhotoAlbumsPhotos": {
            "version": "3",
            "name": "CreateGroupPhotoAlbumsPhotos",
            "httpMethod": "POST",
            "parameters": {
                "urlname": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "album_id": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "await": {
                    "location": "query",
                    "required": false,
                    "description": "Optional boolean parameter that will defer a request's a response until confirmation that photo is immediately displayable is received."
                },
                "caption": {
                    "location": "query",
                    "required": false,
                    "description": "Caption for display. Max length 255"
                },
                "fields": {
                    "location": "query",
                    "required": false,
                    "description": "A comma-delimited list of optional response fields.\nCurrently supported values are \"self\" and \"comment_count\""
                },
                "photo": {
                    "location": "query",
                    "required": false,
                    "description": "Photo upload data, encoded as multipart/form-data. The maximum file size allowed is 10MB"
                }
            },
            "summary": "Support for uploading new Album photos",
            "uri": "/{urlname}/photo_albums/{album_id}/photos",
            "notes": "A valid path parameter value for\n__:urlname__ and __:album_id__\nis required\n\nThis method expects an HTTP POST containing a Content-Type of `multipart/form-data`.\nOnly the `photo` parameter, which represents the photo being uploaded, is required.\n\nUploaded photos are fed into a separate photo staging process and may not be\nimmediately available for display. To receive responses for photos that are immediately\ndisplayable, send the `await` request parameter with a value of `true`.\n\nA maximum of 500 photos are allowed for a given album.\n\nAuthentication credentials should be omitted from the request body and be sent via\nHTTP Authorization header or as query string parameters",
            "response": {
                "utc_offset": "Numeric utc offset based on the timezone of the group\nhosting the event this photo was posted in",
                "comment_count": "The number of comments posted about this photo.\nReturned when 'comment_count' is present\nin the 'fields' request parameter.",
                "highres_link": "Link for full sized photo",
                "created": "Time photo was uploaded, in milliseconds since the epoch",
                "base_url": "A base url that can be use to construct a photo url from its components",
                "link": "Link to photo on meetup.com",
                "caption": "Photo caption, if defined",
                "type": "Type of photo. One of \"event\" or \"member\"",
                "thumb_link": "Link for thumbnail sized photo",
                "short_link": "Shortened link to photo on meetup.com. Returned when 'short_link'\nis present in the 'fields' request parameter",
                "swagger_type": "EventPhoto",
                "photo_album": [
                    "Photo album the photo is associated with",
                    {
                        "photo_count": "Number of photos uploaded",
                        "id": "Unique numeric identifier for photo album",
                        "event": [
                            "Event photo album belongs to. This will be absent if the album\nis not associated with an event",
                            {
                                "utc_offset": "The local offset from UTC time, in milliseconds",
                                "name": "Name of event",
                                "id": "Alphanumeric event ID",
                                "time": "UTC start time of the event, in milliseconds since the epoch",
                                "swagger_type": "BasicEvent",
                                "yes_rsvp_count": "Number of yes RSVPs"
                            }
                        ],
                        "title": "Album title",
                        "swagger_type": "EventPhotoSummary"
                    }
                ],
                "member": [
                    "Member who uploaded the photo. If member has since left the group,\nthis will return a member with an id of 0",
                    {
                        "role": "The leadership role of this member within the group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
                        "name": "Name of member",
                        "photo": [
                            "Member photo, if available.\nMembers who registered via Facebook may not have highres photos",
                            {
                                "highres_link": "Link for full sized photo",
                                "base_url": "A base url that can be use to construct a photo url from its components",
                                "id": "Numeric photo ID",
                                "photo_link": "Link for standard sized photo",
                                "type": "Type of photo. One of \"event\" or \"member\"",
                                "thumb_link": "Link for thumbnail sized photo"
                            }
                        ],
                        "bio": "Intro of member",
                        "id": "Numeric member ID",
                        "title": "Organizer defined title of member. May be absent if not defined",
                        "event_context": [
                            "Member's context within the event. Only returned in the context of an event",
                            {
                                "host": "Boolean indicator for whether this member is a host for the event"
                            }
                        ],
                        "swagger_type": "AttendanceSummary"
                    }
                ],
                "self": [
                    "Context for the authenticated member.\nReturned when 'self' is present\nin the 'fields' request parameter and the authenticated\nis a member of the group the photo is associated with.",
                    {
                        "actions": "List of actions the authenticated member may perform on this photo\nor its containing album, potentially one or more of the following\n\n\"comment\" if member can comment on this photo\n\n\"delete\" if the member can delete the photo\n\n\"edit\" if the member can edit the photo details\n\n\"upload_photo\" if the member can upload new photos"
                    }
                ],
                "id": "Numeric photo ID",
                "photo_link": "Link for standard sized photo",
                "updated": "Time photo was last updated, in milliseconds since the epoch",
                "group": [
                    "Group the photo is associated with.\" +\n          \"|Returned when 'group' is present \" +\n          \"|in the 'fields' request parameter.",
                    {
                        "join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
                        "photo_gradient": [
                            "Color combination used generate group duotone",
                            {
                                "dark_color": "Dark color in hexidecimal format",
                                "id": "Unique numeric identifier",
                                "composite_color": "Composite color in hexidecimal format",
                                "light_color": "Light color in hexidecimal format",
                                "swagger_type": "Duotone"
                            }
                        ],
                        "name": "Name of the group",
                        "key_photo": [
                            "Group primary photo",
                            {
                                "highres_link": "Link for full sized photo",
                                "base_url": "A base url that can be use to construct a photo url from its components",
                                "id": "Numeric photo ID",
                                "photo_link": "Link for standard sized photo",
                                "type": "Type of photo. One of \"event\" or \"member\"",
                                "thumb_link": "Link for thumbnail sized photo"
                            }
                        ],
                        "id": "Numeric group ID",
                        "urlname": "Urlname used to identify the group on meetup.com",
                        "group_photo": [
                            "Group photo",
                            {
                                "highres_link": "Link for full sized photo",
                                "base_url": "A base url that can be use to construct a photo url from its components",
                                "id": "Numeric photo ID",
                                "photo_link": "Link for standard sized photo",
                                "type": "Type of photo. One of \"event\" or \"member\"",
                                "thumb_link": "Link for thumbnail sized photo"
                            }
                        ],
                        "swagger_type": "GroupSummary",
                        "who": "What the group calls its members"
                    }
                ]
            },
            "tag": "upload",
            "responseModel": "CreateGroupPhotoAlbumsPhotos"
        },
        "CreateGroupTopics": {
            "version": "3",
            "name": "CreateGroupTopics",
            "httpMethod": "POST",
            "parameters": {
                "urlname": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "topic_id": {
                    "location": "query",
                    "required": false,
                    "description": "Comma-delimited list of topic ids to associate with group"
                }
            },
            "summary": "Associates topics with a given Meetup group. Limited to organizers of the group. OAuth authenticated requests require an additional [group_edit](/meetup_api/auth/#oauth2-scopes) permission.",
            "uri": "/{urlname}/topics",
            "notes": "A group can have at most 15 topics",
            "response": {
                "country": "Country of the group",
                "pending_members": "Number representing the count of members pending organizer approval to join. Returned only when requested in the fields request parameter and the authenticated member has permission to approve members",
                "city": "City of the group",
                "similar_groups": [
                    "Optional fields parameter. Returns up to 5 groups similar to this groups, best suited for the authenticated member when a single group is queried for. Note: this field is being deprecated in favor of making a separate request to /:urlname/similar_groups",
                    {
                        "join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
                        "name": "Name of the group",
                        "lon": "Longitude",
                        "id": "Id of the group",
                        "urlname": "Urlname used to identify the group on meetup.com",
                        "photos": [
                            "Optional fields parameter. A small set of photos from the group",
                            {
                                "highres_link": "Link for full sized photo",
                                "base_url": "A base url that can be use to construct a photo url from its components",
                                "id": "Numeric photo ID",
                                "photo_link": "Link for standard sized photo",
                                "type": "Type of photo. One of \"event\" or \"member\"",
                                "thumb_link": "Link for thumbnail sized photo"
                            }
                        ],
                        "lat": "Latitude",
                        "who": "What this group calls it's members"
                    }
                ],
                "timezone": "This represents the universal timezone identifier for the group",
                "link": "Link to group on meetup.com",
                "description": "Short description of group",
                "lon": "Longitude",
                "welcome_message": "Optional fields parameter. Returns the Group's default welcome message if the authenticated member is the organizer of the group",
                "is_simplehtml": "Optional field, 'true' when the group description has been saved in a simplified HTML format, 'false' otherwise.",
                "group_photo": [
                    "Group photo",
                    {
                        "highres_link": "Link for full sized photo",
                        "base_url": "A base url that can be use to construct a photo url from its components",
                        "id": "Numeric photo ID",
                        "photo_link": "Link for standard sized photo",
                        "type": "Type of photo. One of \"event\" or \"member\"",
                        "thumb_link": "Link for thumbnail sized photo"
                    }
                ],
                "photos": [
                    "A small set of photos from the group",
                    {
                        "highres_link": "Link for full sized photo",
                        "base_url": "A base url that can be use to construct a photo url from its components",
                        "id": "Numeric photo ID",
                        "photo_link": "Link for standard sized photo",
                        "type": "Type of photo. One of \"event\" or \"member\"",
                        "thumb_link": "Link for thumbnail sized photo"
                    }
                ],
                "short_link": "Optional field, a shorted URL for the group",
                "join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
                "approved": "Boolean indicator for whether this Group has been approved or not.\nNew Groups are generally approved (or removed)\nsoon after creation.\nReturned when the \"fields\" request parameter value includes\n\"approved\"",
                "contributions": [
                    "Optional field containing the contribution details of the group",
                    {
                        "thanks": "The 'thank you' message to be given when a contribution is made",
                        "reason": "The reason a member might consider contributing",
                        "potential": "Boolean stating that potential contributions are enabled for the group",
                        "enabled": "Boolean stating if contributions are enabled for the group"
                    }
                ],
                "members": "Number of Meetup members in this group",
                "state": "State of the group, if in US or Canada",
                "simple_html_description": "Description of the group, in simple HTML source format. If this group's description was saved in simple HTML format, the description field will be an HTML translation of this source. Returned when the \"fields\" request parameter value contains \"simple_html_description\"",
                "id": "Numeric group ID",
                "urlname": "Urlname used to identify the group on meetup.com",
                "membership_dues": [
                    "Optional field, returns membership dues for group if any",
                    {
                        "refund_policy": [
                            "Conditions for refunds",
                            {
                                "group_closes": "refund applies when the group closes",
                                "member_leaves": "refund applies when member leaves the group",
                                "none": "indicates there is no refund policy",
                                "member_banned": "refund applies when the member is banned",
                                "custom": "Boolean indicator of a custom refund policy"
                            }
                        ],
                        "reasons": "Array of reasons containing one or more of the following values compensate_organizer, cover_costs, encourage_engagement, improve_meetups, other, provide_supplies, reserve_fund",
                        "methods": [
                            "Methods of payments",
                            {
                                "credit_card": "Boolean indicator that credit cards are accepted",
                                "other": "Boolean indicator that other forms of payment are accepted",
                                "paypal": "Boolean indicator that Paypal payments are accepted",
                                "amazon_payments": "Boolean indicator that Amazon Payments are accepted"
                            }
                        ],
                        "fee": "Numeric fee value",
                        "trial_days": "When present, returns the number of days the group is offering a free trial period for to new members. When not present, this indicates that the group does not offer a trial membership period",
                        "self_payment_required": "Returns true if the authorized user is prevented from participating in the group until a payment is made",
                        "required": "true if dues are required",
                        "swagger_type": "MembershipDues",
                        "fee_desc": "The interval at which dues must be paid. Possible values may include: \"month\", \"year\", \"day\", or \"every other day\"",
                        "currency": "Currency in which the fee is declared",
                        "reasons_other": "An additional reason if specified.",
                        "required_to": "If the dues are required this indicates what they are required for. May be one of 'join' or 'rsvp'"
                    }
                ],
                "lat": "Latitude",
                "next_event": [
                    "The current ongoing or next upcoming event, if one is scheduled",
                    {
                        "utc_offset": "The local offset from UTC time, in milliseconds",
                        "name": "Name of event",
                        "id": "Alphanumeric event ID",
                        "time": "UTC start time of the event, in milliseconds since the epoch",
                        "swagger_type": "BasicEvent",
                        "yes_rsvp_count": "Number of yes RSVPs"
                    }
                ],
                "list_mode": "Optional field representing the policy for who can post the group mailing list. Returned when the \"fields\" request parameter value contains \"list_mode\". Value may be one of \"moderated\", \"off\", \"open\", or \"orgs_only\"",
                "photo_gradient": [
                    "Color combination used generate group duotone",
                    {
                        "dark_color": "Dark color in hexidecimal format",
                        "id": "Unique numeric identifier",
                        "composite_color": "Composite color in hexidecimal format",
                        "light_color": "Light color in hexidecimal format",
                        "swagger_type": "Duotone"
                    }
                ],
                "ga_code": "Optional field return the Google Analytics code for the group. Only members that can edit group settings can see this",
                "localized_country_name": "Name of country of the group",
                "join_info": [
                    "Optional field, lists any questions requested when joining and required fields",
                    {
                        "photo_req": "true if required, false otherwise",
                        "questions": [
                            "List of profile questions organizer would like new members to answer prior to joining",
                            {
                                "question": "The text of the question",
                                "id": "Unique numeric identifier for the question"
                            }
                        ],
                        "questions_req": "true if required, false otherwise",
                        "swagger_type": "GroupJoinInfo"
                    }
                ],
                "visibility": "Who can see this group. One of members, public or public_limited",
                "topics": [
                    "Optional fields parameter. Returns the group's topics",
                    {
                        "name": "Display name of the topic",
                        "urlkey": "The unique keyword used to identify this topic",
                        "id": "Numeric topic id",
                        "lang": "Language topic originates from",
                        "swagger_type": "TopicSummary"
                    }
                ],
                "created": "Time the group was created in milliseconds since the epoch",
                "key_photo": [
                    "Group primary photo",
                    {
                        "highres_link": "Link for full sized photo",
                        "base_url": "A base url that can be use to construct a photo url from its components",
                        "id": "Numeric photo ID",
                        "photo_link": "Link for standard sized photo",
                        "type": "Type of photo. One of \"event\" or \"member\"",
                        "thumb_link": "Link for thumbnail sized photo"
                    }
                ],
                "plain_text_description": "Description of the group, in plain text format. Returned when then \"fields\" request parameter value contains \"plain_text_description\"",
                "list_addr": "Optional field returning list address prefix. List mail will be {list_addr}-list@meetup.com. Announce email will be {list_addr}-announce@meetup.com. You must be a member of the group to see this",
                "organizer": [
                    "Group's primary organizer",
                    {
                        "name": "Name of member",
                        "photo": [
                            "Organizer photo, where defined",
                            {
                                "highres_link": "Link for full sized photo",
                                "base_url": "A base url that can be use to construct a photo url from its components",
                                "id": "Numeric photo ID",
                                "photo_link": "Link for standard sized photo",
                                "type": "Type of photo. One of \"event\" or \"member\"",
                                "thumb_link": "Link for thumbnail sized photo"
                            }
                        ],
                        "bio": "Bio of member",
                        "id": "Numeric member ID",
                        "swagger_type": "SimpleMember"
                    }
                ],
                "leads": "Optional field representing the number of members on this group's leadership team. Returned when the \"fields\" request parameter value contains \"leads\"",
                "last_event": [
                    "Optional field representing the last hosted event, if the group has one. Returned when the \"fields\" request parameter value contains \"last_event\"",
                    {
                        "utc_offset": "The local offset from UTC time, in milliseconds",
                        "name": "Name of event",
                        "id": "Alphanumeric event ID",
                        "time": "UTC start time of the event, in milliseconds since the epoch",
                        "swagger_type": "BasicEvent",
                        "yes_rsvp_count": "Number of yes RSVPs"
                    }
                ],
                "name": "Name of the group",
                "member_cap": "Number representing the maximum number of active members this group can have if capped. Returned only when requested in the fields request parameter and the authenticated member has permission to approve members",
                "self": [
                    "Optional field, contains details specific to the authorized user in this Meetup Group",
                    {
                        "visited": "Member's last visit to the group site, in milliseconds since the epoch",
                        "role": "Member's role in group, if any: Organizer, Assistant Organizer, Event Organizer, etc.",
                        "membership_dues": [
                            "Member's membership dues if the group has membership dues",
                            {
                                "paid_until": "For groups with recurring billing periods, this returns the time in milliseconds since the epoch that the member's next payment is due",
                                "total_amount": "Total amount paid",
                                "cancelled": "For groups with recurring billing periods, this Boolean field indicates that membership dues were cancelled",
                                "transaction_time": "Time the transaction was made in milliseconds since the epoch",
                                "exempt": "For groups with recurring billing periods, this Boolean field indicates that the member is exempt from payment.",
                                "trial": [
                                    "If the group offers a trial membership, this indicates information for unpaid members.",
                                    {
                                        "days": "The total number of trial days offered by the group",
                                        "days_remaining": "The number of days remaining in the member's trial period",
                                        "expired": "Boolean indicator of whether or not the unpaid subscription has expired or not"
                                    }
                                ],
                                "period_status": "For groups with recurring billing periods, this returns one of the following values grace paid pending unpaid"
                            }
                        ],
                        "actions": "List of actions the authenticated member may perform, potentially \"broadcast_message\": the ability to broadcast messages to group members via the \"announce\" mailing list, \"event_create\": the ability to create new events, \"event_draft\": the ability to save new events as drafts, \"role_assign\": the ability to assign member roles, \"edit\": the ability to edit group settings, \"member_approval\": the ability to approve or decline member requests to join, or \"subscription_upgrade\": the ability to upgrade this group's subscription plan",
                        "status": "Indicates the authorized user's membership with this group. Value may be one of \"none\", \"pending\", \"pending_payment\", \"active\", or \"blocked\""
                    }
                ],
                "category": [
                    "The primary category of the group, if the group has one",
                    {
                        "name": "Display name of the category",
                        "sort_name": "Name used for sorting",
                        "id": "Numeric category id",
                        "shortname": "String identifier of the category",
                        "swagger_type": "GroupCategory"
                    }
                ],
                "who": "What the group calls its members"
            },
            "tag": "add",
            "responseModel": "CreateGroupTopics"
        },
        "CreateGroupVenues": {
            "version": "3",
            "name": "CreateGroupVenues",
            "httpMethod": "POST",
            "parameters": {
                "urlname": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "address_1": {
                    "location": "query",
                    "required": false,
                    "description": "Primary address of the venue"
                },
                "state": {
                    "location": "query",
                    "required": false,
                    "description": "If in the US or CA, the state code for the venue"
                },
                "hours": {
                    "location": "query",
                    "required": false,
                    "description": "Open hours information about the venue"
                },
                "country": {
                    "location": "query",
                    "required": false,
                    "description": "2 character country code of the venue"
                },
                "web_url": {
                    "location": "query",
                    "required": false,
                    "description": "Optional web url for the venue"
                },
                "visibility": {
                    "location": "query",
                    "required": false,
                    "description": "Optional value indicating the venues visibility to others. May be one of private or public. Defaults to 'public'"
                },
                "phone": {
                    "location": "query",
                    "required": false,
                    "description": "Optional phone number for the venue"
                },
                "name": {
                    "location": "query",
                    "required": false,
                    "description": "Unique name of the venue"
                },
                "address_2": {
                    "location": "query",
                    "required": false,
                    "description": "Secondary address info"
                },
                "city": {
                    "location": "query",
                    "required": false,
                    "description": "City name of the venue"
                }
            },
            "summary": "Interface for creating new Meetup venues",
            "uri": "/{urlname}/venues",
            "notes": "The :urlname path element may be any valid group urlname or domain name. The required parameters are highlighted below. To avoid creating duplicate Meetup venues, this endpoint will attempt to resolve potentially similar venues based on name and address before creating a new public venues. If potential matches are detected, this method will return a 409 Conflict response containing a list of potential matches",
            "response": {
                "zip": "If available, the venue's ZIP code",
                "country": "If available, the name of the venue's country code",
                "localized_country_name": "If available, the localized name of the venue's country",
                "visibility": "'private' if this venue is a private home, otherwise 'public'",
                "city": "If available, the name of the venue's city",
                "address_1": "If available, the first address line of the venue",
                "address_2": "If available, the second address line of the venue",
                "address_3": "If available, the third address line of the venue",
                "rating": "The average rating for the venue",
                "lon": "If available, the venue's longitude",
                "rating_count": "The number of times the venue was rated",
                "taglist": "list of string tags associated with the venue. returned when fields=taglist",
                "phone": "If available, the venue's photo number",
                "name": "If available, the venue's name",
                "state": "If available, and the venue's country id is within the US or Canada, the venue's state",
                "id": "Id, of the venue",
                "lat": "If available, the venue's latitude"
            },
            "tag": "create",
            "responseModel": "CreateGroupVenues"
        },
        "CreateMembersPhotos": {
            "version": "3",
            "name": "CreateMembersPhotos",
            "httpMethod": "POST",
            "parameters": {
                "member_id": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "await": {
                    "location": "query",
                    "required": false,
                    "description": "Optional boolean parameter that, when set to true, will defer a request's a response until confirmation that photo is immediately displayable is received."
                },
                "main": {
                    "location": "query",
                    "required": false,
                    "description": "Optional boolean parameter that, when set to true, will cause the member's main profile photo to be set to the uploaded photo"
                },
                "sync_photo": {
                    "location": "query",
                    "required": false,
                    "description": "Optional boolean parameter that, when set to true, will sync all of the group profile photos for the member with the provided photo"
                },
                "photo": {
                    "location": "query",
                    "required": false,
                    "description": "Photo upload data, encoded as a multipart/form-data file. The maximum file size allowed is 10MB"
                }
            },
            "summary": "Support for uploading new Member photos",
            "uri": "/members/{member_id}/photos",
            "notes": "A valid path parameter value for __:member_id__ is required. This value must match the authenticated\nmember's id or \"self\".\n\nSince this method can change properties of your member profile, OAuth authenticated applications must\nrequest the [profile_edit](/meetup_api/auth/#profile_edit_scope)\npermission scope.\n\nThis method expects an HTTP POST containing a body with Content-Type of `multipart/form-data`.\nOnly the `photo` parameter, which represents the photo being uploaded, is required.\n\nUploaded photos are fed into a separate photo staging process and may not be\nimmediately available for display. To receive responses for photos that are immediately\ndisplayable, send the `await` request parameter with a value of `true`.\n\nAuthentication credentials must be omitted from the request body and be sent via\nHTTP Authorization header or as query string parameters",
            "response": {
                "highres_link": "Link for full sized photo",
                "base_url": "A base url that can be use to construct a photo url from its components",
                "id": "Numeric photo ID",
                "photo_link": "Link for standard sized photo",
                "type": "Type of photo. One of \"event\" or \"member\"",
                "thumb_link": "Link for thumbnail sized photo"
            },
            "tag": "post",
            "responseModel": "CreateMembersPhotos"
        },
        "CreateNotificationsRead": {
            "version": "3",
            "name": "CreateNotificationsRead",
            "httpMethod": "POST",
            "parameters": {
                "fields": {
                    "location": "query",
                    "required": false,
                    "description": "Request that additional fields (separated by commas) be included in the output."
                },
                "since_id": {
                    "location": "query",
                    "required": false,
                    "description": "The id of the newest notification item, typically the first in the list returned by the notifications endpoint"
                }
            },
            "summary": "Marks groups of [notifications](/meetup_api/docs/notifications/) as read.",
            "uri": "/notifications/read",
            "notes": null,
            "response": {
                "read": "True or False indicating whether a notification has been read",
                "kind": "Identifier indicating the kind of notification.\n\nThis may be one of comment, custom, donation_expire_notice, donation_potential_payment, dues, dues_confirm, dues_trial_notice, event_announce, event_announce_to_orgs, event_announce_untrusted, event_cancel, event_change, event_interest_org_push, event_reminder, external_url, group_announce, group_announce_push, invitation_acceptance, join, like, mug_comm_announce, mug_comm_comment, mug_comm_comment_like, mug_comm_invite, org_approve, outside_mup_rec, pending_member, photo, photo_tag, post_attendance, reply, rsvp, rsvp_confirm, spot_open, webview_url",
                "link": "Link to resource notification was triggered by",
                "photo": [
                    "A photo related to the notifications. Potentially absent",
                    {
                        "highres_link": "Link for full sized photo",
                        "base_url": "A base url that can be use to construct a photo url from its components",
                        "id": "Numeric photo ID",
                        "photo_link": "Link for standard sized photo",
                        "type": "Type of photo. One of \"event\" or \"member\"",
                        "thumb_link": "Link for thumbnail sized photo"
                    }
                ],
                "setting": [
                    "The setting that controls the member's preference for receiving sendings of this kind of notification",
                    {
                        "email": [
                            "A push setting if available",
                            {
                                "name": "display code"
                            }
                        ],
                        "push": [
                            "An email setting if available",
                            {
                                "name": "display code"
                            }
                        ]
                    }
                ],
                "target": [
                    "kind specific properties which may be used to navigate back to the source of the notification",
                    {
                        "member_id": "If needed, the numeric ID of the member involved in the notification",
                        "event_id": "If needed, the alphanumeric ID of the event which relates to this notification",
                        "photo_id": "If needed, a numeric photo ID",
                        "group_id": "If needed, the numeric ID of the group which relates to this notification",
                        "pending": "If needed, a boolean valid indicating the membership status of member_id in the context of a group",
                        "comment_parent_id": "If needed, the numeric ID of the top-level comment which relates to this notification",
                        "album_id": "If needed, a numeric photo album ID",
                        "comment_id": "If needed, the numeric ID of the comment which relates to this notification",
                        "type": "Identifier indicating the view that should be navigated to.\n\nThese may be one of: group, group_member_list, group_member_profile, event, topic_picker, calendar, group_list, event_photos, event_comments, friends_calendar, friends_groups, start_group, external_url, event_location, deeplink_url",
                        "group_urlname": "If needed, the alpha numeric urlname of the group which relates to this notification"
                    }
                ],
                "important": "True or False indicating a notification's level of importance",
                "photo_type": "Type of photo, event or member",
                "self": [
                    "Information pertaining the authorized member associated with this notification",
                    {
                        "action": "An action that may be performed on this notification.\n\nFor `group_announce` notifications this may be 'instant_join', meaning the group\nassociated with the notification may be joined without filling out profile\ninformation, or 'form_join', the group associated with the notification requires\nsome join information.\n\n`event_announce` and `spot_open` notifications this may be 'instant_rsvp', meaning\nthe event may be RSVP'd to without requiring additional input, or 'form_rsvp',\nmeaning the event may require some input on the current member's behalf before\nRSVPing.\n\nFor `event_reminder` notifications this may be 'instant_rsvp' if recipient is\na non-rsvper or 'instant_rsvp_no' if recipient is a yes rsvper.\n\nFor `pending_member` notifications this may be 'approve_member'."
                    }
                ],
                "text": "Notification content as text",
                "id": "A unique identifier for a notification",
                "category": "Identifier indicating a high level categorization of related kinds.\n\nThis may be one of comment, default, event, group, money, photo",
                "updated": "The last time the notification was modified, indicated as the time in milliseconds since the epoch"
            },
            "tag": null,
            "responseModel": "CreateNotificationsRead"
        },
        "CreateRecommendedGroupsIgnores": {
            "version": "3",
            "name": "CreateRecommendedGroupsIgnores",
            "httpMethod": "POST",
            "parameters": {
                "urlname": {
                    "location": "uri",
                    "required": true,
                    "description": null
                }
            },
            "summary": "Provides a form of feedback by requesting to remove a group from future recommendations",
            "uri": "/recommended/groups/ignores/{urlname}",
            "notes": "Only the path parameter :urlname is required. You are limited to 100 of these requests in a 24 hour period of time.",
            "response": null,
            "tag": null,
            "responseModel": "CreateRecommendedGroupsIgnores"
        },
        "CreateSelfAbuseReports": {
            "version": "3",
            "name": "CreateSelfAbuseReports",
            "httpMethod": "POST",
            "parameters": {
                "member_id": {
                    "location": "query",
                    "required": false,
                    "description": "A numeric identifier for the member being reported. If not provided, this will be infered by the author of the content associated with the provided `content_tag`"
                },
                "type": {
                    "location": "query",
                    "required": false,
                    "description": "A required identifier for type of abuse you are reporting. Acceptable values include abuse, cron, dangerous, dislike_photo, fake, graphic_content, graphic_photo, harmful_activities, impersonation, inappropriate, inappropriate_photo, join, licensed_services, not_accurate, not_community, not_irl, nudity, offsite, other, pay_dispute, photo, promotion_focus, sex, spam, transactional, underage, violence"
                },
                "comments": {
                    "location": "query",
                    "required": false,
                    "description": "An optional string of text that describes why you are submitting this report"
                },
                "url": {
                    "location": "query",
                    "required": false,
                    "description": "An optional URL for the location of the reported content if one exists"
                },
                "content_tag": {
                    "location": "query",
                    "required": false,
                    "description": "An optional identifier for flagged content that identifies both the type and id, where possible, of the content reported. The type and id should be separated by a ':' character, e.g `event_comment:{event_comment_id}`. Valid content_tag types include conversation, conversation_message, convo, custom_list, email, event_comment, event_photo, group, group_communication, group_communication_message, mailing_list, member_photo, member_profile, message_board, pro_megaphone, reply. If member_id is not provided, content_tag should be provided to imply member_id"
                }
            },
            "summary": "Submits a new abuse report for a target member. Abuse reports will be followed up on by our Community Support team.",
            "uri": "/self/abuse_reports",
            "notes": "This method requires the oauth `reporting` scope for oauth-authenticated requests",
            "response": null,
            "tag": null,
            "responseModel": "CreateSelfAbuseReports"
        },
        "CreateSelfBlocks": {
            "version": "3",
            "name": "CreateSelfBlocks",
            "httpMethod": "POST",
            "parameters": {
                "member_id": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "report": {
                    "location": "query",
                    "required": false,
                    "description": "An optional value that represents a type of abuse the target member is being blocked for. Acceptable values include one of the following: fake, impersonation, inappropriate_photo, offsite, underage"
                },
                "comments": {
                    "location": "query",
                    "required": false,
                    "description": "An optional string of text describing why you have chosen to block this member"
                }
            },
            "summary": "Blocks a target member from various interactions with the authenticated member on the platform",
            "uri": "/self/blocks/{member_id}",
            "notes": "A valid member_id path parameter for the target member is required. This method requires the oauth `reporting` scope for oauth-authenticated requests",
            "response": null,
            "tag": "block",
            "responseModel": "CreateSelfBlocks"
        },
        "DeleteGroupEvents": {
            "version": "3",
            "name": "DeleteGroupEvents",
            "httpMethod": "DELETE",
            "parameters": {
                "urlname": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "id": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "remove_from_calendar": {
                    "location": "query",
                    "required": false,
                    "description": "Optional boolean parameter that, when set to true, fully deletes the event.\nIf set to false, this operation cancels the event instead of completely removing it from the group's calendar.\nThis defaults to true when not set explicitly."
                },
                "update_series": {
                    "location": "query",
                    "required": false,
                    "description": "Optional boolean parameter that, when set to true, will update all future recurrences of this event if this event belongs to an event series.\nRequesting this for an event that doesn't belong to an active series will result in an error.\nYou can detect an event's association with a series by sending fields=series when requesting event data.\nThis defaults to false, when not set explicitly"
                }
            },
            "summary": "Cancels or removes an event from a groups calendar",
            "uri": "/{urlname}/events/{id}",
            "notes": "Valid path parameters for __:urlname__ and event __:id__ are required.\n\nOnly organizers and the creator of the Meetup event may delete the event\n\nOAuth authenticated applications should request the [event_management](/meetup_api/auth/#event_management_scope) OAuth scope.",
            "response": null,
            "tag": "delete",
            "responseModel": "DeleteGroupEvents"
        },
        "DeleteGroupEventsComments": {
            "version": "3",
            "name": "DeleteGroupEventsComments",
            "httpMethod": "DELETE",
            "parameters": {
                "urlname": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "event_id": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "comment_id": {
                    "location": "uri",
                    "required": true,
                    "description": null
                }
            },
            "summary": "Deletes comments posted in events",
            "uri": "/{urlname}/events/{event_id}/comments/{comment_id}",
            "notes": "A path parameter for __:urlname__, __:event_id__,\nand __:comment_id__ is required.\n\nThe __:comment_id__ path parameter should be formatted as `comment:{comment_id}`\nfor top level comments or `reply:{reply_id}` for comment replies\n\nTo obtain a list of comments and their replies for an event, see the\n[event comments](/meetup_api/docs/:urlname/events/:event_id/comments/) endpoint\n\nOnly organizers or the member that posted the comment may delete the comment\n\nIn addition,\nauthorized oauth applications should request the\n[group_content_edit](/meetup_api/auth/#group_content_edit_scope) permission scope.",
            "response": null,
            "tag": "delete",
            "responseModel": "DeleteGroupEventsComments"
        },
        "DeleteGroupEventsCommentsLikes": {
            "version": "3",
            "name": "DeleteGroupEventsCommentsLikes",
            "httpMethod": "DELETE",
            "parameters": {
                "urlname": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "event_id": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "comment_id": {
                    "location": "uri",
                    "required": true,
                    "description": null
                }
            },
            "summary": "Unlike a given event comment",
            "uri": "/{urlname}/events/{event_id}/comments/{comment_id}/likes",
            "notes": "A path parameter for __:urlname__,  __:event_id__,\nand __:comment_id__ is required\n\nThe __:comment_id__ should be formatted as `comment:{comment_id}` for top level comments\nor `reply:{reply_id}` for comment replies.\n\nTo obtain a list of comments and their replies for an event, see the\n[event comments](/meetup_api/docs/:urlname/events/:event_id/comments/) endpoint",
            "response": null,
            "tag": "delete",
            "responseModel": "DeleteGroupEventsCommentsLikes"
        },
        "DeleteGroupEventsPhotos": {
            "version": "3",
            "name": "DeleteGroupEventsPhotos",
            "httpMethod": "DELETE",
            "parameters": {
                "urlname": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "event_id": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "photo_id": {
                    "location": "uri",
                    "required": true,
                    "description": null
                }
            },
            "summary": "Deletes a specified event photo",
            "uri": "/{urlname}/events/{event_id}/photos/{photo_id}",
            "notes": "A valid path parameter value for\n__:urlname__ and __:event_id__, and __:photo_id__\nis required\n\nOAuth authenticated applications should\nrequest the [group_content_edit](/meetup_api/auth/#group_content_edit_scope)\npermission scope\n\nOnly the member that uploaded the photo, the organizer may delete the photo",
            "response": null,
            "tag": "delete",
            "responseModel": "DeleteGroupEventsPhotos"
        },
        "DeleteGroupEventsPhotosComments": {
            "version": "3",
            "name": "DeleteGroupEventsPhotosComments",
            "httpMethod": "DELETE",
            "parameters": {
                "urlname": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "event_id": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "photo_id": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "comment_id": {
                    "location": "uri",
                    "required": true,
                    "description": null
                }
            },
            "summary": "Deletes photo comments",
            "uri": "/{urlname}/events/{event_id}/photos/{photo_id}/comments/{comment_id}",
            "notes": "A URI containing a valid group __urlname__,\n__event_id__, __photo_id__, and __comment_id__\nis required.\n\nThe authenticated member must\nbe the original poster of the comment or an admin of the group\n\nIn addition,\nauthorized oauth applications must request the\n[group_content_edit](/meetup_api/auth/#group_content_edit_scope) permission scope.\n",
            "response": null,
            "tag": "delete",
            "responseModel": "DeleteGroupEventsPhotosComments"
        },
        "DeleteGroupMemberApprovals": {
            "version": "3",
            "name": "DeleteGroupMemberApprovals",
            "httpMethod": "DELETE",
            "parameters": {
                "urlname": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "member": {
                    "location": "query",
                    "required": false,
                    "description": "Comma-delimited numeric pending member IDs. The maximum allowed is 200"
                },
                "anon": {
                    "location": "query",
                    "required": false,
                    "description": "Optional Boolean value indicating whether the declining member's email address should be hidden in the resulting response. Default is true."
                },
                "send_copy": {
                    "location": "query",
                    "required": false,
                    "description": "Optional Boolean value indicating whether or not to send a copy to the member issuing the decline. Default is false"
                },
                "explanation": {
                    "location": "query",
                    "required": false,
                    "description": "Optional explanation to send to the members being declined. Max message size is 2000"
                },
                "ban": {
                    "location": "query",
                    "required": false,
                    "description": "Optional Boolean value indicating whether or not to ban the member in the future. Default is false"
                }
            },
            "summary": "Declines one or more requests for group membership",
            "uri": "/{urlname}/member/approvals",
            "notes": "The :urlname path element may be any valid group urlname or domain name. To get a list of pending members, as an organizer, you can request the status `pending` in the [/2/profiles](/meetup_api/docs/2/profiles/#params) method.",
            "response": null,
            "tag": "delete",
            "responseModel": "DeleteGroupMemberApprovals"
        },
        "DeleteGroupMembers": {
            "version": "3",
            "name": "DeleteGroupMembers",
            "httpMethod": "DELETE",
            "parameters": {
                "urlname": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "member_id": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "exit_comment": {
                    "location": "query",
                    "required": false,
                    "description": "Optional message to the organizer when leaving"
                }
            },
            "summary": "Deletes a member's group profiles.",
            "uri": "/{urlname}/members/{member_id}",
            "notes": "A valid path parameter for :urlname and :member_id is required. A value of \"self\"\nmay be used in place of a numeric identifier to represent the authenticated\nMember's id.\n\nOAuth authenticated applications should\nrequest the [profile_edit](/meetup_api/auth/#profile_edit_scope)\npermission scope\n\nOnly the authenticated member is permitted to leave groups they do not organize. For groups they do organize,\nthey must first step down on the groups homepage on www.meetup.com",
            "response": null,
            "tag": "delete",
            "responseModel": "DeleteGroupMembers"
        },
        "DeleteGroupTopics": {
            "version": "3",
            "name": "DeleteGroupTopics",
            "httpMethod": "DELETE",
            "parameters": {
                "urlname": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "topic_id": {
                    "location": "query",
                    "required": false,
                    "description": "Comma-delimited list of topic ids to disassociate with group"
                }
            },
            "summary": "Disassociates topics with a given Meetup group. Limited to organizers of the group. OAuth authenticated requests require an additional [group_edit](/meetup_api/auth/#oauth2-scopes) permission.",
            "uri": "/{urlname}/topics",
            "notes": "Groups must have at least one topic. Attempts to remove all topics will result in a failed request",
            "response": {
                "country": "Country of the group",
                "pending_members": "Number representing the count of members pending organizer approval to join. Returned only when requested in the fields request parameter and the authenticated member has permission to approve members",
                "city": "City of the group",
                "similar_groups": [
                    "Optional fields parameter. Returns up to 5 groups similar to this groups, best suited for the authenticated member when a single group is queried for. Note: this field is being deprecated in favor of making a separate request to /:urlname/similar_groups",
                    {
                        "join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
                        "name": "Name of the group",
                        "lon": "Longitude",
                        "id": "Id of the group",
                        "urlname": "Urlname used to identify the group on meetup.com",
                        "photos": [
                            "Optional fields parameter. A small set of photos from the group",
                            {
                                "highres_link": "Link for full sized photo",
                                "base_url": "A base url that can be use to construct a photo url from its components",
                                "id": "Numeric photo ID",
                                "photo_link": "Link for standard sized photo",
                                "type": "Type of photo. One of \"event\" or \"member\"",
                                "thumb_link": "Link for thumbnail sized photo"
                            }
                        ],
                        "lat": "Latitude",
                        "who": "What this group calls it's members"
                    }
                ],
                "timezone": "This represents the universal timezone identifier for the group",
                "link": "Link to group on meetup.com",
                "description": "Short description of group",
                "lon": "Longitude",
                "welcome_message": "Optional fields parameter. Returns the Group's default welcome message if the authenticated member is the organizer of the group",
                "is_simplehtml": "Optional field, 'true' when the group description has been saved in a simplified HTML format, 'false' otherwise.",
                "group_photo": [
                    "Group photo",
                    {
                        "highres_link": "Link for full sized photo",
                        "base_url": "A base url that can be use to construct a photo url from its components",
                        "id": "Numeric photo ID",
                        "photo_link": "Link for standard sized photo",
                        "type": "Type of photo. One of \"event\" or \"member\"",
                        "thumb_link": "Link for thumbnail sized photo"
                    }
                ],
                "photos": [
                    "A small set of photos from the group",
                    {
                        "highres_link": "Link for full sized photo",
                        "base_url": "A base url that can be use to construct a photo url from its components",
                        "id": "Numeric photo ID",
                        "photo_link": "Link for standard sized photo",
                        "type": "Type of photo. One of \"event\" or \"member\"",
                        "thumb_link": "Link for thumbnail sized photo"
                    }
                ],
                "short_link": "Optional field, a shorted URL for the group",
                "join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
                "approved": "Boolean indicator for whether this Group has been approved or not.\nNew Groups are generally approved (or removed)\nsoon after creation.\nReturned when the \"fields\" request parameter value includes\n\"approved\"",
                "contributions": [
                    "Optional field containing the contribution details of the group",
                    {
                        "thanks": "The 'thank you' message to be given when a contribution is made",
                        "reason": "The reason a member might consider contributing",
                        "potential": "Boolean stating that potential contributions are enabled for the group",
                        "enabled": "Boolean stating if contributions are enabled for the group"
                    }
                ],
                "members": "Number of Meetup members in this group",
                "state": "State of the group, if in US or Canada",
                "simple_html_description": "Description of the group, in simple HTML source format. If this group's description was saved in simple HTML format, the description field will be an HTML translation of this source. Returned when the \"fields\" request parameter value contains \"simple_html_description\"",
                "id": "Numeric group ID",
                "urlname": "Urlname used to identify the group on meetup.com",
                "membership_dues": [
                    "Optional field, returns membership dues for group if any",
                    {
                        "refund_policy": [
                            "Conditions for refunds",
                            {
                                "group_closes": "refund applies when the group closes",
                                "member_leaves": "refund applies when member leaves the group",
                                "none": "indicates there is no refund policy",
                                "member_banned": "refund applies when the member is banned",
                                "custom": "Boolean indicator of a custom refund policy"
                            }
                        ],
                        "reasons": "Array of reasons containing one or more of the following values compensate_organizer, cover_costs, encourage_engagement, improve_meetups, other, provide_supplies, reserve_fund",
                        "methods": [
                            "Methods of payments",
                            {
                                "credit_card": "Boolean indicator that credit cards are accepted",
                                "other": "Boolean indicator that other forms of payment are accepted",
                                "paypal": "Boolean indicator that Paypal payments are accepted",
                                "amazon_payments": "Boolean indicator that Amazon Payments are accepted"
                            }
                        ],
                        "fee": "Numeric fee value",
                        "trial_days": "When present, returns the number of days the group is offering a free trial period for to new members. When not present, this indicates that the group does not offer a trial membership period",
                        "self_payment_required": "Returns true if the authorized user is prevented from participating in the group until a payment is made",
                        "required": "true if dues are required",
                        "swagger_type": "MembershipDues",
                        "fee_desc": "The interval at which dues must be paid. Possible values may include: \"month\", \"year\", \"day\", or \"every other day\"",
                        "currency": "Currency in which the fee is declared",
                        "reasons_other": "An additional reason if specified.",
                        "required_to": "If the dues are required this indicates what they are required for. May be one of 'join' or 'rsvp'"
                    }
                ],
                "lat": "Latitude",
                "next_event": [
                    "The current ongoing or next upcoming event, if one is scheduled",
                    {
                        "utc_offset": "The local offset from UTC time, in milliseconds",
                        "name": "Name of event",
                        "id": "Alphanumeric event ID",
                        "time": "UTC start time of the event, in milliseconds since the epoch",
                        "swagger_type": "BasicEvent",
                        "yes_rsvp_count": "Number of yes RSVPs"
                    }
                ],
                "list_mode": "Optional field representing the policy for who can post the group mailing list. Returned when the \"fields\" request parameter value contains \"list_mode\". Value may be one of \"moderated\", \"off\", \"open\", or \"orgs_only\"",
                "photo_gradient": [
                    "Color combination used generate group duotone",
                    {
                        "dark_color": "Dark color in hexidecimal format",
                        "id": "Unique numeric identifier",
                        "composite_color": "Composite color in hexidecimal format",
                        "light_color": "Light color in hexidecimal format",
                        "swagger_type": "Duotone"
                    }
                ],
                "ga_code": "Optional field return the Google Analytics code for the group. Only members that can edit group settings can see this",
                "localized_country_name": "Name of country of the group",
                "join_info": [
                    "Optional field, lists any questions requested when joining and required fields",
                    {
                        "photo_req": "true if required, false otherwise",
                        "questions": [
                            "List of profile questions organizer would like new members to answer prior to joining",
                            {
                                "question": "The text of the question",
                                "id": "Unique numeric identifier for the question"
                            }
                        ],
                        "questions_req": "true if required, false otherwise",
                        "swagger_type": "GroupJoinInfo"
                    }
                ],
                "visibility": "Who can see this group. One of members, public or public_limited",
                "topics": [
                    "Optional fields parameter. Returns the group's topics",
                    {
                        "name": "Display name of the topic",
                        "urlkey": "The unique keyword used to identify this topic",
                        "id": "Numeric topic id",
                        "lang": "Language topic originates from",
                        "swagger_type": "TopicSummary"
                    }
                ],
                "created": "Time the group was created in milliseconds since the epoch",
                "key_photo": [
                    "Group primary photo",
                    {
                        "highres_link": "Link for full sized photo",
                        "base_url": "A base url that can be use to construct a photo url from its components",
                        "id": "Numeric photo ID",
                        "photo_link": "Link for standard sized photo",
                        "type": "Type of photo. One of \"event\" or \"member\"",
                        "thumb_link": "Link for thumbnail sized photo"
                    }
                ],
                "plain_text_description": "Description of the group, in plain text format. Returned when then \"fields\" request parameter value contains \"plain_text_description\"",
                "list_addr": "Optional field returning list address prefix. List mail will be {list_addr}-list@meetup.com. Announce email will be {list_addr}-announce@meetup.com. You must be a member of the group to see this",
                "organizer": [
                    "Group's primary organizer",
                    {
                        "name": "Name of member",
                        "photo": [
                            "Organizer photo, where defined",
                            {
                                "highres_link": "Link for full sized photo",
                                "base_url": "A base url that can be use to construct a photo url from its components",
                                "id": "Numeric photo ID",
                                "photo_link": "Link for standard sized photo",
                                "type": "Type of photo. One of \"event\" or \"member\"",
                                "thumb_link": "Link for thumbnail sized photo"
                            }
                        ],
                        "bio": "Bio of member",
                        "id": "Numeric member ID",
                        "swagger_type": "SimpleMember"
                    }
                ],
                "leads": "Optional field representing the number of members on this group's leadership team. Returned when the \"fields\" request parameter value contains \"leads\"",
                "last_event": [
                    "Optional field representing the last hosted event, if the group has one. Returned when the \"fields\" request parameter value contains \"last_event\"",
                    {
                        "utc_offset": "The local offset from UTC time, in milliseconds",
                        "name": "Name of event",
                        "id": "Alphanumeric event ID",
                        "time": "UTC start time of the event, in milliseconds since the epoch",
                        "swagger_type": "BasicEvent",
                        "yes_rsvp_count": "Number of yes RSVPs"
                    }
                ],
                "name": "Name of the group",
                "member_cap": "Number representing the maximum number of active members this group can have if capped. Returned only when requested in the fields request parameter and the authenticated member has permission to approve members",
                "self": [
                    "Optional field, contains details specific to the authorized user in this Meetup Group",
                    {
                        "visited": "Member's last visit to the group site, in milliseconds since the epoch",
                        "role": "Member's role in group, if any: Organizer, Assistant Organizer, Event Organizer, etc.",
                        "membership_dues": [
                            "Member's membership dues if the group has membership dues",
                            {
                                "paid_until": "For groups with recurring billing periods, this returns the time in milliseconds since the epoch that the member's next payment is due",
                                "total_amount": "Total amount paid",
                                "cancelled": "For groups with recurring billing periods, this Boolean field indicates that membership dues were cancelled",
                                "transaction_time": "Time the transaction was made in milliseconds since the epoch",
                                "exempt": "For groups with recurring billing periods, this Boolean field indicates that the member is exempt from payment.",
                                "trial": [
                                    "If the group offers a trial membership, this indicates information for unpaid members.",
                                    {
                                        "days": "The total number of trial days offered by the group",
                                        "days_remaining": "The number of days remaining in the member's trial period",
                                        "expired": "Boolean indicator of whether or not the unpaid subscription has expired or not"
                                    }
                                ],
                                "period_status": "For groups with recurring billing periods, this returns one of the following values grace paid pending unpaid"
                            }
                        ],
                        "actions": "List of actions the authenticated member may perform, potentially \"broadcast_message\": the ability to broadcast messages to group members via the \"announce\" mailing list, \"event_create\": the ability to create new events, \"event_draft\": the ability to save new events as drafts, \"role_assign\": the ability to assign member roles, \"edit\": the ability to edit group settings, \"member_approval\": the ability to approve or decline member requests to join, or \"subscription_upgrade\": the ability to upgrade this group's subscription plan",
                        "status": "Indicates the authorized user's membership with this group. Value may be one of \"none\", \"pending\", \"pending_payment\", \"active\", or \"blocked\""
                    }
                ],
                "category": [
                    "The primary category of the group, if the group has one",
                    {
                        "name": "Display name of the category",
                        "sort_name": "Name used for sorting",
                        "id": "Numeric category id",
                        "shortname": "String identifier of the category",
                        "swagger_type": "GroupCategory"
                    }
                ],
                "who": "What the group calls its members"
            },
            "tag": "remove",
            "responseModel": "DeleteGroupTopics"
        },
        "DeleteMembersPhotos": {
            "version": "3",
            "name": "DeleteMembersPhotos",
            "httpMethod": "DELETE",
            "parameters": {
                "member_id": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "photo_id": {
                    "location": "uri",
                    "required": true,
                    "description": null
                }
            },
            "summary": "Deletes a member photo by id",
            "uri": "/members/{member_id}/photos/{photo_id}",
            "notes": "A valid path parameter value for __:member_id__ and __:photo_id__ is required. The value of __:member_id__ must match the authenticated\nmember's id or \"self\".\n\nSince this method can change properties of your member profile, OAuth authenticated applications must\nrequest the [profile_edit](/meetup_api/auth/#profile_edit_scope)\npermission scope.",
            "response": null,
            "tag": "delete",
            "responseModel": "DeleteMembersPhotos"
        },
        "DeleteSelfBlocks": {
            "version": "3",
            "name": "DeleteSelfBlocks",
            "httpMethod": "DELETE",
            "parameters": {
                "member_id": {
                    "location": "uri",
                    "required": true,
                    "description": null
                }
            },
            "summary": "Unblocks a previously blocked member from various interactions with the authenticated member on the platform",
            "uri": "/self/blocks/{member_id}",
            "notes": "A valid member_id path parameter for the target member is required. This method requires the oauth `reporting` scope for oauth-authenticated requests.",
            "response": null,
            "tag": "unblock",
            "responseModel": "DeleteSelfBlocks"
        },
        "EditGroup": {
            "version": "3",
            "name": "EditGroup",
            "httpMethod": "POST",
            "parameters": {
                "urlname": {
                    "location": "query",
                    "required": false,
                    "description": "Name used for the groups web address on meetup.com. Must be between 6 and 60 characters"
                },
                "zip": {
                    "location": "query",
                    "required": false,
                    "description": "The ZIP code of the city"
                },
                "country": {
                    "location": "query",
                    "required": false,
                    "description": "The ISO_3166-1 country code for the country which contains the city"
                },
                "list_mode": {
                    "location": "query",
                    "required": false,
                    "description": "Defines policy for who can post to the group mailing list. May be one of 'open' meaning any member can post, 'off' meaning no one can post, 'moderated' meaning messages must be approved, or 'orgs_only' meaning only organizers may post to the list"
                },
                "dryrun": {
                    "location": "query",
                    "required": false,
                    "description": "Boolean parameter that will cause this endpoint to apply all validation rules without actually saving changes in which case the response will only reflect the group's current attributes"
                },
                "ga_code": {
                    "location": "query",
                    "required": false,
                    "description": "Google Analytics code for group"
                },
                "remove_topics": {
                    "location": "query",
                    "required": false,
                    "description": "Comma-delimited list of topic ids to disassociate with group"
                },
                "visibility": {
                    "location": "query",
                    "required": false,
                    "description": "Restricts group visibility for non-members. May be one of 'public', 'public_limited' or 'members'. Note, the 'members' option is only available to groups that already have 'members' visibility"
                },
                "question_{index}": {
                    "location": "query",
                    "required": false,
                    "description": "A new profile question defined in the order of index provided in the request parameter name"
                },
                "key_photo": {
                    "location": "query",
                    "required": false,
                    "description": "Group's primary photo. Must be ID of an existing album photo"
                },
                "photo_req": {
                    "location": "query",
                    "required": false,
                    "description": "Indicates that a member must provide a photo before joining. Expects true or false values"
                },
                "description": {
                    "location": "query",
                    "required": false,
                    "description": "Summary of what the Meetup group is about in simple HTML format"
                },
                "questions_req": {
                    "location": "query",
                    "required": false,
                    "description": "Indicates that provided questions are required before joining. Expects true or false values"
                },
                "welcome_message": {
                    "location": "query",
                    "required": false,
                    "description": "Message sent to members after they join. Can be at most 2000 characters"
                },
                "join_mode": {
                    "location": "query",
                    "required": false,
                    "description": "Controls how member's are let into the group. May be one of 'open' meaning any Meetup member my join, 'closed' meaning group is not currently accepting new members, or 'approval' meaning members must be approved by an organizer. Note, the 'closed' options is only available to groups that already have a 'closed' join_mode"
                },
                "list_addr": {
                    "location": "query",
                    "required": false,
                    "description": "Mailing list prefix. By default this is the group's urlname."
                },
                "add_topics": {
                    "location": "query",
                    "required": false,
                    "description": "Comma-delimited list of topic ids to associate with group"
                },
                "{service}_uri": {
                    "location": "query",
                    "required": false,
                    "description": "A URI for a social network service. Service must be one of facebook, flickr, linkedin, other, tumblr, twitter"
                },
                "name": {
                    "location": "query",
                    "required": false,
                    "description": "Display name of the group. Can be at most 60 characters"
                },
                "question_edit_{id}": {
                    "location": "query",
                    "required": false,
                    "description": "Edits a current profile question identified by an id in the parameter name. The index updated index should also be encoded in the parameter name. To delete a question, set this to an empty string. Groups that require profile questions must have at least one question"
                },
                "who": {
                    "location": "query",
                    "required": false,
                    "description": "What members of the group will be called. Can be at most 32 characters"
                }
            },
            "summary": "Allows organizers to edit their Meetup group information. To change group topics, see the [add](/meetup_api/docs/:urlname/topics/#add) and [remove](/meetup_api/docs/:urlname/topics/#remove) topics endpoints. To change group photo use the [Group photo upload](/meetup_api/docs/2/group_photo/#create) endpoint. OAuth authenticated requests require an additional [group_edit](/meetup_api/auth/#oauth2-scopes) permission.",
            "uri": "/{urlname}",
            "notes": "All parameters are optional.",
            "response": {
                "country": "Country of the group",
                "pending_members": "Number representing the count of members pending organizer approval to join. Returned only when requested in the fields request parameter and the authenticated member has permission to approve members",
                "city": "City of the group",
                "similar_groups": [
                    "Optional fields parameter. Returns up to 5 groups similar to this groups, best suited for the authenticated member when a single group is queried for. Note: this field is being deprecated in favor of making a separate request to /:urlname/similar_groups",
                    {
                        "join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
                        "name": "Name of the group",
                        "lon": "Longitude",
                        "id": "Id of the group",
                        "urlname": "Urlname used to identify the group on meetup.com",
                        "photos": [
                            "Optional fields parameter. A small set of photos from the group",
                            {
                                "highres_link": "Link for full sized photo",
                                "base_url": "A base url that can be use to construct a photo url from its components",
                                "id": "Numeric photo ID",
                                "photo_link": "Link for standard sized photo",
                                "type": "Type of photo. One of \"event\" or \"member\"",
                                "thumb_link": "Link for thumbnail sized photo"
                            }
                        ],
                        "lat": "Latitude",
                        "who": "What this group calls it's members"
                    }
                ],
                "timezone": "This represents the universal timezone identifier for the group",
                "link": "Link to group on meetup.com",
                "description": "Short description of group",
                "lon": "Longitude",
                "welcome_message": "Optional fields parameter. Returns the Group's default welcome message if the authenticated member is the organizer of the group",
                "is_simplehtml": "Optional field, 'true' when the group description has been saved in a simplified HTML format, 'false' otherwise.",
                "group_photo": [
                    "Group photo",
                    {
                        "highres_link": "Link for full sized photo",
                        "base_url": "A base url that can be use to construct a photo url from its components",
                        "id": "Numeric photo ID",
                        "photo_link": "Link for standard sized photo",
                        "type": "Type of photo. One of \"event\" or \"member\"",
                        "thumb_link": "Link for thumbnail sized photo"
                    }
                ],
                "photos": [
                    "A small set of photos from the group",
                    {
                        "highres_link": "Link for full sized photo",
                        "base_url": "A base url that can be use to construct a photo url from its components",
                        "id": "Numeric photo ID",
                        "photo_link": "Link for standard sized photo",
                        "type": "Type of photo. One of \"event\" or \"member\"",
                        "thumb_link": "Link for thumbnail sized photo"
                    }
                ],
                "short_link": "Optional field, a shorted URL for the group",
                "join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
                "approved": "Boolean indicator for whether this Group has been approved or not.\nNew Groups are generally approved (or removed)\nsoon after creation.\nReturned when the \"fields\" request parameter value includes\n\"approved\"",
                "contributions": [
                    "Optional field containing the contribution details of the group",
                    {
                        "thanks": "The 'thank you' message to be given when a contribution is made",
                        "reason": "The reason a member might consider contributing",
                        "potential": "Boolean stating that potential contributions are enabled for the group",
                        "enabled": "Boolean stating if contributions are enabled for the group"
                    }
                ],
                "members": "Number of Meetup members in this group",
                "state": "State of the group, if in US or Canada",
                "simple_html_description": "Description of the group, in simple HTML source format. If this group's description was saved in simple HTML format, the description field will be an HTML translation of this source. Returned when the \"fields\" request parameter value contains \"simple_html_description\"",
                "id": "Numeric group ID",
                "urlname": "Urlname used to identify the group on meetup.com",
                "membership_dues": [
                    "Optional field, returns membership dues for group if any",
                    {
                        "refund_policy": [
                            "Conditions for refunds",
                            {
                                "group_closes": "refund applies when the group closes",
                                "member_leaves": "refund applies when member leaves the group",
                                "none": "indicates there is no refund policy",
                                "member_banned": "refund applies when the member is banned",
                                "custom": "Boolean indicator of a custom refund policy"
                            }
                        ],
                        "reasons": "Array of reasons containing one or more of the following values compensate_organizer, cover_costs, encourage_engagement, improve_meetups, other, provide_supplies, reserve_fund",
                        "methods": [
                            "Methods of payments",
                            {
                                "credit_card": "Boolean indicator that credit cards are accepted",
                                "other": "Boolean indicator that other forms of payment are accepted",
                                "paypal": "Boolean indicator that Paypal payments are accepted",
                                "amazon_payments": "Boolean indicator that Amazon Payments are accepted"
                            }
                        ],
                        "fee": "Numeric fee value",
                        "trial_days": "When present, returns the number of days the group is offering a free trial period for to new members. When not present, this indicates that the group does not offer a trial membership period",
                        "self_payment_required": "Returns true if the authorized user is prevented from participating in the group until a payment is made",
                        "required": "true if dues are required",
                        "swagger_type": "MembershipDues",
                        "fee_desc": "The interval at which dues must be paid. Possible values may include: \"month\", \"year\", \"day\", or \"every other day\"",
                        "currency": "Currency in which the fee is declared",
                        "reasons_other": "An additional reason if specified.",
                        "required_to": "If the dues are required this indicates what they are required for. May be one of 'join' or 'rsvp'"
                    }
                ],
                "lat": "Latitude",
                "next_event": [
                    "The current ongoing or next upcoming event, if one is scheduled",
                    {
                        "utc_offset": "The local offset from UTC time, in milliseconds",
                        "name": "Name of event",
                        "id": "Alphanumeric event ID",
                        "time": "UTC start time of the event, in milliseconds since the epoch",
                        "swagger_type": "BasicEvent",
                        "yes_rsvp_count": "Number of yes RSVPs"
                    }
                ],
                "list_mode": "Optional field representing the policy for who can post the group mailing list. Returned when the \"fields\" request parameter value contains \"list_mode\". Value may be one of \"moderated\", \"off\", \"open\", or \"orgs_only\"",
                "photo_gradient": [
                    "Color combination used generate group duotone",
                    {
                        "dark_color": "Dark color in hexidecimal format",
                        "id": "Unique numeric identifier",
                        "composite_color": "Composite color in hexidecimal format",
                        "light_color": "Light color in hexidecimal format",
                        "swagger_type": "Duotone"
                    }
                ],
                "ga_code": "Optional field return the Google Analytics code for the group. Only members that can edit group settings can see this",
                "localized_country_name": "Name of country of the group",
                "join_info": [
                    "Optional field, lists any questions requested when joining and required fields",
                    {
                        "photo_req": "true if required, false otherwise",
                        "questions": [
                            "List of profile questions organizer would like new members to answer prior to joining",
                            {
                                "question": "The text of the question",
                                "id": "Unique numeric identifier for the question"
                            }
                        ],
                        "questions_req": "true if required, false otherwise",
                        "swagger_type": "GroupJoinInfo"
                    }
                ],
                "visibility": "Who can see this group. One of members, public or public_limited",
                "topics": [
                    "Optional fields parameter. Returns the group's topics",
                    {
                        "name": "Display name of the topic",
                        "urlkey": "The unique keyword used to identify this topic",
                        "id": "Numeric topic id",
                        "lang": "Language topic originates from",
                        "swagger_type": "TopicSummary"
                    }
                ],
                "created": "Time the group was created in milliseconds since the epoch",
                "key_photo": [
                    "Group primary photo",
                    {
                        "highres_link": "Link for full sized photo",
                        "base_url": "A base url that can be use to construct a photo url from its components",
                        "id": "Numeric photo ID",
                        "photo_link": "Link for standard sized photo",
                        "type": "Type of photo. One of \"event\" or \"member\"",
                        "thumb_link": "Link for thumbnail sized photo"
                    }
                ],
                "plain_text_description": "Description of the group, in plain text format. Returned when then \"fields\" request parameter value contains \"plain_text_description\"",
                "list_addr": "Optional field returning list address prefix. List mail will be {list_addr}-list@meetup.com. Announce email will be {list_addr}-announce@meetup.com. You must be a member of the group to see this",
                "organizer": [
                    "Group's primary organizer",
                    {
                        "name": "Name of member",
                        "photo": [
                            "Organizer photo, where defined",
                            {
                                "highres_link": "Link for full sized photo",
                                "base_url": "A base url that can be use to construct a photo url from its components",
                                "id": "Numeric photo ID",
                                "photo_link": "Link for standard sized photo",
                                "type": "Type of photo. One of \"event\" or \"member\"",
                                "thumb_link": "Link for thumbnail sized photo"
                            }
                        ],
                        "bio": "Bio of member",
                        "id": "Numeric member ID",
                        "swagger_type": "SimpleMember"
                    }
                ],
                "leads": "Optional field representing the number of members on this group's leadership team. Returned when the \"fields\" request parameter value contains \"leads\"",
                "last_event": [
                    "Optional field representing the last hosted event, if the group has one. Returned when the \"fields\" request parameter value contains \"last_event\"",
                    {
                        "utc_offset": "The local offset from UTC time, in milliseconds",
                        "name": "Name of event",
                        "id": "Alphanumeric event ID",
                        "time": "UTC start time of the event, in milliseconds since the epoch",
                        "swagger_type": "BasicEvent",
                        "yes_rsvp_count": "Number of yes RSVPs"
                    }
                ],
                "name": "Name of the group",
                "member_cap": "Number representing the maximum number of active members this group can have if capped. Returned only when requested in the fields request parameter and the authenticated member has permission to approve members",
                "self": [
                    "Optional field, contains details specific to the authorized user in this Meetup Group",
                    {
                        "visited": "Member's last visit to the group site, in milliseconds since the epoch",
                        "role": "Member's role in group, if any: Organizer, Assistant Organizer, Event Organizer, etc.",
                        "membership_dues": [
                            "Member's membership dues if the group has membership dues",
                            {
                                "paid_until": "For groups with recurring billing periods, this returns the time in milliseconds since the epoch that the member's next payment is due",
                                "total_amount": "Total amount paid",
                                "cancelled": "For groups with recurring billing periods, this Boolean field indicates that membership dues were cancelled",
                                "transaction_time": "Time the transaction was made in milliseconds since the epoch",
                                "exempt": "For groups with recurring billing periods, this Boolean field indicates that the member is exempt from payment.",
                                "trial": [
                                    "If the group offers a trial membership, this indicates information for unpaid members.",
                                    {
                                        "days": "The total number of trial days offered by the group",
                                        "days_remaining": "The number of days remaining in the member's trial period",
                                        "expired": "Boolean indicator of whether or not the unpaid subscription has expired or not"
                                    }
                                ],
                                "period_status": "For groups with recurring billing periods, this returns one of the following values grace paid pending unpaid"
                            }
                        ],
                        "actions": "List of actions the authenticated member may perform, potentially \"broadcast_message\": the ability to broadcast messages to group members via the \"announce\" mailing list, \"event_create\": the ability to create new events, \"event_draft\": the ability to save new events as drafts, \"role_assign\": the ability to assign member roles, \"edit\": the ability to edit group settings, \"member_approval\": the ability to approve or decline member requests to join, or \"subscription_upgrade\": the ability to upgrade this group's subscription plan",
                        "status": "Indicates the authorized user's membership with this group. Value may be one of \"none\", \"pending\", \"pending_payment\", \"active\", or \"blocked\""
                    }
                ],
                "category": [
                    "The primary category of the group, if the group has one",
                    {
                        "name": "Display name of the category",
                        "sort_name": "Name used for sorting",
                        "id": "Numeric category id",
                        "shortname": "String identifier of the category",
                        "swagger_type": "GroupCategory"
                    }
                ],
                "who": "What the group calls its members"
            },
            "tag": "edit",
            "responseModel": "EditGroup"
        },
        "EditGroupEvents": {
            "version": "3",
            "name": "EditGroupEvents",
            "httpMethod": "PATCH",
            "parameters": {
                "urlname": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "id": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "rsvp_limit": {
                    "location": "query",
                    "required": false,
                    "description": "Total number of RSVPs slots available for the event"
                },
                "rsvp_open_time": {
                    "location": "query",
                    "required": false,
                    "description": "Sets the time when members can starting RSVPing to the event.\nThe time should be specified in milliseconds since the epoch, or relative to the current time in the d/w/m format.\nTo remove this RSVP restriction, set this parameter to 0"
                },
                "question": {
                    "location": "query",
                    "required": false,
                    "description": "Sets or edits the RSVP survey question for the event.\nA maximum of 250 characters is permitted"
                },
                "venue_visibility": {
                    "location": "query",
                    "required": false,
                    "description": "Controls the visibility of the event venue for non members of the hosting group. May be one of \"public\" or \"members\""
                },
                "description": {
                    "location": "query",
                    "required": false,
                    "description": "Description of the event, in simple HTML format. This value is translated to HTML to update the description. May not be longer than 50000 characters."
                },
                "rsvp_close_time": {
                    "location": "query",
                    "required": false,
                    "description": "Sets the time when members can no longer RSVP to the event.\nThe time should be specified in milliseconds since the epoch, or relative to the current time in the d/w/m format.\nTo remove this RSVP restriction, set this parameter to 0"
                },
                "lon": {
                    "location": "query",
                    "required": false,
                    "description": "Adjusted venue longitude. Must be accompanied by 'lat' request parameter."
                },
                "how_to_find_us": {
                    "location": "query",
                    "required": false,
                    "description": "The information provided by the event host for \"How will members find you there?\". Visible when location is visible to the authenticated member"
                },
                "announce": {
                    "location": "query",
                    "required": false,
                    "description": "Boolean value indicating whether or not Meetup should announce this event to interested group members"
                },
                "duration": {
                    "location": "query",
                    "required": false,
                    "description": "Event duration in milliseconds. When not specified, a default of 3 hours from the event `time` may be assumed by applications.\nTo clear event duration, set this to 0"
                },
                "event_hosts": {
                    "location": "query",
                    "required": false,
                    "description": "Up to 5 comma-separated valid member ids to be hosts for the event."
                },
                "name": {
                    "location": "query",
                    "required": false,
                    "description": "Display name of the event. May not be longer than 80 characters"
                },
                "guest_limit": {
                    "location": "query",
                    "required": false,
                    "description": "Number of guests members may include in their RSVP, 0 or more. This defaults to 2 when undefined."
                },
                "time": {
                    "location": "query",
                    "required": false,
                    "description": "Event start time in milliseconds since the epoch, or relative to the current time in the d/w/m format.\n\nScheduling Meetup events without a time will result in events in \"proposed\" status"
                },
                "venue_id": {
                    "location": "query",
                    "required": false,
                    "description": "Numeric identifier of a venue"
                },
                "publish_status": {
                    "location": "query",
                    "required": false,
                    "description": "If you are an organizer of the group, you may set this to \"draft\" to save the event as a draft. Doing so will require a status=draft filter on /2/event queries"
                },
                "lat": {
                    "location": "query",
                    "required": false,
                    "description": "Adjusted venue latitude. Must be accompanied by a 'lon' request parameter."
                }
            },
            "summary": "Updates an existing Meetup group event's details",
            "uri": "/{urlname}/events/{id}",
            "notes": "Valid path parameters for __:urlname__ and event __:id__ are required.\n\nEvent descriptions only support a subset of HTML. Please see the [Event Create](/meetup_api/docs/:urlname/events/#createparams) \ndocumentation for more information.\n\nOAuth authenticated applications should request the [event_management](/meetup_api/auth/#event_management_scope) OAuth scope.",
            "response": {
                "utc_offset": "The local offset from UTC time, in milliseconds",
                "comment_count": "An aggregate count of all comments and replies for a given event, returned when fields request parameter value includes 'comment_count'",
                "rsvp_limit": "The number of \"yes\" RSVPS an event has capacity for",
                "venue": [
                    "The event venue, present only if selected and not hidden by an organizer",
                    {
                        "zip": "ZIP code if, venue is in US or Canada",
                        "country": "Country code of venue",
                        "localized_country_name": "The localized name of the venue's country",
                        "city": "City of venue",
                        "address_1": "Line 1 of venue address",
                        "address_2": "Line 2 of venue address",
                        "address_3": "Line 3 of venue address",
                        "lon": "Approximate longitude",
                        "phone": "Phone number of venue",
                        "name": "Venue name",
                        "state": "State of venue where available",
                        "id": "Unique numeric venue id",
                        "repinned": "true if the editor of the event altered the original venues pin location, false otherwise",
                        "lat": "Approximate latitude"
                    }
                ],
                "featured": "Boolean indicator of whether or not a given event is featured, returned when fields request parameter value includes 'featured'",
                "survey_questions": [
                    "List of organizer-defined survey questions intended to be asked of RSVPing members. Returned when the \"fields\"' request parameter contains \"answers\"",
                    {
                        "question": "Question text",
                        "id": "Numeric question identifier"
                    }
                ],
                "venue_visibility": "Represents who can see the venue with a potential value of \"members\" or \"public\", returned when fields request parameter value includes \"venue_visibility\" and the authenticated member is a member of the group hosting the event",
                "manual_attendance_count": "Manually entered total attendee headcount, if any exists",
                "fee": [
                    "Ticketing fee information for events that support payments",
                    {
                        "amount": "Amount of the fee",
                        "accepts": "Acceptable methods of payments may be one of \"paypal\", \"amazon\", \"wepay\", or \"cash\"",
                        "description": "Fee description, typically \"per-person\"",
                        "currency": "Currency accepted for fee",
                        "label": "Label for fee, typically \"Price\"",
                        "required": "Boolean flag indicating if this fee is required to RSVP"
                    }
                ],
                "link": "Link to event on meetup.com",
                "why": "We should do this because...",
                "description": "Description of the event in HTML. Email addresses and phone numbers will be masked for non-members",
                "short_link": "A shortened link for the event on meetup.com, returned when fields request parameter value includes \"short_link\"",
                "yes_rsvp_count": "Number of yes RSVPs including guests",
                "duration": "Scheduled event duration in milliseconds, if an end time is specified by the organizer. When not present, a default of 3 hours may be assumed by applications",
                "event_hosts": [
                    "List of members hosting the event, returned when fields request parameter value includes 'event_hosts'",
                    {
                        "name": "Host member's name",
                        "photo": [
                            "Member photo if one exists",
                            {
                                "highres_link": "Link for full sized photo",
                                "base_url": "A base url that can be use to construct a photo url from its components",
                                "id": "Numeric photo ID",
                                "photo_link": "Link for standard sized photo",
                                "type": "Type of photo. One of \"event\" or \"member\"",
                                "thumb_link": "Link for thumbnail sized photo"
                            }
                        ],
                        "id": "Host member's id"
                    }
                ],
                "simple_html_description": "Description of the event, in simple HTML source format. If this event's description was saved in simple HTML format, the description field will be an HTML translation of this source. Returned when the \"fields\"' request parameter contains \"simple_html_description\"",
                "id": "A unique alphanumeric identifier for event",
                "group": [
                    "Information about group hosting the event",
                    {
                        "photo_gradient": [
                            "Color combination used to generate group duotone, returned when fields request parameter value includes 'group_photo_gradient'",
                            {
                                "dark_color": "Dark color in hexidecimal format",
                                "id": "Unique numeric identifier",
                                "composite_color": "Composite color in hexidecimal format",
                                "light_color": "Light color in hexidecimal format",
                                "swagger_type": "Duotone"
                            }
                        ],
                        "join_info": [
                            "Lists any questions requested when joining and required fields. Returned with \"fields\" request parameter value includes \"group_join_info\"",
                            {
                                "photo_req": "true if required, false otherwise",
                                "questions": [
                                    "List of profile questions organizer would like new members to answer prior to joining",
                                    {
                                        "question": "The text of the question",
                                        "id": "Unique numeric identifier for the question"
                                    }
                                ],
                                "questions_req": "true if required, false otherwise",
                                "swagger_type": "GroupJoinInfo"
                            }
                        ],
                        "visibility": "Group visibility, returned when fields request parameter value includes 'group_visibility'. Value may be \"public\", \"public_limited\", or \"members\".",
                        "topics": [
                            "Topics related to the group, returned when fields request parameter value includes 'group_topics'",
                            {
                                "name": "Display name of the topic",
                                "urlkey": "The unique keyword used to identify this topic",
                                "id": "Numeric topic id",
                                "lang": "Language topic originates from",
                                "swagger_type": "TopicSummary"
                            }
                        ],
                        "key_photo": [
                            "Group primary photo, returned when fields request parameter value includes 'group_key_photo'",
                            {
                                "highres_link": "Link for full sized photo",
                                "base_url": "A base url that can be use to construct a photo url from its components",
                                "id": "Numeric photo ID",
                                "photo_link": "Link for standard sized photo",
                                "type": "Type of photo. One of \"event\" or \"member\"",
                                "thumb_link": "Link for thumbnail sized photo"
                            }
                        ],
                        "photo": [
                            "Photo associated with group, returned when fields request parameter value includes 'group_photo'",
                            {
                                "highres_link": "Link for full sized photo",
                                "base_url": "A base url that can be use to construct a photo url from its components",
                                "id": "Numeric photo ID",
                                "photo_link": "Link for standard sized photo",
                                "type": "Type of photo. One of \"event\" or \"member\"",
                                "thumb_link": "Link for thumbnail sized photo"
                            }
                        ],
                        "lon": "Approximate group longitude",
                        "join_mode": "Indicator of how new members may be able to join. be one of \"open\", \"approval\" or \"closed\"",
                        "name": "Name of the group",
                        "self": [
                            "Information pertaining to the authenticated member with respect to the group, returned when fields request parameter value includes 'group_self_actions', 'group_self_membership_dues', or 'group_self_status'",
                            {
                                "actions": "list of actions the authenticated member may perform, potentially \"event_create\": the ability to create new events, \"event_draft\": the ability to save new events as drafts, \"role_assign\": the ability to assign member roles, \"edit\": the ability to edit group settings, \"member_approval\": the ability to approve or decline member requests to join, or \"subscription_upgrade\": the ability to upgrade this group's subscription plan",
                                "membership_dues": "Membership dues information associated with hosting group, returned when \"fields\" request parameter value includes \"group_membership_dues\" and group has dues",
                                "status": "Indicates the authorized user's membership with this group.\n\nValue may be one of \"none\", \"pending\", \"pending_payment\", \"active\", or \"blocked\""
                            }
                        ],
                        "id": "Numeric identifier for the group",
                        "urlname": "Alphanumeric urlname identifier for the group",
                        "category": [
                            "Category group belongs to, returned when fields request parameter value includes 'group_category'",
                            {
                                "name": "Display name of the category",
                                "sort_name": "Name used for sorting",
                                "id": "Numeric category id",
                                "shortname": "String identifier of the category",
                                "swagger_type": "GroupCategory"
                            }
                        ],
                        "membership_dues": [
                            "Membership dues information associated with hosting group, returned when fields request parameter value includes 'group_membership_dues'",
                            {
                                "refund_policy": [
                                    "Conditions for refunds",
                                    {
                                        "group_closes": "refund applies when the group closes",
                                        "member_leaves": "refund applies when member leaves the group",
                                        "none": "indicates there is no refund policy",
                                        "member_banned": "refund applies when the member is banned",
                                        "custom": "Boolean indicator of a custom refund policy"
                                    }
                                ],
                                "reasons": "Array of reasons containing one or more of the following values compensate_organizer, cover_costs, encourage_engagement, improve_meetups, other, provide_supplies, reserve_fund",
                                "methods": [
                                    "Methods of payments",
                                    {
                                        "credit_card": "Boolean indicator that credit cards are accepted",
                                        "other": "Boolean indicator that other forms of payment are accepted",
                                        "paypal": "Boolean indicator that Paypal payments are accepted",
                                        "amazon_payments": "Boolean indicator that Amazon Payments are accepted"
                                    }
                                ],
                                "fee": "Numeric fee value",
                                "trial_days": "When present, returns the number of days the group is offering a free trial period for to new members. When not present, this indicates that the group does not offer a trial membership period",
                                "self_payment_required": "Returns true if the authorized user is prevented from participating in the group until a payment is made",
                                "required": "true if dues are required",
                                "swagger_type": "MembershipDues",
                                "fee_desc": "The interval at which dues must be paid. Possible values may include: \"month\", \"year\", \"day\", or \"every other day\"",
                                "currency": "Currency in which the fee is declared",
                                "reasons_other": "An additional reason if specified.",
                                "required_to": "If the dues are required this indicates what they are required for. May be one of 'join' or 'rsvp'"
                            }
                        ],
                        "lat": "Approximate group latitude",
                        "who": "What the group calls its members"
                    }
                ],
                "rsvpable_after_join": "Boolean value indicating whether or not the authenticated member can RSVP\nafter joining the hosting group.\nReturned when the \"fields\" request parameter\nincludes \"rsvpable_after_join\"\nand the authenticated member is _not_ a member of the\ngroup hosting this event",
                "rsvp_rules": [
                    "Information about conditions that allow for member RSVPs, returned when fields request parameter value include 'rsvp_rules'",
                    {
                        "refund_policy": [
                            "The organizer-defined terms for refunds. If this is defined, you must provide the authenticated member a way to access this information before they can RSVP. They will need to agree to these terms before they RSVP",
                            {
                                "policies": "list of one or more of the following. 'no_refunds' if the organizer will not issue refunds', 'member_cancellation' if the organizer offers a refund for member cancellation, 'event_cancellation' if the organizer offers a refund if the event is canceled, 'event_rescheduled' if the organizer offers a refund when the event is rescheduled",
                                "days": "if member_cancellation is present, it's relative to this many days before the event",
                                "notes": "additional refund policy notes"
                            }
                        ],
                        "closed": "Boolean value indicating whether or not RSVPing was explicitly closed for the event.",
                        "open_time": "UTC time that members may begin to RSVP",
                        "waitlisting": "Wait list handling when RSVP limit is reached. Value may be one of 'auto', 'manual' or 'off'",
                        "guest_limit": "Number of guests members may include in their RSVP, 0 or more",
                        "close_time": "UTC time that RSVPs will no longer be accepted, though organizers may close RSVPs earlier"
                    }
                ],
                "visibility": "Event visibility: \"public\", \"public_limited\", or \"members\". Events in private groups that do not expose limited information are visible only to that group's members and should not be made public.",
                "waitlist_count": "Number of members on the waitlist, if one exists",
                "created": "Creation time of the event, in milliseconds since the epoch",
                "plain_text_description": "Plain text version of the event description. Email addresses and photo numbers will be masked for non-members. Returned when \"fields\" request parameter value contains \"plain_text_description\"",
                "how_to_find_us": "Additional information on how to find members at a venue when provided by an organizer, returned when fields request parameter value includes 'how_to_find_us'",
                "swagger_type": "EventSummary",
                "photo_album": [
                    "Information about photo uploads for this event, returned when fields request parameter value includes 'photo_album'",
                    {
                        "photo_count": "Number of photos uploaded",
                        "photo_sample": [
                            "A small collection of photos uploaded for this event",
                            {
                                "highres_link": "Link for full sized photo",
                                "base_url": "A base url that can be use to construct a photo url from its components",
                                "id": "Numeric photo ID",
                                "photo_link": "Link for standard sized photo",
                                "type": "Type of photo. One of \"event\" or \"member\"",
                                "thumb_link": "Link for thumbnail sized photo"
                            }
                        ],
                        "id": "Unique numeric identifier for photo album",
                        "event": [
                            "Event photo album belongs to. This will be absent if the album\nis not associated with an event",
                            {
                                "utc_offset": "The local offset from UTC time, in milliseconds",
                                "name": "Name of event",
                                "id": "Alphanumeric event ID",
                                "time": "UTC start time of the event, in milliseconds since the epoch",
                                "swagger_type": "BasicEvent",
                                "yes_rsvp_count": "Number of yes RSVPs"
                            }
                        ],
                        "title": "Album title",
                        "swagger_type": "PhotoAlbumSummary"
                    }
                ],
                "rsvpable": "Boolean value indicating whether or not the authenticated member can RSVP or join the waitlist when the event is full.\nReturned when the \"fields\" request parameter value\nincludes \"rsvpable\"",
                "rsvp_sample": [
                    "A small collection RSVPs for members attending this event, returned when fields request parameter value includes 'rsvp_sample'",
                    {
                        "member": [
                            "Member who RSVP'd",
                            {
                                "role": "The leadership role of this member within the group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
                                "name": "Name of member",
                                "photo": [
                                    "Member photo, if available.\nMembers who registered via Facebook may not have highres photos",
                                    {
                                        "highres_link": "Link for full sized photo",
                                        "base_url": "A base url that can be use to construct a photo url from its components",
                                        "id": "Numeric photo ID",
                                        "photo_link": "Link for standard sized photo",
                                        "type": "Type of photo. One of \"event\" or \"member\"",
                                        "thumb_link": "Link for thumbnail sized photo"
                                    }
                                ],
                                "self": [
                                    "Represents the authenticated member's relation to member.\nReturned with the \"fields\" request parameter includes \"self\" and\nthe target member is not the authenticated member",
                                    {
                                        "common": [
                                            "Information the authenticated member has in common with this member",
                                            {
                                                "groups": [
                                                    "List of common groups",
                                                    {
                                                        "join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
                                                        "photo_gradient": [
                                                            "Color combination used generate group duotone",
                                                            {
                                                                "dark_color": "Dark color in hexidecimal format",
                                                                "id": "Unique numeric identifier",
                                                                "composite_color": "Composite color in hexidecimal format",
                                                                "light_color": "Light color in hexidecimal format",
                                                                "swagger_type": "Duotone"
                                                            }
                                                        ],
                                                        "name": "Name of the group",
                                                        "key_photo": [
                                                            "Group primary photo",
                                                            {
                                                                "highres_link": "Link for full sized photo",
                                                                "base_url": "A base url that can be use to construct a photo url from its components",
                                                                "id": "Numeric photo ID",
                                                                "photo_link": "Link for standard sized photo",
                                                                "type": "Type of photo. One of \"event\" or \"member\"",
                                                                "thumb_link": "Link for thumbnail sized photo"
                                                            }
                                                        ],
                                                        "id": "Numeric group ID",
                                                        "urlname": "Urlname used to identify the group on meetup.com",
                                                        "group_photo": [
                                                            "Group photo",
                                                            {
                                                                "highres_link": "Link for full sized photo",
                                                                "base_url": "A base url that can be use to construct a photo url from its components",
                                                                "id": "Numeric photo ID",
                                                                "photo_link": "Link for standard sized photo",
                                                                "type": "Type of photo. One of \"event\" or \"member\"",
                                                                "thumb_link": "Link for thumbnail sized photo"
                                                            }
                                                        ],
                                                        "swagger_type": "GroupSummary",
                                                        "who": "What the group calls its members"
                                                    }
                                                ]
                                            }
                                        ],
                                        "actions": "List of actions available for the authenticated member to perform.\nCurrently only \"message\" is supported",
                                        "blocks": "Boolean indication of whether or not the authenticated member blocks this member",
                                        "friends": "Boolean indication of whether or not the authenticated member is a friend of the member",
                                        "swagger_type": "MemberSelf"
                                    }
                                ],
                                "bio": "Intro of member",
                                "id": "Numeric member ID",
                                "title": "Organizer defined title of member. May be absent if not defined",
                                "event_context": [
                                    "Member's context within the event. Only returned in the context of an event",
                                    {
                                        "host": "Boolean indicator for whether this member is a host for the event"
                                    }
                                ],
                                "swagger_type": "AttendanceSummary"
                            }
                        ],
                        "id": "Unique numeric identifier for the RSVP. May be -1 for events scheduled in the future",
                        "updated": "Last modified time of the RSVP, in milliseconds since the epoch",
                        "swagger_type": "RSVPSummary",
                        "created": "Creation time of the RSVP, in milliseconds since the epoch"
                    }
                ],
                "series": [
                    "Returned when the \"fields\" request parameter value includes \"series\" for events that are part of a series of events",
                    {
                        "end_date": "Date when this series ends/ended, in milliseconds since the epoch",
                        "description": "Human displayable description of how often events in this series occur",
                        "id": "Unique numeric identifier for the series",
                        "swagger_type": "RecurrenceSchedule",
                        "weekly": [
                            "Returned for events that are part of a weekly recurring series of events",
                            {
                                "days_of_week": "List of integers 1-7 (Monday-Sunday) of days of week recurrence occurs upon",
                                "end_date": "Date when series ends/ended, in LocalDate (yyyy-MM-dd) format",
                                "interval": "Integer number of weeks between each recurrence"
                            }
                        ],
                        "start_date": "Date when this series begins/began, in milliseconds since the epoch"
                    }
                ],
                "name": "Name of the event",
                "self": [
                    "represents details particular to the authorized user, only present if requested and authenticated member is a member of the hosting group, returned when fields request parameter value includes 'self'",
                    {
                        "pay_status": "The authenticated member's payment status. This may be one of 'none', 'paid', 'partially_paid', 'payment_pending', 'echeck_pending', 'refund_pending', 'partially_refunded', 'refunded'",
                        "role": "The authenticated member's role in within the group, if any. This may be one of: Organizer, Assistant Organizer, Event Organizer, etc.",
                        "actions": "List of actions the authenticated member may perform, potentially one or more of the following\n\n\"announce\" to announce the event to the group's members\n\n\"attendance\" to view or take attendance for the event\n\n\"comment\" the ability to post a comment or reply\n\n\"payments\" the ability to mark members as paid if the event is ticketed\n\n\"publish\" to publish a draft event\n\n\"edit\" to edit the event information\n\n\"edit_hosts\" to edit the hosts for the event\n\n\"delete\" to delete the event\n\n\"rsvp\" to RSVP yes or no to the event\n\n\"wait\" to get on the waiting list (using the same RSVP methods).\n\n\"dues\" if an organizer requires membership dues to RSVP and the authorized\n member has not paid theirs\n\n\"upload_photo\" the ability to upload a photo for an event",
                        "rsvp": [
                            "Member's RSVP, if any",
                            {
                                "answers": [
                                    "List of answers to event survey questions asked when the member RSVP'd in the order asked, only available to organizers and assistant organizers",
                                    {
                                        "question": "Question text",
                                        "answer": "Answer text for question",
                                        "updated": "The last time this answer was updated",
                                        "question_id": "Unique number identifier for question",
                                        "swagger_type": "SurveyQuestionAnswer"
                                    }
                                ],
                                "guests": "Number of guests the RSVP'd member will be bringing",
                                "response": "May be \"yes\" or \"no\".\n\nIn cases where an event is over capacity and the member has shown an intent to attend,\nresponse may be \"waitlist\" if the event has a waitlist.\n\nIn cases of ticketed events, this may be \"yes_pending_payment\"\nfor a \"yes\" response for a ticketed event with an unprocessed payment"
                            }
                        ],
                        "swagger_type": "EventSelf"
                    }
                ],
                "time": "UTC start time of the event, in milliseconds since the epoch",
                "updated": "Last modified time for the event in milliseconds since the epoch",
                "status": "\"cancelled\", \"upcoming\", \"past\", \"proposed\", \"suggested\", or \"draft\""
            },
            "tag": "edit",
            "responseModel": "EditGroupEvents"
        },
        "EditGroupEventsAttendance": {
            "version": "3",
            "name": "EditGroupEventsAttendance",
            "httpMethod": "POST",
            "parameters": {
                "urlname": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "id": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "guests": {
                    "location": "query",
                    "required": false,
                    "description": "The number of guests accompanying member. Maximum of 99 is allowed. When providing multiple values in the `member` field, this value is ignored"
                },
                "headcount": {
                    "location": "query",
                    "required": false,
                    "description": "Sets the overall headcount for the event. This may not necessarily correlate with the list of attendees in this group if the event is part of a joint Meetup event. When providing multiple values in the `member` field, this value is ignored"
                },
                "member": {
                    "location": "query",
                    "required": false,
                    "description": "A comma-delimited list of valid ids associated with members RSVP'd to the event"
                },
                "status": {
                    "location": "query",
                    "required": false,
                    "description": "An attendance status for the provided members. Must be one of: noshow, absent, attended"
                }
            },
            "summary": "Takes member attendance for an event. Limited for use by administrative members.",
            "uri": "/{urlname}/events/{id}/attendance",
            "notes": "The :urlname path element may be any valid group urlname or domain name. The :id path element must be a valid alphanumeric Meetup event identifier. Highlighted fields are required.",
            "response": null,
            "tag": "edit",
            "responseModel": "EditGroupEventsAttendance"
        },
        "EditGroupEventsPayments": {
            "version": "3",
            "name": "EditGroupEventsPayments",
            "httpMethod": "POST",
            "parameters": {
                "urlname": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "id": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "amount": {
                    "location": "query",
                    "required": false,
                    "description": "The monetary amount of money the member submitted"
                },
                "quantity": {
                    "location": "query",
                    "required": false,
                    "description": "The number of payments made. Defaults to 1"
                },
                "member": {
                    "location": "query",
                    "required": false,
                    "description": "Member Id of member who made a payment"
                },
                "paid_on": {
                    "location": "query",
                    "required": false,
                    "description": "The time the payment was made in milliseconds from the epoc. Defaults to now"
                }
            },
            "summary": "Allows organizers of a group to note payments made by members for an event. This is the 'Mark Paid' feature seen in the RSVP listings on event details pages and affects the 'pay_status' response fields in [2/rsvps](/meetup_api/docs/2/rsvps/#response) for paid events",
            "uri": "/{urlname}/events/{id}/payments",
            "notes": "Only organizer may submit payment information for members and only one payment may be submitted for a member for a given event",
            "response": {
                "confirm_code": "Confirmation code for the payment",
                "id": "Unique identifier for the payment"
            },
            "tag": null,
            "responseModel": "EditGroupEventsPayments"
        },
        "EditGroupEventsPhotos": {
            "version": "3",
            "name": "EditGroupEventsPhotos",
            "httpMethod": "PATCH",
            "parameters": {
                "urlname": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "event_id": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "photo_id": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "fields": {
                    "location": "query",
                    "required": false,
                    "description": "A comma-delimited list of optional response fields.\nCurrently supported values are\n\"comment_count\", \"self\" and \"short_link\""
                },
                "caption": {
                    "location": "query",
                    "required": false,
                    "description": "The photo caption. May be up to 255 characters. To remove a caption, just send an empty value"
                }
            },
            "summary": "Edits photo details",
            "uri": "/{urlname}/events/{event_id}/photos/{photo_id}",
            "notes": "A valid path parameter value for\n__:urlname__ and __:event_id__, and __:photo_id__\nis required\n\nOAuth authenticated applications should\nrequest the [group_content_edit](/meetup_api/auth/#group_content_edit_scope)\npermission scope\n\nOnly the member that uploaded the photo, the organizer, or the co-organizers may edit the photo details",
            "response": {
                "utc_offset": "Numeric utc offset based on the timezone of the group\nhosting the event this photo was posted in",
                "comment_count": "The number of comments posted about this photo.\nReturned when 'comment_count' is present\nin the 'fields' request parameter.",
                "highres_link": "Link for full sized photo",
                "created": "Time photo was uploaded, in milliseconds since the epoch",
                "base_url": "A base url that can be use to construct a photo url from its components",
                "link": "Link to photo on meetup.com",
                "caption": "Photo caption, if defined",
                "type": "Type of photo. One of \"event\" or \"member\"",
                "thumb_link": "Link for thumbnail sized photo",
                "short_link": "Shortened link to photo on meetup.com. Returned when 'short_link'\nis present in the 'fields' request parameter",
                "swagger_type": "EventPhoto",
                "photo_album": [
                    "Photo album the photo is associated with",
                    {
                        "photo_count": "Number of photos uploaded",
                        "id": "Unique numeric identifier for photo album",
                        "event": [
                            "Event photo album belongs to. This will be absent if the album\nis not associated with an event",
                            {
                                "utc_offset": "The local offset from UTC time, in milliseconds",
                                "name": "Name of event",
                                "id": "Alphanumeric event ID",
                                "time": "UTC start time of the event, in milliseconds since the epoch",
                                "swagger_type": "BasicEvent",
                                "yes_rsvp_count": "Number of yes RSVPs"
                            }
                        ],
                        "title": "Album title",
                        "swagger_type": "EventPhotoSummary"
                    }
                ],
                "member": [
                    "Member who uploaded the photo. If member has since left the group,\nthis will return a member with an id of 0",
                    {
                        "role": "The leadership role of this member within the group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
                        "name": "Name of member",
                        "photo": [
                            "Member photo, if available.\nMembers who registered via Facebook may not have highres photos",
                            {
                                "highres_link": "Link for full sized photo",
                                "base_url": "A base url that can be use to construct a photo url from its components",
                                "id": "Numeric photo ID",
                                "photo_link": "Link for standard sized photo",
                                "type": "Type of photo. One of \"event\" or \"member\"",
                                "thumb_link": "Link for thumbnail sized photo"
                            }
                        ],
                        "bio": "Intro of member",
                        "id": "Numeric member ID",
                        "title": "Organizer defined title of member. May be absent if not defined",
                        "event_context": [
                            "Member's context within the event. Only returned in the context of an event",
                            {
                                "host": "Boolean indicator for whether this member is a host for the event"
                            }
                        ],
                        "swagger_type": "AttendanceSummary"
                    }
                ],
                "self": [
                    "Context for the authenticated member.\nReturned when 'self' is present\nin the 'fields' request parameter and the authenticated\nis a member of the group the photo is associated with.",
                    {
                        "actions": "List of actions the authenticated member may perform on this photo\nor its containing album, potentially one or more of the following\n\n\"comment\" if member can comment on this photo\n\n\"delete\" if the member can delete the photo\n\n\"edit\" if the member can edit the photo details\n\n\"upload_photo\" if the member can upload new photos"
                    }
                ],
                "id": "Numeric photo ID",
                "photo_link": "Link for standard sized photo",
                "updated": "Time photo was last updated, in milliseconds since the epoch",
                "group": [
                    "Group the photo is associated with.\" +\n          \"|Returned when 'group' is present \" +\n          \"|in the 'fields' request parameter.",
                    {
                        "join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
                        "photo_gradient": [
                            "Color combination used generate group duotone",
                            {
                                "dark_color": "Dark color in hexidecimal format",
                                "id": "Unique numeric identifier",
                                "composite_color": "Composite color in hexidecimal format",
                                "light_color": "Light color in hexidecimal format",
                                "swagger_type": "Duotone"
                            }
                        ],
                        "name": "Name of the group",
                        "key_photo": [
                            "Group primary photo",
                            {
                                "highres_link": "Link for full sized photo",
                                "base_url": "A base url that can be use to construct a photo url from its components",
                                "id": "Numeric photo ID",
                                "photo_link": "Link for standard sized photo",
                                "type": "Type of photo. One of \"event\" or \"member\"",
                                "thumb_link": "Link for thumbnail sized photo"
                            }
                        ],
                        "id": "Numeric group ID",
                        "urlname": "Urlname used to identify the group on meetup.com",
                        "group_photo": [
                            "Group photo",
                            {
                                "highres_link": "Link for full sized photo",
                                "base_url": "A base url that can be use to construct a photo url from its components",
                                "id": "Numeric photo ID",
                                "photo_link": "Link for standard sized photo",
                                "type": "Type of photo. One of \"event\" or \"member\"",
                                "thumb_link": "Link for thumbnail sized photo"
                            }
                        ],
                        "swagger_type": "GroupSummary",
                        "who": "What the group calls its members"
                    }
                ]
            },
            "tag": "edit",
            "responseModel": "EditGroupEventsPhotos"
        },
        "EditGroupMembers": {
            "version": "3",
            "name": "EditGroupMembers",
            "httpMethod": "PATCH",
            "parameters": {
                "urlname": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "member_id": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "add_role": {
                    "location": "query",
                    "required": false,
                    "description": "Allows those with permission to assign one of the following roles:\n\"assistant_organizer\", \"coorganizer\", or \"event_organizer\""
                },
                "photo_id": {
                    "location": "query",
                    "required": false,
                    "description": "Numeric id of the photo to use for this profile. Send a value of 0 to unset the current photo"
                },
                "intro": {
                    "location": "query",
                    "required": false,
                    "description": "Provides a Member an opportunity to tell the group about themselves,\nin at most 255 characters"
                },
                "fields": {
                    "location": "query",
                    "required": false,
                    "description": "A comma-delimited string of optional response field names.\nThis may include birthday, gender, groups, privacy, self and topics"
                },
                "title": {
                    "location": "query",
                    "required": false,
                    "description": "An organizer-defined title,\nin at most 255 characters"
                },
                "remove_role": {
                    "location": "query",
                    "required": false,
                    "description": "Allows those with permission to remove one of the following roles:\n\"assistant_organizer\", \"coorganizer\", or \"event_organizer\""
                },
                "answer_{qid}": {
                    "location": "query",
                    "required": false,
                    "description": "Answers to questions from group's API join_info question fields.\n\nThe name of these parameters must contain a suffix of _ + the numeric\nquestion id from the Meetup group's join info question list\n\nAnswers may not be longer than 1000\ncharacters in length"
                }
            },
            "summary": "Edits Group Profiles.\nTo fetch Group Member Profiles,\nsee [this endpoint](/meetup_api/docs/:urlname/members/:member_id#get)",
            "uri": "/{urlname}/members/{member_id}",
            "notes": "A valid path parameter for :urlname and :member_id is required. A value of \"self\"\nmay be used in place of a numeric identifier to represent the authenticated\nMember's id.\n\nOAuth authenticated applications should\nrequest the [profile_edit](/meetup_api/auth/#profile_edit_scope)\npermission scope\n\nOnly organizers of the Meetup group may edit the member's __title__ and __role__ within the group.\n\nAll other fields are restricted to the owner of the group profile.\n\nSome Meetup group organizers may define a set of profile questions\nthey'd like their members to answer. You can obtain that question\nlist using the [Get Group](/meetup_api/docs/:urlname/#get) by sending\n a \"fields\" request parameter containing\n\"join_info\"",
            "response": {
                "birthday": [
                    "Returned only when the fields request parameter value includes 'birthday'\nand only for the authenticated member when defined",
                    {
                        "month": "Numeric month member was born. May be absent if not defined",
                        "year": "Year member was born",
                        "day": "Numeric day member was born. May be absent if not defined"
                    }
                ],
                "country": "Country code associated with Member's location",
                "gender": "Returned only when the fields request parameter value includes \"gender\"\nand only for the authenticated member.\nValue may be one of \"female\", \"male\", \"none\", or \"other\".\nThis field may be absent where gender is not defined",
                "city": "City associated with Member's location",
                "bio": "Member bio. When profile does not belong to the authenticated member, this may be omitted if member opted to hide their bio from others",
                "privacy": [
                    "Member's privacy preferences\nReturned only when the \"fields\" request parameter value includes \"privacy\"",
                    {
                        "groups": "may be 'hidden' or 'visible",
                        "bio": "may be 'hidden' or 'visible'",
                        "topics": "may be 'hidden' or 'visible'",
                        "swagger_type": "MemberPrivacy",
                        "facebook": "may be 'hidden' of 'visible'.\nIf absent, the member has not connected their Facebook account to Meetup"
                    }
                ],
                "lon": "Geographic longitude associated with Member's location",
                "memberships": [
                    "Group memberships affiliated with this member.\nReturned only when fields request parameter value includes \"memberships\".\nThis list may be omitted if the member has opted to hide their groups from others.",
                    {
                        "member": [
                            "Memberships where member holds a basic membership",
                            {
                                "role": "The leadership role of this member within the Group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
                                "created": "The time this member joined the Group, represented as milliseconds since the epoch",
                                "visited": "The last time this member visited the Group, represented as milliseconds since the epoch",
                                "title": "Organizer defined title of member. May be absent if not defined",
                                "updated": "The last time this member edited their Group profile, represented as milliseconds since the epoch",
                                "swagger_type": "GroupProfileListEntry",
                                "status": "Membership status in this Group.\nValue may be one of\nactive, blocked, pending, pending_payment or none",
                                "group": [
                                    "The group associated with this membership",
                                    {
                                        "join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
                                        "photo_gradient": [
                                            "Color combination used generate group duotone",
                                            {
                                                "dark_color": "Dark color in hexidecimal format",
                                                "id": "Unique numeric identifier",
                                                "composite_color": "Composite color in hexidecimal format",
                                                "light_color": "Light color in hexidecimal format",
                                                "swagger_type": "Duotone"
                                            }
                                        ],
                                        "name": "Name of the group",
                                        "key_photo": [
                                            "Group primary photo",
                                            {
                                                "highres_link": "Link for full sized photo",
                                                "base_url": "A base url that can be use to construct a photo url from its components",
                                                "id": "Numeric photo ID",
                                                "photo_link": "Link for standard sized photo",
                                                "type": "Type of photo. One of \"event\" or \"member\"",
                                                "thumb_link": "Link for thumbnail sized photo"
                                            }
                                        ],
                                        "id": "Numeric group ID",
                                        "urlname": "Urlname used to identify the group on meetup.com",
                                        "group_photo": [
                                            "Group photo",
                                            {
                                                "highres_link": "Link for full sized photo",
                                                "base_url": "A base url that can be use to construct a photo url from its components",
                                                "id": "Numeric photo ID",
                                                "photo_link": "Link for standard sized photo",
                                                "type": "Type of photo. One of \"event\" or \"member\"",
                                                "thumb_link": "Link for thumbnail sized photo"
                                            }
                                        ],
                                        "swagger_type": "GroupSummary",
                                        "who": "What the group calls its members"
                                    }
                                ]
                            }
                        ],
                        "organizer": [
                            "Memberships where member is on the group's lead team",
                            {
                                "role": "The leadership role of this member within the Group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
                                "created": "The time this member joined the Group, represented as milliseconds since the epoch",
                                "visited": "The last time this member visited the Group, represented as milliseconds since the epoch",
                                "title": "Organizer defined title of member. May be absent if not defined",
                                "updated": "The last time this member edited their Group profile, represented as milliseconds since the epoch",
                                "swagger_type": "GroupProfileListEntry",
                                "status": "Membership status in this Group.\nValue may be one of\nactive, blocked, pending, pending_payment or none",
                                "group": [
                                    "The group associated with this membership",
                                    {
                                        "join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
                                        "photo_gradient": [
                                            "Color combination used generate group duotone",
                                            {
                                                "dark_color": "Dark color in hexidecimal format",
                                                "id": "Unique numeric identifier",
                                                "composite_color": "Composite color in hexidecimal format",
                                                "light_color": "Light color in hexidecimal format",
                                                "swagger_type": "Duotone"
                                            }
                                        ],
                                        "name": "Name of the group",
                                        "key_photo": [
                                            "Group primary photo",
                                            {
                                                "highres_link": "Link for full sized photo",
                                                "base_url": "A base url that can be use to construct a photo url from its components",
                                                "id": "Numeric photo ID",
                                                "photo_link": "Link for standard sized photo",
                                                "type": "Type of photo. One of \"event\" or \"member\"",
                                                "thumb_link": "Link for thumbnail sized photo"
                                            }
                                        ],
                                        "id": "Numeric group ID",
                                        "urlname": "Urlname used to identify the group on meetup.com",
                                        "group_photo": [
                                            "Group photo",
                                            {
                                                "highres_link": "Link for full sized photo",
                                                "base_url": "A base url that can be use to construct a photo url from its components",
                                                "id": "Numeric photo ID",
                                                "photo_link": "Link for standard sized photo",
                                                "type": "Type of photo. One of \"event\" or \"member\"",
                                                "thumb_link": "Link for thumbnail sized photo"
                                            }
                                        ],
                                        "swagger_type": "GroupSummary",
                                        "who": "What the group calls its members"
                                    }
                                ]
                            }
                        ]
                    }
                ],
                "other_services": [
                    "An object whose key's are the names of associated external\nnetworks and values are identities within those networks.\nThe keys may be one of facebook, flickr, linkedin, tumblr or twitter.\nReturned only when \"fields\" request parameter value\nincludes \"other_services\"",
                    {
                        "identifier": "A unique string identifier",
                        "url": "A url for this identity. May be the same as identifier in some cases",
                        "swagger_type": "SocialNetwork"
                    }
                ],
                "stats": [
                    "High level numeric member statistics\nReturned only when fields request parameter value includes 'stats'",
                    {
                        "groups": "Number of Meetup Group memberships.\nMay be 0 if member chose to hide their groups from others",
                        "rsvps": "Number of RSVPs.\nMay be 0 if member chose to hide their groups from others",
                        "topics": "Number of Meetup topics member is interested in.\nMay be 0 if member chose to hide their topics from others"
                    }
                ],
                "state": "State associated with Member's location, where available",
                "id": "Unique numeric identifier for the member",
                "lat": "Geographic latitude associated with Member's location",
                "next_event": [
                    "Optional field representing either the current ongoing or next RSVP'd Meetup, where available.\nReturned when the \"fields\"\nrequest parameter value contains \"next_event\"\nonly for the profile of the authenticated member",
                    {
                        "utc_offset": "The local offset from UTC time, in milliseconds",
                        "rsvp_limit": "The number of \"yes\" RSVPS an event has capacity for",
                        "venue": [
                            "The event venue, present only if selected and not hidden by an organizer",
                            {
                                "zip": "ZIP code if, venue is in US or Canada",
                                "country": "Country code of venue",
                                "localized_country_name": "The localized name of the venue's country",
                                "city": "City of venue",
                                "address_1": "Line 1 of venue address",
                                "address_2": "Line 2 of venue address",
                                "address_3": "Line 3 of venue address",
                                "lon": "Approximate longitude",
                                "phone": "Phone number of venue",
                                "name": "Venue name",
                                "state": "State of venue where available",
                                "id": "Unique numeric venue id",
                                "repinned": "true if the editor of the event altered the original venues pin location, false otherwise",
                                "lat": "Approximate latitude"
                            }
                        ],
                        "survey_questions": [
                            "Contains a list of organizer-defined survey questions intended to be asked of RSVPing members.\nReturned when the \"fields\" request parameter\ncontains \"survey_questions\"",
                            {
                                "question": "Question text",
                                "id": "Numeric question identifier"
                            }
                        ],
                        "waitlist_count": "Number of members on the waitlist, if one exists",
                        "created": "Creation time of the event, in milliseconds since the epoch",
                        "fee": [
                            "Ticketing fee information for events that support payments",
                            {
                                "amount": "Amount of the fee",
                                "accepts": "Acceptable methods of payments may be one of \"paypal\", \"amazon\", \"wepay\", or \"cash\"",
                                "description": "Fee description, typically \"per-person\"",
                                "currency": "Currency accepted for fee",
                                "label": "Label for fee, typically \"Price\"",
                                "required": "Boolean flag indicating if this fee is required to RSVP"
                            }
                        ],
                        "swagger_type": "EventSummary",
                        "yes_rsvp_count": "Number of yes RSVPs including guests",
                        "duration": "Scheduled event duration in milliseconds, if an end time is specified by the organizer. When not present, a default of 3 hours may be assumed by applications",
                        "photo_album": [
                            "Information about photo uploads for this event",
                            {
                                "photo_count": "Number of photos uploaded",
                                "photo_sample": [
                                    "A small collection of photos uploaded for this event",
                                    {
                                        "highres_link": "Link for full sized photo",
                                        "base_url": "A base url that can be use to construct a photo url from its components",
                                        "id": "Numeric photo ID",
                                        "photo_link": "Link for standard sized photo",
                                        "type": "Type of photo. One of \"event\" or \"member\"",
                                        "thumb_link": "Link for thumbnail sized photo"
                                    }
                                ],
                                "id": "Unique numeric identifier for photo album",
                                "event": [
                                    "Event photo album belongs to. This will be absent if the album\nis not associated with an event",
                                    {
                                        "utc_offset": "The local offset from UTC time, in milliseconds",
                                        "name": "Name of event",
                                        "id": "Alphanumeric event ID",
                                        "time": "UTC start time of the event, in milliseconds since the epoch",
                                        "swagger_type": "BasicEvent",
                                        "yes_rsvp_count": "Number of yes RSVPs"
                                    }
                                ],
                                "title": "Album title",
                                "swagger_type": "PhotoAlbumSummary"
                            }
                        ],
                        "rsvp_sample": [
                            "A small collection RSVPs for members attending this event, returned when the \"fields\" request parameter value includes \"rsvp_sample\"",
                            {
                                "member": [
                                    "Member who RSVP'd",
                                    {
                                        "role": "The leadership role of this member within the group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
                                        "name": "Name of member",
                                        "photo": [
                                            "Member photo, if available.\nMembers who registered via Facebook may not have highres photos",
                                            {
                                                "highres_link": "Link for full sized photo",
                                                "base_url": "A base url that can be use to construct a photo url from its components",
                                                "id": "Numeric photo ID",
                                                "photo_link": "Link for standard sized photo",
                                                "type": "Type of photo. One of \"event\" or \"member\"",
                                                "thumb_link": "Link for thumbnail sized photo"
                                            }
                                        ],
                                        "self": [
                                            "Represents the authenticated member's relation to member.\nReturned with the \"fields\" request parameter includes \"self\" and\nthe target member is not the authenticated member",
                                            {
                                                "common": [
                                                    "Information the authenticated member has in common with this member",
                                                    {
                                                        "groups": [
                                                            "List of common groups",
                                                            {
                                                                "join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
                                                                "photo_gradient": [
                                                                    "Color combination used generate group duotone",
                                                                    {
                                                                        "dark_color": "Dark color in hexidecimal format",
                                                                        "id": "Unique numeric identifier",
                                                                        "composite_color": "Composite color in hexidecimal format",
                                                                        "light_color": "Light color in hexidecimal format",
                                                                        "swagger_type": "Duotone"
                                                                    }
                                                                ],
                                                                "name": "Name of the group",
                                                                "key_photo": [
                                                                    "Group primary photo",
                                                                    {
                                                                        "highres_link": "Link for full sized photo",
                                                                        "base_url": "A base url that can be use to construct a photo url from its components",
                                                                        "id": "Numeric photo ID",
                                                                        "photo_link": "Link for standard sized photo",
                                                                        "type": "Type of photo. One of \"event\" or \"member\"",
                                                                        "thumb_link": "Link for thumbnail sized photo"
                                                                    }
                                                                ],
                                                                "id": "Numeric group ID",
                                                                "urlname": "Urlname used to identify the group on meetup.com",
                                                                "group_photo": [
                                                                    "Group photo",
                                                                    {
                                                                        "highres_link": "Link for full sized photo",
                                                                        "base_url": "A base url that can be use to construct a photo url from its components",
                                                                        "id": "Numeric photo ID",
                                                                        "photo_link": "Link for standard sized photo",
                                                                        "type": "Type of photo. One of \"event\" or \"member\"",
                                                                        "thumb_link": "Link for thumbnail sized photo"
                                                                    }
                                                                ],
                                                                "swagger_type": "GroupSummary",
                                                                "who": "What the group calls its members"
                                                            }
                                                        ]
                                                    }
                                                ],
                                                "actions": "List of actions available for the authenticated member to perform.\nCurrently only \"message\" is supported",
                                                "blocks": "Boolean indication of whether or not the authenticated member blocks this member",
                                                "friends": "Boolean indication of whether or not the authenticated member is a friend of the member",
                                                "swagger_type": "MemberSelf"
                                            }
                                        ],
                                        "bio": "Intro of member",
                                        "id": "Numeric member ID",
                                        "title": "Organizer defined title of member. May be absent if not defined",
                                        "event_context": [
                                            "Member's context within the event. Only returned in the context of an event",
                                            {
                                                "host": "Boolean indicator for whether this member is a host for the event"
                                            }
                                        ],
                                        "swagger_type": "AttendanceSummary"
                                    }
                                ],
                                "id": "Unique numeric identifier for the RSVP. May be -1 for events scheduled in the future",
                                "updated": "Last modified time of the RSVP, in milliseconds since the epoch",
                                "swagger_type": "RSVPSummary",
                                "created": "Creation time of the RSVP, in milliseconds since the epoch"
                            }
                        ],
                        "series": [
                            "Returned when the \"fields\" request parameter value includes \"series\" for events that are part of a series of events",
                            {
                                "end_date": "Date when this series ends/ended, in milliseconds since the epoch",
                                "description": "Human displayable description of how often events in this series occur",
                                "id": "Unique numeric identifier for the series",
                                "swagger_type": "RecurrenceSchedule",
                                "weekly": [
                                    "Returned for events that are part of a weekly recurring series of events",
                                    {
                                        "days_of_week": "List of integers 1-7 (Monday-Sunday) of days of week recurrence occurs upon",
                                        "end_date": "Date when series ends/ended, in LocalDate (yyyy-MM-dd) format",
                                        "interval": "Integer number of weeks between each recurrence"
                                    }
                                ],
                                "start_date": "Date when this series begins/began, in milliseconds since the epoch"
                            }
                        ],
                        "name": "Name of the event",
                        "id": "A unique alphanumeric identifier for event",
                        "time": "UTC start time of the event, in milliseconds since the epoch",
                        "updated": "Last modified time for the event in milliseconds since the epoch",
                        "group": [
                            "Group hosting the event",
                            {
                                "join_mode": "Indicator of how new members may be able to join. be one of \"open\", \"approval\" or \"closed\"",
                                "name": "Name of the group",
                                "lon": "Approximate group longitude",
                                "id": "Numeric identifier for the group",
                                "urlname": "Alphanumeric urlname identifier for the group",
                                "lat": "Approximate group latitude",
                                "who": "What the group calls its members"
                            }
                        ]
                    }
                ],
                "localized_country_name": "Name of country associated with Member's location",
                "topics": [
                    "List of Meetup topics Member has interest in.\nReturned only when fields request parameter value includes \"topics\".\nThis list may be omitted when member has opted to hide the topics from others.",
                    {
                        "name": "Display name of the topic",
                        "urlkey": "The unique keyword used to identify this topic",
                        "id": "Numeric topic id",
                        "lang": "Language topic originates from",
                        "swagger_type": "TopicSummary"
                    }
                ],
                "joined": "Time member joined, represented as milliseconds since the epoch",
                "photo": [
                    "Member photo. May be absent if member has not chosen one.\nIn group contexts, the Member's Group profile photo will be returned.",
                    {
                        "highres_link": "Link for full sized photo",
                        "base_url": "A base url that can be use to construct a photo url from its components",
                        "id": "Numeric photo ID",
                        "photo_link": "Link for standard sized photo",
                        "type": "Type of photo. One of \"event\" or \"member\"",
                        "thumb_link": "Link for thumbnail sized photo"
                    }
                ],
                "swagger_type": "Profile",
                "group_profile": [
                    "Meetup Group profile information.\nThis field is only returned when profile is requested in group contexts",
                    {
                        "role": "The leadership role of this member within the Group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
                        "created": "The time this member joined the Group, represented as milliseconds since the epoch",
                        "intro": "Member intro, may be omitted if member opted to hide their intro from other members",
                        "visited": "The last time this member visited the Group, represented as milliseconds since the epoch",
                        "answers": [
                            "Array of answers to Group Profile questions",
                            {
                                "question": "Question text",
                                "answer": "Answer text",
                                "question_id": "Unique numeric question identifier"
                            }
                        ],
                        "link": "Member profile link, provides a link to the members chapter profile",
                        "title": "Organizer defined title of member. May be absent if not defined",
                        "updated": "The last time this member edited their Group profile, represented as milliseconds since the epoch",
                        "swagger_type": "GroupProfile",
                        "status": "Membership status in this Group.\nValue may be one of\nactive, blocked, pending, pending_payment or none",
                        "group": [
                            "The group associated with this membership",
                            {
                                "join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
                                "photo_gradient": [
                                    "Color combination used generate group duotone",
                                    {
                                        "dark_color": "Dark color in hexidecimal format",
                                        "id": "Unique numeric identifier",
                                        "composite_color": "Composite color in hexidecimal format",
                                        "light_color": "Light color in hexidecimal format",
                                        "swagger_type": "Duotone"
                                    }
                                ],
                                "name": "Name of the group",
                                "key_photo": [
                                    "Group primary photo",
                                    {
                                        "highres_link": "Link for full sized photo",
                                        "base_url": "A base url that can be use to construct a photo url from its components",
                                        "id": "Numeric photo ID",
                                        "photo_link": "Link for standard sized photo",
                                        "type": "Type of photo. One of \"event\" or \"member\"",
                                        "thumb_link": "Link for thumbnail sized photo"
                                    }
                                ],
                                "id": "Numeric group ID",
                                "urlname": "Urlname used to identify the group on meetup.com",
                                "group_photo": [
                                    "Group photo",
                                    {
                                        "highres_link": "Link for full sized photo",
                                        "base_url": "A base url that can be use to construct a photo url from its components",
                                        "id": "Numeric photo ID",
                                        "photo_link": "Link for standard sized photo",
                                        "type": "Type of photo. One of \"event\" or \"member\"",
                                        "thumb_link": "Link for thumbnail sized photo"
                                    }
                                ],
                                "swagger_type": "GroupSummary",
                                "who": "What the group calls its members"
                            }
                        ]
                    }
                ],
                "last_event": [
                    "Optional field representing the last RSVP'd Meetup this member attended within the last two weeks,\nwhere available. Returned when the \"fields\"\nrequest parameter value contains \"last_event\"\nonly for the profile of the authenticated member",
                    {
                        "utc_offset": "The local offset from UTC time, in milliseconds",
                        "rsvp_limit": "The number of \"yes\" RSVPS an event has capacity for",
                        "venue": [
                            "The event venue, present only if selected and not hidden by an organizer",
                            {
                                "zip": "ZIP code if, venue is in US or Canada",
                                "country": "Country code of venue",
                                "localized_country_name": "The localized name of the venue's country",
                                "city": "City of venue",
                                "address_1": "Line 1 of venue address",
                                "address_2": "Line 2 of venue address",
                                "address_3": "Line 3 of venue address",
                                "lon": "Approximate longitude",
                                "phone": "Phone number of venue",
                                "name": "Venue name",
                                "state": "State of venue where available",
                                "id": "Unique numeric venue id",
                                "repinned": "true if the editor of the event altered the original venues pin location, false otherwise",
                                "lat": "Approximate latitude"
                            }
                        ],
                        "survey_questions": [
                            "Contains a list of organizer-defined survey questions intended to be asked of RSVPing members.\nReturned when the \"fields\" request parameter\ncontains \"survey_questions\"",
                            {
                                "question": "Question text",
                                "id": "Numeric question identifier"
                            }
                        ],
                        "waitlist_count": "Number of members on the waitlist, if one exists",
                        "created": "Creation time of the event, in milliseconds since the epoch",
                        "fee": [
                            "Ticketing fee information for events that support payments",
                            {
                                "amount": "Amount of the fee",
                                "accepts": "Acceptable methods of payments may be one of \"paypal\", \"amazon\", \"wepay\", or \"cash\"",
                                "description": "Fee description, typically \"per-person\"",
                                "currency": "Currency accepted for fee",
                                "label": "Label for fee, typically \"Price\"",
                                "required": "Boolean flag indicating if this fee is required to RSVP"
                            }
                        ],
                        "swagger_type": "EventSummary",
                        "yes_rsvp_count": "Number of yes RSVPs including guests",
                        "duration": "Scheduled event duration in milliseconds, if an end time is specified by the organizer. When not present, a default of 3 hours may be assumed by applications",
                        "photo_album": [
                            "Information about photo uploads for this event",
                            {
                                "photo_count": "Number of photos uploaded",
                                "photo_sample": [
                                    "A small collection of photos uploaded for this event",
                                    {
                                        "highres_link": "Link for full sized photo",
                                        "base_url": "A base url that can be use to construct a photo url from its components",
                                        "id": "Numeric photo ID",
                                        "photo_link": "Link for standard sized photo",
                                        "type": "Type of photo. One of \"event\" or \"member\"",
                                        "thumb_link": "Link for thumbnail sized photo"
                                    }
                                ],
                                "id": "Unique numeric identifier for photo album",
                                "event": [
                                    "Event photo album belongs to. This will be absent if the album\nis not associated with an event",
                                    {
                                        "utc_offset": "The local offset from UTC time, in milliseconds",
                                        "name": "Name of event",
                                        "id": "Alphanumeric event ID",
                                        "time": "UTC start time of the event, in milliseconds since the epoch",
                                        "swagger_type": "BasicEvent",
                                        "yes_rsvp_count": "Number of yes RSVPs"
                                    }
                                ],
                                "title": "Album title",
                                "swagger_type": "PhotoAlbumSummary"
                            }
                        ],
                        "rsvp_sample": [
                            "A small collection RSVPs for members attending this event, returned when the \"fields\" request parameter value includes \"rsvp_sample\"",
                            {
                                "member": [
                                    "Member who RSVP'd",
                                    {
                                        "role": "The leadership role of this member within the group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
                                        "name": "Name of member",
                                        "photo": [
                                            "Member photo, if available.\nMembers who registered via Facebook may not have highres photos",
                                            {
                                                "highres_link": "Link for full sized photo",
                                                "base_url": "A base url that can be use to construct a photo url from its components",
                                                "id": "Numeric photo ID",
                                                "photo_link": "Link for standard sized photo",
                                                "type": "Type of photo. One of \"event\" or \"member\"",
                                                "thumb_link": "Link for thumbnail sized photo"
                                            }
                                        ],
                                        "self": [
                                            "Represents the authenticated member's relation to member.\nReturned with the \"fields\" request parameter includes \"self\" and\nthe target member is not the authenticated member",
                                            {
                                                "common": [
                                                    "Information the authenticated member has in common with this member",
                                                    {
                                                        "groups": [
                                                            "List of common groups",
                                                            {
                                                                "join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
                                                                "photo_gradient": [
                                                                    "Color combination used generate group duotone",
                                                                    {
                                                                        "dark_color": "Dark color in hexidecimal format",
                                                                        "id": "Unique numeric identifier",
                                                                        "composite_color": "Composite color in hexidecimal format",
                                                                        "light_color": "Light color in hexidecimal format",
                                                                        "swagger_type": "Duotone"
                                                                    }
                                                                ],
                                                                "name": "Name of the group",
                                                                "key_photo": [
                                                                    "Group primary photo",
                                                                    {
                                                                        "highres_link": "Link for full sized photo",
                                                                        "base_url": "A base url that can be use to construct a photo url from its components",
                                                                        "id": "Numeric photo ID",
                                                                        "photo_link": "Link for standard sized photo",
                                                                        "type": "Type of photo. One of \"event\" or \"member\"",
                                                                        "thumb_link": "Link for thumbnail sized photo"
                                                                    }
                                                                ],
                                                                "id": "Numeric group ID",
                                                                "urlname": "Urlname used to identify the group on meetup.com",
                                                                "group_photo": [
                                                                    "Group photo",
                                                                    {
                                                                        "highres_link": "Link for full sized photo",
                                                                        "base_url": "A base url that can be use to construct a photo url from its components",
                                                                        "id": "Numeric photo ID",
                                                                        "photo_link": "Link for standard sized photo",
                                                                        "type": "Type of photo. One of \"event\" or \"member\"",
                                                                        "thumb_link": "Link for thumbnail sized photo"
                                                                    }
                                                                ],
                                                                "swagger_type": "GroupSummary",
                                                                "who": "What the group calls its members"
                                                            }
                                                        ]
                                                    }
                                                ],
                                                "actions": "List of actions available for the authenticated member to perform.\nCurrently only \"message\" is supported",
                                                "blocks": "Boolean indication of whether or not the authenticated member blocks this member",
                                                "friends": "Boolean indication of whether or not the authenticated member is a friend of the member",
                                                "swagger_type": "MemberSelf"
                                            }
                                        ],
                                        "bio": "Intro of member",
                                        "id": "Numeric member ID",
                                        "title": "Organizer defined title of member. May be absent if not defined",
                                        "event_context": [
                                            "Member's context within the event. Only returned in the context of an event",
                                            {
                                                "host": "Boolean indicator for whether this member is a host for the event"
                                            }
                                        ],
                                        "swagger_type": "AttendanceSummary"
                                    }
                                ],
                                "id": "Unique numeric identifier for the RSVP. May be -1 for events scheduled in the future",
                                "updated": "Last modified time of the RSVP, in milliseconds since the epoch",
                                "swagger_type": "RSVPSummary",
                                "created": "Creation time of the RSVP, in milliseconds since the epoch"
                            }
                        ],
                        "series": [
                            "Returned when the \"fields\" request parameter value includes \"series\" for events that are part of a series of events",
                            {
                                "end_date": "Date when this series ends/ended, in milliseconds since the epoch",
                                "description": "Human displayable description of how often events in this series occur",
                                "id": "Unique numeric identifier for the series",
                                "swagger_type": "RecurrenceSchedule",
                                "weekly": [
                                    "Returned for events that are part of a weekly recurring series of events",
                                    {
                                        "days_of_week": "List of integers 1-7 (Monday-Sunday) of days of week recurrence occurs upon",
                                        "end_date": "Date when series ends/ended, in LocalDate (yyyy-MM-dd) format",
                                        "interval": "Integer number of weeks between each recurrence"
                                    }
                                ],
                                "start_date": "Date when this series begins/began, in milliseconds since the epoch"
                            }
                        ],
                        "name": "Name of the event",
                        "id": "A unique alphanumeric identifier for event",
                        "time": "UTC start time of the event, in milliseconds since the epoch",
                        "updated": "Last modified time for the event in milliseconds since the epoch",
                        "group": [
                            "Group hosting the event",
                            {
                                "join_mode": "Indicator of how new members may be able to join. be one of \"open\", \"approval\" or \"closed\"",
                                "name": "Name of the group",
                                "lon": "Approximate group longitude",
                                "id": "Numeric identifier for the group",
                                "urlname": "Alphanumeric urlname identifier for the group",
                                "lat": "Approximate group latitude",
                                "who": "What the group calls its members"
                            }
                        ]
                    }
                ],
                "name": "Display name for the member",
                "self": [
                    "Represents the authenticated member's relation to member.\nReturned when \"fields\" request parameter value includes \"self\" and\nthe target member is not the authenticated member",
                    {
                        "common": [
                            "Information the authenticated member has in common with this member",
                            {
                                "groups": [
                                    "List of common groups",
                                    {
                                        "join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
                                        "photo_gradient": [
                                            "Color combination used generate group duotone",
                                            {
                                                "dark_color": "Dark color in hexidecimal format",
                                                "id": "Unique numeric identifier",
                                                "composite_color": "Composite color in hexidecimal format",
                                                "light_color": "Light color in hexidecimal format",
                                                "swagger_type": "Duotone"
                                            }
                                        ],
                                        "name": "Name of the group",
                                        "key_photo": [
                                            "Group primary photo",
                                            {
                                                "highres_link": "Link for full sized photo",
                                                "base_url": "A base url that can be use to construct a photo url from its components",
                                                "id": "Numeric photo ID",
                                                "photo_link": "Link for standard sized photo",
                                                "type": "Type of photo. One of \"event\" or \"member\"",
                                                "thumb_link": "Link for thumbnail sized photo"
                                            }
                                        ],
                                        "id": "Numeric group ID",
                                        "urlname": "Urlname used to identify the group on meetup.com",
                                        "group_photo": [
                                            "Group photo",
                                            {
                                                "highres_link": "Link for full sized photo",
                                                "base_url": "A base url that can be use to construct a photo url from its components",
                                                "id": "Numeric photo ID",
                                                "photo_link": "Link for standard sized photo",
                                                "type": "Type of photo. One of \"event\" or \"member\"",
                                                "thumb_link": "Link for thumbnail sized photo"
                                            }
                                        ],
                                        "swagger_type": "GroupSummary",
                                        "who": "What the group calls its members"
                                    }
                                ]
                            }
                        ],
                        "actions": "List of actions available for the authenticated member to perform.\nCurrently only \"message\" is supported",
                        "blocks": "Boolean indication of whether or not the authenticated member blocks this member",
                        "friends": "Boolean indication of whether or not the authenticated member is a friend of the member",
                        "swagger_type": "MemberSelf"
                    }
                ],
                "messaging_pref": "The member's preference for being contacted from other members on the platform.\nReturned only when the fields request parameter value includes \"messaging_pref\".\nMay be one of the following: \"all_members\", \"groups_only\", or \"orgs_only\""
            },
            "tag": "edit",
            "responseModel": "EditGroupMembers"
        },
        "EditMembers": {
            "version": "3",
            "name": "EditMembers",
            "httpMethod": "PATCH",
            "parameters": {
                "member_id": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "birthday": {
                    "location": "query",
                    "required": false,
                    "description": "Member's date or year of birth.\nMay be specified in one of the following formats.\nyyyy, mmddyyy or alternatively -1, which indicates that birthday\ndata should be cleared"
                },
                "zip": {
                    "location": "query",
                    "required": false,
                    "description": "A valid zip code to associate with the member.\nThis parameter must be accompanied by \"lat\" and \"lon\""
                },
                "remove_topics": {
                    "location": "query",
                    "required": false,
                    "description": "Comma-delimited list of topic ids to remove from members interest list"
                },
                "photo_id": {
                    "location": "query",
                    "required": false,
                    "description": "A valid photo id to this member has previously updated to use as profile photo"
                },
                "gender": {
                    "location": "query",
                    "required": false,
                    "description": "Member's gender.\nValue may be one of \"female\", \"male\", \"none\", or \"other\""
                },
                "topics_privacy": {
                    "location": "query",
                    "required": false,
                    "description": "Preference for hiding or showing member interests to others.\nValue may be one of \"hidden\" or \"visible\""
                },
                "bio": {
                    "location": "query",
                    "required": false,
                    "description": "Member bio of up to 250 characters"
                },
                "facebook_privacy": {
                    "location": "query",
                    "required": false,
                    "description": "Preference for hiding showing information member's facebook connection.\nValue may be one of \"hidden\" or \"visible\""
                },
                "lon": {
                    "location": "query",
                    "required": false,
                    "description": "A valid longitude to resolve the closest location to associate with the member\nThis parameter must be accompanied by \"lat\" and \"zip\""
                },
                "groups_privacy": {
                    "location": "query",
                    "required": false,
                    "description": "Preference for hiding or showing group memberships to others.\nValue may be one of \"hidden\" or \"visible\""
                },
                "add_topics": {
                    "location": "query",
                    "required": false,
                    "description": "Comma-delimited list of topic ids to add to members interest list"
                },
                "sync_photo": {
                    "location": "query",
                    "required": false,
                    "description": "When set to true, this parameter will sync all the group\nprofile photos for the member with the provided photo_id"
                },
                "name": {
                    "location": "query",
                    "required": false,
                    "description": "Member name"
                },
                "bio_privacy": {
                    "location": "query",
                    "required": false,
                    "description": "Preference for hiding or showing member bio to others.\nValue may be one of \"hidden\" or \"visible\""
                },
                "lang": {
                    "location": "query",
                    "required": false,
                    "description": "Member's language preference.\nValue may be one of \"de-DE\", \"en-AU\", \"en-US\", \"es\", \"es-ES\", \"fr-FR\", \"it-IT\", \"ja-JP\", \"ko-KR\", \"nl-NL\", \"pl-PL\", \"pt-BR\", \"sv-SE\", \"th-TH\", or \"tr-TR\""
                },
                "lat": {
                    "location": "query",
                    "required": false,
                    "description": "A valid latitude to resolve the closest location to associate with the member.\nThis parameter must be accompanied by \"lon\" and \"zip\""
                },
                "city_id": {
                    "location": "query",
                    "required": false,
                    "description": "Valid Meetup city identifier that indicates the city in which the member resides"
                },
                "messaging_pref": {
                    "location": "query",
                    "required": false,
                    "description": "Preference for which members may contact you via the Meetup platform.\nValue may be one of \"all_members\", \"groups_only\", or \"orgs_only\""
                }
            },
            "summary": null,
            "uri": "/members/{member_id}",
            "notes": "All parameters are optional.\n\nOAuth authenticated applications should\nrequest the [profile_edit](/meetup_api/auth/#profile_edit_scope)\npermission scope\n\nSome Meetup group organizers may define a set of profile questions\nthey'd like their members to answer. You can obtain that question\nlist using the [Get Group](/meetup_api/docs/:urlname/#get) by sending\n a \"fields\" request parameter containing\n\"join_info\"\n\nThe authenticated member may set their currently location by either supplying a valid\n\"city_id\" or a valid \"lat\", \"lon\", or \"zip\".\nYou can resolve a coordinate-based \"zip\" by using the\n[Find locations](/meetup_api/docs/find/locations) API",
            "response": {
                "birthday": [
                    "Returned only when the fields request parameter value includes 'birthday'\nand only for the authenticated member when defined",
                    {
                        "month": "Numeric month member was born. May be absent if not defined",
                        "year": "Year member was born",
                        "day": "Numeric day member was born. May be absent if not defined"
                    }
                ],
                "country": "Country code associated with Member's location",
                "localized_country_name": "Name of country associated with Member's location",
                "gender": "Returned only when the fields request parameter value includes \"gender\"\nand only for the authenticated member.\nValue may be one of \"female\", \"male\", \"none\", or \"other\".\nThis field may be absent where gender is not defined",
                "city": "City associated with Member's location",
                "topics": [
                    "List of Meetup topics Member has interest in.\nReturned only when fields request parameter value includes \"topics\".\nThis list may be omitted when member has opted to hide the topics from others.",
                    {
                        "name": "Display name of the topic",
                        "urlkey": "The unique keyword used to identify this topic",
                        "id": "Numeric topic id",
                        "lang": "Language topic originates from",
                        "swagger_type": "TopicSummary"
                    }
                ],
                "joined": "Time member joined, represented as milliseconds since the epoch",
                "photo": [
                    "Member photo. May be absent if member has not chosen one.\nIn group contexts, the Member's Group profile photo will be returned.",
                    {
                        "highres_link": "Link for full sized photo",
                        "base_url": "A base url that can be use to construct a photo url from its components",
                        "id": "Numeric photo ID",
                        "photo_link": "Link for standard sized photo",
                        "type": "Type of photo. One of \"event\" or \"member\"",
                        "thumb_link": "Link for thumbnail sized photo"
                    }
                ],
                "bio": "Member bio. When profile does not belong to the authenticated member, this may be omitted if member opted to hide their bio from others",
                "privacy": [
                    "Member's privacy preferences\nReturned only when the \"fields\" request parameter value includes \"privacy\"",
                    {
                        "groups": "may be 'hidden' or 'visible",
                        "bio": "may be 'hidden' or 'visible'",
                        "topics": "may be 'hidden' or 'visible'",
                        "swagger_type": "MemberPrivacy",
                        "facebook": "may be 'hidden' of 'visible'.\nIf absent, the member has not connected their Facebook account to Meetup"
                    }
                ],
                "lon": "Geographic longitude associated with Member's location",
                "memberships": [
                    "Group memberships affiliated with this member.\nReturned only when fields request parameter value includes \"memberships\".\nThis list may be omitted if the member has opted to hide their groups from others.",
                    {
                        "member": [
                            "Memberships where member holds a basic membership",
                            {
                                "role": "The leadership role of this member within the Group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
                                "created": "The time this member joined the Group, represented as milliseconds since the epoch",
                                "visited": "The last time this member visited the Group, represented as milliseconds since the epoch",
                                "title": "Organizer defined title of member. May be absent if not defined",
                                "updated": "The last time this member edited their Group profile, represented as milliseconds since the epoch",
                                "swagger_type": "GroupProfileListEntry",
                                "status": "Membership status in this Group.\nValue may be one of\nactive, blocked, pending, pending_payment or none",
                                "group": [
                                    "The group associated with this membership",
                                    {
                                        "join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
                                        "photo_gradient": [
                                            "Color combination used generate group duotone",
                                            {
                                                "dark_color": "Dark color in hexidecimal format",
                                                "id": "Unique numeric identifier",
                                                "composite_color": "Composite color in hexidecimal format",
                                                "light_color": "Light color in hexidecimal format",
                                                "swagger_type": "Duotone"
                                            }
                                        ],
                                        "name": "Name of the group",
                                        "key_photo": [
                                            "Group primary photo",
                                            {
                                                "highres_link": "Link for full sized photo",
                                                "base_url": "A base url that can be use to construct a photo url from its components",
                                                "id": "Numeric photo ID",
                                                "photo_link": "Link for standard sized photo",
                                                "type": "Type of photo. One of \"event\" or \"member\"",
                                                "thumb_link": "Link for thumbnail sized photo"
                                            }
                                        ],
                                        "id": "Numeric group ID",
                                        "urlname": "Urlname used to identify the group on meetup.com",
                                        "group_photo": [
                                            "Group photo",
                                            {
                                                "highres_link": "Link for full sized photo",
                                                "base_url": "A base url that can be use to construct a photo url from its components",
                                                "id": "Numeric photo ID",
                                                "photo_link": "Link for standard sized photo",
                                                "type": "Type of photo. One of \"event\" or \"member\"",
                                                "thumb_link": "Link for thumbnail sized photo"
                                            }
                                        ],
                                        "swagger_type": "GroupSummary",
                                        "who": "What the group calls its members"
                                    }
                                ]
                            }
                        ],
                        "organizer": [
                            "Memberships where member is on the group's lead team",
                            {
                                "role": "The leadership role of this member within the Group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
                                "created": "The time this member joined the Group, represented as milliseconds since the epoch",
                                "visited": "The last time this member visited the Group, represented as milliseconds since the epoch",
                                "title": "Organizer defined title of member. May be absent if not defined",
                                "updated": "The last time this member edited their Group profile, represented as milliseconds since the epoch",
                                "swagger_type": "GroupProfileListEntry",
                                "status": "Membership status in this Group.\nValue may be one of\nactive, blocked, pending, pending_payment or none",
                                "group": [
                                    "The group associated with this membership",
                                    {
                                        "join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
                                        "photo_gradient": [
                                            "Color combination used generate group duotone",
                                            {
                                                "dark_color": "Dark color in hexidecimal format",
                                                "id": "Unique numeric identifier",
                                                "composite_color": "Composite color in hexidecimal format",
                                                "light_color": "Light color in hexidecimal format",
                                                "swagger_type": "Duotone"
                                            }
                                        ],
                                        "name": "Name of the group",
                                        "key_photo": [
                                            "Group primary photo",
                                            {
                                                "highres_link": "Link for full sized photo",
                                                "base_url": "A base url that can be use to construct a photo url from its components",
                                                "id": "Numeric photo ID",
                                                "photo_link": "Link for standard sized photo",
                                                "type": "Type of photo. One of \"event\" or \"member\"",
                                                "thumb_link": "Link for thumbnail sized photo"
                                            }
                                        ],
                                        "id": "Numeric group ID",
                                        "urlname": "Urlname used to identify the group on meetup.com",
                                        "group_photo": [
                                            "Group photo",
                                            {
                                                "highres_link": "Link for full sized photo",
                                                "base_url": "A base url that can be use to construct a photo url from its components",
                                                "id": "Numeric photo ID",
                                                "photo_link": "Link for standard sized photo",
                                                "type": "Type of photo. One of \"event\" or \"member\"",
                                                "thumb_link": "Link for thumbnail sized photo"
                                            }
                                        ],
                                        "swagger_type": "GroupSummary",
                                        "who": "What the group calls its members"
                                    }
                                ]
                            }
                        ]
                    }
                ],
                "swagger_type": "Profile",
                "other_services": [
                    "An object whose key's are the names of associated external\nnetworks and values are identities within those networks.\nThe keys may be one of facebook, flickr, linkedin, tumblr or twitter.\nReturned only when \"fields\" request parameter value\nincludes \"other_services\"",
                    {
                        "identifier": "A unique string identifier",
                        "url": "A url for this identity. May be the same as identifier in some cases",
                        "swagger_type": "SocialNetwork"
                    }
                ],
                "stats": [
                    "High level numeric member statistics\nReturned only when fields request parameter value includes 'stats'",
                    {
                        "groups": "Number of Meetup Group memberships.\nMay be 0 if member chose to hide their groups from others",
                        "rsvps": "Number of RSVPs.\nMay be 0 if member chose to hide their groups from others",
                        "topics": "Number of Meetup topics member is interested in.\nMay be 0 if member chose to hide their topics from others"
                    }
                ],
                "last_event": [
                    "Optional field representing the last RSVP'd Meetup this member attended within the last two weeks,\nwhere available. Returned when the \"fields\"\nrequest parameter value contains \"last_event\"\nonly for the profile of the authenticated member",
                    {
                        "utc_offset": "The local offset from UTC time, in milliseconds",
                        "rsvp_limit": "The number of \"yes\" RSVPS an event has capacity for",
                        "venue": [
                            "The event venue, present only if selected and not hidden by an organizer",
                            {
                                "zip": "ZIP code if, venue is in US or Canada",
                                "country": "Country code of venue",
                                "localized_country_name": "The localized name of the venue's country",
                                "city": "City of venue",
                                "address_1": "Line 1 of venue address",
                                "address_2": "Line 2 of venue address",
                                "address_3": "Line 3 of venue address",
                                "lon": "Approximate longitude",
                                "phone": "Phone number of venue",
                                "name": "Venue name",
                                "state": "State of venue where available",
                                "id": "Unique numeric venue id",
                                "repinned": "true if the editor of the event altered the original venues pin location, false otherwise",
                                "lat": "Approximate latitude"
                            }
                        ],
                        "survey_questions": [
                            "Contains a list of organizer-defined survey questions intended to be asked of RSVPing members.\nReturned when the \"fields\" request parameter\ncontains \"survey_questions\"",
                            {
                                "question": "Question text",
                                "id": "Numeric question identifier"
                            }
                        ],
                        "waitlist_count": "Number of members on the waitlist, if one exists",
                        "created": "Creation time of the event, in milliseconds since the epoch",
                        "fee": [
                            "Ticketing fee information for events that support payments",
                            {
                                "amount": "Amount of the fee",
                                "accepts": "Acceptable methods of payments may be one of \"paypal\", \"amazon\", \"wepay\", or \"cash\"",
                                "description": "Fee description, typically \"per-person\"",
                                "currency": "Currency accepted for fee",
                                "label": "Label for fee, typically \"Price\"",
                                "required": "Boolean flag indicating if this fee is required to RSVP"
                            }
                        ],
                        "swagger_type": "EventSummary",
                        "yes_rsvp_count": "Number of yes RSVPs including guests",
                        "duration": "Scheduled event duration in milliseconds, if an end time is specified by the organizer. When not present, a default of 3 hours may be assumed by applications",
                        "photo_album": [
                            "Information about photo uploads for this event",
                            {
                                "photo_count": "Number of photos uploaded",
                                "photo_sample": [
                                    "A small collection of photos uploaded for this event",
                                    {
                                        "highres_link": "Link for full sized photo",
                                        "base_url": "A base url that can be use to construct a photo url from its components",
                                        "id": "Numeric photo ID",
                                        "photo_link": "Link for standard sized photo",
                                        "type": "Type of photo. One of \"event\" or \"member\"",
                                        "thumb_link": "Link for thumbnail sized photo"
                                    }
                                ],
                                "id": "Unique numeric identifier for photo album",
                                "event": [
                                    "Event photo album belongs to. This will be absent if the album\nis not associated with an event",
                                    {
                                        "utc_offset": "The local offset from UTC time, in milliseconds",
                                        "name": "Name of event",
                                        "id": "Alphanumeric event ID",
                                        "time": "UTC start time of the event, in milliseconds since the epoch",
                                        "swagger_type": "BasicEvent",
                                        "yes_rsvp_count": "Number of yes RSVPs"
                                    }
                                ],
                                "title": "Album title",
                                "swagger_type": "PhotoAlbumSummary"
                            }
                        ],
                        "rsvp_sample": [
                            "A small collection RSVPs for members attending this event, returned when the \"fields\" request parameter value includes \"rsvp_sample\"",
                            {
                                "member": [
                                    "Member who RSVP'd",
                                    {
                                        "role": "The leadership role of this member within the group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
                                        "name": "Name of member",
                                        "photo": [
                                            "Member photo, if available.\nMembers who registered via Facebook may not have highres photos",
                                            {
                                                "highres_link": "Link for full sized photo",
                                                "base_url": "A base url that can be use to construct a photo url from its components",
                                                "id": "Numeric photo ID",
                                                "photo_link": "Link for standard sized photo",
                                                "type": "Type of photo. One of \"event\" or \"member\"",
                                                "thumb_link": "Link for thumbnail sized photo"
                                            }
                                        ],
                                        "self": [
                                            "Represents the authenticated member's relation to member.\nReturned with the \"fields\" request parameter includes \"self\" and\nthe target member is not the authenticated member",
                                            {
                                                "common": [
                                                    "Information the authenticated member has in common with this member",
                                                    {
                                                        "groups": [
                                                            "List of common groups",
                                                            {
                                                                "join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
                                                                "photo_gradient": [
                                                                    "Color combination used generate group duotone",
                                                                    {
                                                                        "dark_color": "Dark color in hexidecimal format",
                                                                        "id": "Unique numeric identifier",
                                                                        "composite_color": "Composite color in hexidecimal format",
                                                                        "light_color": "Light color in hexidecimal format",
                                                                        "swagger_type": "Duotone"
                                                                    }
                                                                ],
                                                                "name": "Name of the group",
                                                                "key_photo": [
                                                                    "Group primary photo",
                                                                    {
                                                                        "highres_link": "Link for full sized photo",
                                                                        "base_url": "A base url that can be use to construct a photo url from its components",
                                                                        "id": "Numeric photo ID",
                                                                        "photo_link": "Link for standard sized photo",
                                                                        "type": "Type of photo. One of \"event\" or \"member\"",
                                                                        "thumb_link": "Link for thumbnail sized photo"
                                                                    }
                                                                ],
                                                                "id": "Numeric group ID",
                                                                "urlname": "Urlname used to identify the group on meetup.com",
                                                                "group_photo": [
                                                                    "Group photo",
                                                                    {
                                                                        "highres_link": "Link for full sized photo",
                                                                        "base_url": "A base url that can be use to construct a photo url from its components",
                                                                        "id": "Numeric photo ID",
                                                                        "photo_link": "Link for standard sized photo",
                                                                        "type": "Type of photo. One of \"event\" or \"member\"",
                                                                        "thumb_link": "Link for thumbnail sized photo"
                                                                    }
                                                                ],
                                                                "swagger_type": "GroupSummary",
                                                                "who": "What the group calls its members"
                                                            }
                                                        ]
                                                    }
                                                ],
                                                "actions": "List of actions available for the authenticated member to perform.\nCurrently only \"message\" is supported",
                                                "blocks": "Boolean indication of whether or not the authenticated member blocks this member",
                                                "friends": "Boolean indication of whether or not the authenticated member is a friend of the member",
                                                "swagger_type": "MemberSelf"
                                            }
                                        ],
                                        "bio": "Intro of member",
                                        "id": "Numeric member ID",
                                        "title": "Organizer defined title of member. May be absent if not defined",
                                        "event_context": [
                                            "Member's context within the event. Only returned in the context of an event",
                                            {
                                                "host": "Boolean indicator for whether this member is a host for the event"
                                            }
                                        ],
                                        "swagger_type": "AttendanceSummary"
                                    }
                                ],
                                "id": "Unique numeric identifier for the RSVP. May be -1 for events scheduled in the future",
                                "updated": "Last modified time of the RSVP, in milliseconds since the epoch",
                                "swagger_type": "RSVPSummary",
                                "created": "Creation time of the RSVP, in milliseconds since the epoch"
                            }
                        ],
                        "series": [
                            "Returned when the \"fields\" request parameter value includes \"series\" for events that are part of a series of events",
                            {
                                "end_date": "Date when this series ends/ended, in milliseconds since the epoch",
                                "description": "Human displayable description of how often events in this series occur",
                                "id": "Unique numeric identifier for the series",
                                "swagger_type": "RecurrenceSchedule",
                                "weekly": [
                                    "Returned for events that are part of a weekly recurring series of events",
                                    {
                                        "days_of_week": "List of integers 1-7 (Monday-Sunday) of days of week recurrence occurs upon",
                                        "end_date": "Date when series ends/ended, in LocalDate (yyyy-MM-dd) format",
                                        "interval": "Integer number of weeks between each recurrence"
                                    }
                                ],
                                "start_date": "Date when this series begins/began, in milliseconds since the epoch"
                            }
                        ],
                        "name": "Name of the event",
                        "id": "A unique alphanumeric identifier for event",
                        "time": "UTC start time of the event, in milliseconds since the epoch",
                        "updated": "Last modified time for the event in milliseconds since the epoch",
                        "group": [
                            "Group hosting the event",
                            {
                                "join_mode": "Indicator of how new members may be able to join. be one of \"open\", \"approval\" or \"closed\"",
                                "name": "Name of the group",
                                "lon": "Approximate group longitude",
                                "id": "Numeric identifier for the group",
                                "urlname": "Alphanumeric urlname identifier for the group",
                                "lat": "Approximate group latitude",
                                "who": "What the group calls its members"
                            }
                        ]
                    }
                ],
                "name": "Display name for the member",
                "self": [
                    "Represents the authenticated member's relation to member.\nReturned when \"fields\" request parameter value includes \"self\" and\nthe target member is not the authenticated member",
                    {
                        "common": [
                            "Information the authenticated member has in common with this member",
                            {
                                "groups": [
                                    "List of common groups",
                                    {
                                        "join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
                                        "photo_gradient": [
                                            "Color combination used generate group duotone",
                                            {
                                                "dark_color": "Dark color in hexidecimal format",
                                                "id": "Unique numeric identifier",
                                                "composite_color": "Composite color in hexidecimal format",
                                                "light_color": "Light color in hexidecimal format",
                                                "swagger_type": "Duotone"
                                            }
                                        ],
                                        "name": "Name of the group",
                                        "key_photo": [
                                            "Group primary photo",
                                            {
                                                "highres_link": "Link for full sized photo",
                                                "base_url": "A base url that can be use to construct a photo url from its components",
                                                "id": "Numeric photo ID",
                                                "photo_link": "Link for standard sized photo",
                                                "type": "Type of photo. One of \"event\" or \"member\"",
                                                "thumb_link": "Link for thumbnail sized photo"
                                            }
                                        ],
                                        "id": "Numeric group ID",
                                        "urlname": "Urlname used to identify the group on meetup.com",
                                        "group_photo": [
                                            "Group photo",
                                            {
                                                "highres_link": "Link for full sized photo",
                                                "base_url": "A base url that can be use to construct a photo url from its components",
                                                "id": "Numeric photo ID",
                                                "photo_link": "Link for standard sized photo",
                                                "type": "Type of photo. One of \"event\" or \"member\"",
                                                "thumb_link": "Link for thumbnail sized photo"
                                            }
                                        ],
                                        "swagger_type": "GroupSummary",
                                        "who": "What the group calls its members"
                                    }
                                ]
                            }
                        ],
                        "actions": "List of actions available for the authenticated member to perform.\nCurrently only \"message\" is supported",
                        "blocks": "Boolean indication of whether or not the authenticated member blocks this member",
                        "friends": "Boolean indication of whether or not the authenticated member is a friend of the member",
                        "swagger_type": "MemberSelf"
                    }
                ],
                "state": "State associated with Member's location, where available",
                "id": "Unique numeric identifier for the member",
                "lat": "Geographic latitude associated with Member's location",
                "next_event": [
                    "Optional field representing either the current ongoing or next RSVP'd Meetup, where available.\nReturned when the \"fields\"\nrequest parameter value contains \"next_event\"\nonly for the profile of the authenticated member",
                    {
                        "utc_offset": "The local offset from UTC time, in milliseconds",
                        "rsvp_limit": "The number of \"yes\" RSVPS an event has capacity for",
                        "venue": [
                            "The event venue, present only if selected and not hidden by an organizer",
                            {
                                "zip": "ZIP code if, venue is in US or Canada",
                                "country": "Country code of venue",
                                "localized_country_name": "The localized name of the venue's country",
                                "city": "City of venue",
                                "address_1": "Line 1 of venue address",
                                "address_2": "Line 2 of venue address",
                                "address_3": "Line 3 of venue address",
                                "lon": "Approximate longitude",
                                "phone": "Phone number of venue",
                                "name": "Venue name",
                                "state": "State of venue where available",
                                "id": "Unique numeric venue id",
                                "repinned": "true if the editor of the event altered the original venues pin location, false otherwise",
                                "lat": "Approximate latitude"
                            }
                        ],
                        "survey_questions": [
                            "Contains a list of organizer-defined survey questions intended to be asked of RSVPing members.\nReturned when the \"fields\" request parameter\ncontains \"survey_questions\"",
                            {
                                "question": "Question text",
                                "id": "Numeric question identifier"
                            }
                        ],
                        "waitlist_count": "Number of members on the waitlist, if one exists",
                        "created": "Creation time of the event, in milliseconds since the epoch",
                        "fee": [
                            "Ticketing fee information for events that support payments",
                            {
                                "amount": "Amount of the fee",
                                "accepts": "Acceptable methods of payments may be one of \"paypal\", \"amazon\", \"wepay\", or \"cash\"",
                                "description": "Fee description, typically \"per-person\"",
                                "currency": "Currency accepted for fee",
                                "label": "Label for fee, typically \"Price\"",
                                "required": "Boolean flag indicating if this fee is required to RSVP"
                            }
                        ],
                        "swagger_type": "EventSummary",
                        "yes_rsvp_count": "Number of yes RSVPs including guests",
                        "duration": "Scheduled event duration in milliseconds, if an end time is specified by the organizer. When not present, a default of 3 hours may be assumed by applications",
                        "photo_album": [
                            "Information about photo uploads for this event",
                            {
                                "photo_count": "Number of photos uploaded",
                                "photo_sample": [
                                    "A small collection of photos uploaded for this event",
                                    {
                                        "highres_link": "Link for full sized photo",
                                        "base_url": "A base url that can be use to construct a photo url from its components",
                                        "id": "Numeric photo ID",
                                        "photo_link": "Link for standard sized photo",
                                        "type": "Type of photo. One of \"event\" or \"member\"",
                                        "thumb_link": "Link for thumbnail sized photo"
                                    }
                                ],
                                "id": "Unique numeric identifier for photo album",
                                "event": [
                                    "Event photo album belongs to. This will be absent if the album\nis not associated with an event",
                                    {
                                        "utc_offset": "The local offset from UTC time, in milliseconds",
                                        "name": "Name of event",
                                        "id": "Alphanumeric event ID",
                                        "time": "UTC start time of the event, in milliseconds since the epoch",
                                        "swagger_type": "BasicEvent",
                                        "yes_rsvp_count": "Number of yes RSVPs"
                                    }
                                ],
                                "title": "Album title",
                                "swagger_type": "PhotoAlbumSummary"
                            }
                        ],
                        "rsvp_sample": [
                            "A small collection RSVPs for members attending this event, returned when the \"fields\" request parameter value includes \"rsvp_sample\"",
                            {
                                "member": [
                                    "Member who RSVP'd",
                                    {
                                        "role": "The leadership role of this member within the group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
                                        "name": "Name of member",
                                        "photo": [
                                            "Member photo, if available.\nMembers who registered via Facebook may not have highres photos",
                                            {
                                                "highres_link": "Link for full sized photo",
                                                "base_url": "A base url that can be use to construct a photo url from its components",
                                                "id": "Numeric photo ID",
                                                "photo_link": "Link for standard sized photo",
                                                "type": "Type of photo. One of \"event\" or \"member\"",
                                                "thumb_link": "Link for thumbnail sized photo"
                                            }
                                        ],
                                        "self": [
                                            "Represents the authenticated member's relation to member.\nReturned with the \"fields\" request parameter includes \"self\" and\nthe target member is not the authenticated member",
                                            {
                                                "common": [
                                                    "Information the authenticated member has in common with this member",
                                                    {
                                                        "groups": [
                                                            "List of common groups",
                                                            {
                                                                "join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
                                                                "photo_gradient": [
                                                                    "Color combination used generate group duotone",
                                                                    {
                                                                        "dark_color": "Dark color in hexidecimal format",
                                                                        "id": "Unique numeric identifier",
                                                                        "composite_color": "Composite color in hexidecimal format",
                                                                        "light_color": "Light color in hexidecimal format",
                                                                        "swagger_type": "Duotone"
                                                                    }
                                                                ],
                                                                "name": "Name of the group",
                                                                "key_photo": [
                                                                    "Group primary photo",
                                                                    {
                                                                        "highres_link": "Link for full sized photo",
                                                                        "base_url": "A base url that can be use to construct a photo url from its components",
                                                                        "id": "Numeric photo ID",
                                                                        "photo_link": "Link for standard sized photo",
                                                                        "type": "Type of photo. One of \"event\" or \"member\"",
                                                                        "thumb_link": "Link for thumbnail sized photo"
                                                                    }
                                                                ],
                                                                "id": "Numeric group ID",
                                                                "urlname": "Urlname used to identify the group on meetup.com",
                                                                "group_photo": [
                                                                    "Group photo",
                                                                    {
                                                                        "highres_link": "Link for full sized photo",
                                                                        "base_url": "A base url that can be use to construct a photo url from its components",
                                                                        "id": "Numeric photo ID",
                                                                        "photo_link": "Link for standard sized photo",
                                                                        "type": "Type of photo. One of \"event\" or \"member\"",
                                                                        "thumb_link": "Link for thumbnail sized photo"
                                                                    }
                                                                ],
                                                                "swagger_type": "GroupSummary",
                                                                "who": "What the group calls its members"
                                                            }
                                                        ]
                                                    }
                                                ],
                                                "actions": "List of actions available for the authenticated member to perform.\nCurrently only \"message\" is supported",
                                                "blocks": "Boolean indication of whether or not the authenticated member blocks this member",
                                                "friends": "Boolean indication of whether or not the authenticated member is a friend of the member",
                                                "swagger_type": "MemberSelf"
                                            }
                                        ],
                                        "bio": "Intro of member",
                                        "id": "Numeric member ID",
                                        "title": "Organizer defined title of member. May be absent if not defined",
                                        "event_context": [
                                            "Member's context within the event. Only returned in the context of an event",
                                            {
                                                "host": "Boolean indicator for whether this member is a host for the event"
                                            }
                                        ],
                                        "swagger_type": "AttendanceSummary"
                                    }
                                ],
                                "id": "Unique numeric identifier for the RSVP. May be -1 for events scheduled in the future",
                                "updated": "Last modified time of the RSVP, in milliseconds since the epoch",
                                "swagger_type": "RSVPSummary",
                                "created": "Creation time of the RSVP, in milliseconds since the epoch"
                            }
                        ],
                        "series": [
                            "Returned when the \"fields\" request parameter value includes \"series\" for events that are part of a series of events",
                            {
                                "end_date": "Date when this series ends/ended, in milliseconds since the epoch",
                                "description": "Human displayable description of how often events in this series occur",
                                "id": "Unique numeric identifier for the series",
                                "swagger_type": "RecurrenceSchedule",
                                "weekly": [
                                    "Returned for events that are part of a weekly recurring series of events",
                                    {
                                        "days_of_week": "List of integers 1-7 (Monday-Sunday) of days of week recurrence occurs upon",
                                        "end_date": "Date when series ends/ended, in LocalDate (yyyy-MM-dd) format",
                                        "interval": "Integer number of weeks between each recurrence"
                                    }
                                ],
                                "start_date": "Date when this series begins/began, in milliseconds since the epoch"
                            }
                        ],
                        "name": "Name of the event",
                        "id": "A unique alphanumeric identifier for event",
                        "time": "UTC start time of the event, in milliseconds since the epoch",
                        "updated": "Last modified time for the event in milliseconds since the epoch",
                        "group": [
                            "Group hosting the event",
                            {
                                "join_mode": "Indicator of how new members may be able to join. be one of \"open\", \"approval\" or \"closed\"",
                                "name": "Name of the group",
                                "lon": "Approximate group longitude",
                                "id": "Numeric identifier for the group",
                                "urlname": "Alphanumeric urlname identifier for the group",
                                "lat": "Approximate group latitude",
                                "who": "What the group calls its members"
                            }
                        ]
                    }
                ],
                "messaging_pref": "The member's preference for being contacted from other members on the platform.\nReturned only when the fields request parameter value includes \"messaging_pref\".\nMay be one of the following: \"all_members\", \"groups_only\", or \"orgs_only\""
            },
            "tag": "edit",
            "responseModel": "EditMembers"
        },
        "GetFindEvents": {
            "version": "3",
            "name": "GetFindEvents",
            "httpMethod": "GET",
            "parameters": {
                "lon": {
                    "location": "query",
                    "required": false,
                    "description": "Approximate target longitude"
                },
                "text": {
                    "location": "query",
                    "required": false,
                    "description": "Raw full text search query"
                },
                "radius": {
                    "location": "query",
                    "required": false,
                    "description": "Radius in miles. May be 0.0-100.0, 'global' or 'smart', a dynamic radius based on the number of active groups in the area. Defaults to member's preferred radius"
                },
                "fields": {
                    "location": "query",
                    "required": false,
                    "description": "A comma-delimited list of optional fields to populate in the response"
                },
                "lat": {
                    "location": "query",
                    "required": false,
                    "description": "Approximate target latitude"
                },
                "page": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "offset": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "desc": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "order": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "only": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "omit": {
                    "location": "query",
                    "required": false,
                    "description": null
                }
            },
            "summary": "Returns list of upcoming events based on location",
            "uri": "/find/events",
            "notes": "By default, the events return will be based on the hosting groups near the authenticated member's location.\nTo customize this location, send a valid \"lat\" and \"lon\"\nparameter combination reflecting a desired location.\n\nThis endpoint uses HTTP [Link header based pagination](/meetup_api/docs/#v3_json).\nResults may page forward but never in reverse",
            "response": {
                "utc_offset": "The local offset from UTC time, in milliseconds",
                "comment_count": "An aggregate count of all comments and replies for a given event, returned when fields request parameter value includes 'comment_count'",
                "rsvp_limit": "The number of \"yes\" RSVPS an event has capacity for",
                "venue": [
                    "The event venue, present only if selected and not hidden by an organizer",
                    {
                        "zip": "ZIP code if, venue is in US or Canada",
                        "country": "Country code of venue",
                        "localized_country_name": "The localized name of the venue's country",
                        "city": "City of venue",
                        "address_1": "Line 1 of venue address",
                        "address_2": "Line 2 of venue address",
                        "address_3": "Line 3 of venue address",
                        "lon": "Approximate longitude",
                        "phone": "Phone number of venue",
                        "name": "Venue name",
                        "state": "State of venue where available",
                        "id": "Unique numeric venue id",
                        "repinned": "true if the editor of the event altered the original venues pin location, false otherwise",
                        "lat": "Approximate latitude"
                    }
                ],
                "featured": "Boolean indicator of whether or not a given event is featured, returned when fields request parameter value includes 'featured'",
                "survey_questions": [
                    "List of organizer-defined survey questions intended to be asked of RSVPing members. Returned when the \"fields\"' request parameter contains \"answers\"",
                    {
                        "question": "Question text",
                        "id": "Numeric question identifier"
                    }
                ],
                "venue_visibility": "Represents who can see the venue with a potential value of \"members\" or \"public\", returned when fields request parameter value includes \"venue_visibility\" and the authenticated member is a member of the group hosting the event",
                "manual_attendance_count": "Manually entered total attendee headcount, if any exists",
                "fee": [
                    "Ticketing fee information for events that support payments",
                    {
                        "amount": "Amount of the fee",
                        "accepts": "Acceptable methods of payments may be one of \"paypal\", \"amazon\", \"wepay\", or \"cash\"",
                        "description": "Fee description, typically \"per-person\"",
                        "currency": "Currency accepted for fee",
                        "label": "Label for fee, typically \"Price\"",
                        "required": "Boolean flag indicating if this fee is required to RSVP"
                    }
                ],
                "link": "Link to event on meetup.com",
                "why": "We should do this because...",
                "description": "Description of the event in HTML. Email addresses and phone numbers will be masked for non-members",
                "short_link": "A shortened link for the event on meetup.com, returned when fields request parameter value includes \"short_link\"",
                "yes_rsvp_count": "Number of yes RSVPs including guests",
                "duration": "Scheduled event duration in milliseconds, if an end time is specified by the organizer. When not present, a default of 3 hours may be assumed by applications",
                "event_hosts": [
                    "List of members hosting the event, returned when fields request parameter value includes 'event_hosts'",
                    {
                        "name": "Host member's name",
                        "photo": [
                            "Member photo if one exists",
                            {
                                "highres_link": "Link for full sized photo",
                                "base_url": "A base url that can be use to construct a photo url from its components",
                                "id": "Numeric photo ID",
                                "photo_link": "Link for standard sized photo",
                                "type": "Type of photo. One of \"event\" or \"member\"",
                                "thumb_link": "Link for thumbnail sized photo"
                            }
                        ],
                        "id": "Host member's id"
                    }
                ],
                "simple_html_description": "Description of the event, in simple HTML source format. If this event's description was saved in simple HTML format, the description field will be an HTML translation of this source. Returned when the \"fields\"' request parameter contains \"simple_html_description\"",
                "id": "A unique alphanumeric identifier for event",
                "group": [
                    "Information about group hosting the event",
                    {
                        "photo_gradient": [
                            "Color combination used to generate group duotone, returned when fields request parameter value includes 'group_photo_gradient'",
                            {
                                "dark_color": "Dark color in hexidecimal format",
                                "id": "Unique numeric identifier",
                                "composite_color": "Composite color in hexidecimal format",
                                "light_color": "Light color in hexidecimal format",
                                "swagger_type": "Duotone"
                            }
                        ],
                        "join_info": [
                            "Lists any questions requested when joining and required fields. Returned with \"fields\" request parameter value includes \"group_join_info\"",
                            {
                                "photo_req": "true if required, false otherwise",
                                "questions": [
                                    "List of profile questions organizer would like new members to answer prior to joining",
                                    {
                                        "question": "The text of the question",
                                        "id": "Unique numeric identifier for the question"
                                    }
                                ],
                                "questions_req": "true if required, false otherwise",
                                "swagger_type": "GroupJoinInfo"
                            }
                        ],
                        "visibility": "Group visibility, returned when fields request parameter value includes 'group_visibility'. Value may be \"public\", \"public_limited\", or \"members\".",
                        "topics": [
                            "Topics related to the group, returned when fields request parameter value includes 'group_topics'",
                            {
                                "name": "Display name of the topic",
                                "urlkey": "The unique keyword used to identify this topic",
                                "id": "Numeric topic id",
                                "lang": "Language topic originates from",
                                "swagger_type": "TopicSummary"
                            }
                        ],
                        "key_photo": [
                            "Group primary photo, returned when fields request parameter value includes 'group_key_photo'",
                            {
                                "highres_link": "Link for full sized photo",
                                "base_url": "A base url that can be use to construct a photo url from its components",
                                "id": "Numeric photo ID",
                                "photo_link": "Link for standard sized photo",
                                "type": "Type of photo. One of \"event\" or \"member\"",
                                "thumb_link": "Link for thumbnail sized photo"
                            }
                        ],
                        "photo": [
                            "Photo associated with group, returned when fields request parameter value includes 'group_photo'",
                            {
                                "highres_link": "Link for full sized photo",
                                "base_url": "A base url that can be use to construct a photo url from its components",
                                "id": "Numeric photo ID",
                                "photo_link": "Link for standard sized photo",
                                "type": "Type of photo. One of \"event\" or \"member\"",
                                "thumb_link": "Link for thumbnail sized photo"
                            }
                        ],
                        "lon": "Approximate group longitude",
                        "join_mode": "Indicator of how new members may be able to join. be one of \"open\", \"approval\" or \"closed\"",
                        "name": "Name of the group",
                        "self": [
                            "Information pertaining to the authenticated member with respect to the group, returned when fields request parameter value includes 'group_self_actions', 'group_self_membership_dues', or 'group_self_status'",
                            {
                                "actions": "list of actions the authenticated member may perform, potentially \"event_create\": the ability to create new events, \"event_draft\": the ability to save new events as drafts, \"role_assign\": the ability to assign member roles, \"edit\": the ability to edit group settings, \"member_approval\": the ability to approve or decline member requests to join, or \"subscription_upgrade\": the ability to upgrade this group's subscription plan",
                                "membership_dues": "Membership dues information associated with hosting group, returned when \"fields\" request parameter value includes \"group_membership_dues\" and group has dues",
                                "status": "Indicates the authorized user's membership with this group.\n\nValue may be one of \"none\", \"pending\", \"pending_payment\", \"active\", or \"blocked\""
                            }
                        ],
                        "id": "Numeric identifier for the group",
                        "urlname": "Alphanumeric urlname identifier for the group",
                        "category": [
                            "Category group belongs to, returned when fields request parameter value includes 'group_category'",
                            {
                                "name": "Display name of the category",
                                "sort_name": "Name used for sorting",
                                "id": "Numeric category id",
                                "shortname": "String identifier of the category",
                                "swagger_type": "GroupCategory"
                            }
                        ],
                        "membership_dues": [
                            "Membership dues information associated with hosting group, returned when fields request parameter value includes 'group_membership_dues'",
                            {
                                "refund_policy": [
                                    "Conditions for refunds",
                                    {
                                        "group_closes": "refund applies when the group closes",
                                        "member_leaves": "refund applies when member leaves the group",
                                        "none": "indicates there is no refund policy",
                                        "member_banned": "refund applies when the member is banned",
                                        "custom": "Boolean indicator of a custom refund policy"
                                    }
                                ],
                                "reasons": "Array of reasons containing one or more of the following values compensate_organizer, cover_costs, encourage_engagement, improve_meetups, other, provide_supplies, reserve_fund",
                                "methods": [
                                    "Methods of payments",
                                    {
                                        "credit_card": "Boolean indicator that credit cards are accepted",
                                        "other": "Boolean indicator that other forms of payment are accepted",
                                        "paypal": "Boolean indicator that Paypal payments are accepted",
                                        "amazon_payments": "Boolean indicator that Amazon Payments are accepted"
                                    }
                                ],
                                "fee": "Numeric fee value",
                                "trial_days": "When present, returns the number of days the group is offering a free trial period for to new members. When not present, this indicates that the group does not offer a trial membership period",
                                "self_payment_required": "Returns true if the authorized user is prevented from participating in the group until a payment is made",
                                "required": "true if dues are required",
                                "swagger_type": "MembershipDues",
                                "fee_desc": "The interval at which dues must be paid. Possible values may include: \"month\", \"year\", \"day\", or \"every other day\"",
                                "currency": "Currency in which the fee is declared",
                                "reasons_other": "An additional reason if specified.",
                                "required_to": "If the dues are required this indicates what they are required for. May be one of 'join' or 'rsvp'"
                            }
                        ],
                        "lat": "Approximate group latitude",
                        "who": "What the group calls its members"
                    }
                ],
                "rsvpable_after_join": "Boolean value indicating whether or not the authenticated member can RSVP\nafter joining the hosting group.\nReturned when the \"fields\" request parameter\nincludes \"rsvpable_after_join\"\nand the authenticated member is _not_ a member of the\ngroup hosting this event",
                "rsvp_rules": [
                    "Information about conditions that allow for member RSVPs, returned when fields request parameter value include 'rsvp_rules'",
                    {
                        "refund_policy": [
                            "The organizer-defined terms for refunds. If this is defined, you must provide the authenticated member a way to access this information before they can RSVP. They will need to agree to these terms before they RSVP",
                            {
                                "policies": "list of one or more of the following. 'no_refunds' if the organizer will not issue refunds', 'member_cancellation' if the organizer offers a refund for member cancellation, 'event_cancellation' if the organizer offers a refund if the event is canceled, 'event_rescheduled' if the organizer offers a refund when the event is rescheduled",
                                "days": "if member_cancellation is present, it's relative to this many days before the event",
                                "notes": "additional refund policy notes"
                            }
                        ],
                        "closed": "Boolean value indicating whether or not RSVPing was explicitly closed for the event.",
                        "open_time": "UTC time that members may begin to RSVP",
                        "waitlisting": "Wait list handling when RSVP limit is reached. Value may be one of 'auto', 'manual' or 'off'",
                        "guest_limit": "Number of guests members may include in their RSVP, 0 or more",
                        "close_time": "UTC time that RSVPs will no longer be accepted, though organizers may close RSVPs earlier"
                    }
                ],
                "visibility": "Event visibility: \"public\", \"public_limited\", or \"members\". Events in private groups that do not expose limited information are visible only to that group's members and should not be made public.",
                "waitlist_count": "Number of members on the waitlist, if one exists",
                "created": "Creation time of the event, in milliseconds since the epoch",
                "plain_text_description": "Plain text version of the event description. Email addresses and photo numbers will be masked for non-members. Returned when \"fields\" request parameter value contains \"plain_text_description\"",
                "how_to_find_us": "Additional information on how to find members at a venue when provided by an organizer, returned when fields request parameter value includes 'how_to_find_us'",
                "swagger_type": "EventSummary",
                "photo_album": [
                    "Information about photo uploads for this event, returned when fields request parameter value includes 'photo_album'",
                    {
                        "photo_count": "Number of photos uploaded",
                        "photo_sample": [
                            "A small collection of photos uploaded for this event",
                            {
                                "highres_link": "Link for full sized photo",
                                "base_url": "A base url that can be use to construct a photo url from its components",
                                "id": "Numeric photo ID",
                                "photo_link": "Link for standard sized photo",
                                "type": "Type of photo. One of \"event\" or \"member\"",
                                "thumb_link": "Link for thumbnail sized photo"
                            }
                        ],
                        "id": "Unique numeric identifier for photo album",
                        "event": [
                            "Event photo album belongs to. This will be absent if the album\nis not associated with an event",
                            {
                                "utc_offset": "The local offset from UTC time, in milliseconds",
                                "name": "Name of event",
                                "id": "Alphanumeric event ID",
                                "time": "UTC start time of the event, in milliseconds since the epoch",
                                "swagger_type": "BasicEvent",
                                "yes_rsvp_count": "Number of yes RSVPs"
                            }
                        ],
                        "title": "Album title",
                        "swagger_type": "PhotoAlbumSummary"
                    }
                ],
                "rsvpable": "Boolean value indicating whether or not the authenticated member can RSVP or join the waitlist when the event is full.\nReturned when the \"fields\" request parameter value\nincludes \"rsvpable\"",
                "rsvp_sample": [
                    "A small collection RSVPs for members attending this event, returned when fields request parameter value includes 'rsvp_sample'",
                    {
                        "member": [
                            "Member who RSVP'd",
                            {
                                "role": "The leadership role of this member within the group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
                                "name": "Name of member",
                                "photo": [
                                    "Member photo, if available.\nMembers who registered via Facebook may not have highres photos",
                                    {
                                        "highres_link": "Link for full sized photo",
                                        "base_url": "A base url that can be use to construct a photo url from its components",
                                        "id": "Numeric photo ID",
                                        "photo_link": "Link for standard sized photo",
                                        "type": "Type of photo. One of \"event\" or \"member\"",
                                        "thumb_link": "Link for thumbnail sized photo"
                                    }
                                ],
                                "self": [
                                    "Represents the authenticated member's relation to member.\nReturned with the \"fields\" request parameter includes \"self\" and\nthe target member is not the authenticated member",
                                    {
                                        "common": [
                                            "Information the authenticated member has in common with this member",
                                            {
                                                "groups": [
                                                    "List of common groups",
                                                    {
                                                        "join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
                                                        "photo_gradient": [
                                                            "Color combination used generate group duotone",
                                                            {
                                                                "dark_color": "Dark color in hexidecimal format",
                                                                "id": "Unique numeric identifier",
                                                                "composite_color": "Composite color in hexidecimal format",
                                                                "light_color": "Light color in hexidecimal format",
                                                                "swagger_type": "Duotone"
                                                            }
                                                        ],
                                                        "name": "Name of the group",
                                                        "key_photo": [
                                                            "Group primary photo",
                                                            {
                                                                "highres_link": "Link for full sized photo",
                                                                "base_url": "A base url that can be use to construct a photo url from its components",
                                                                "id": "Numeric photo ID",
                                                                "photo_link": "Link for standard sized photo",
                                                                "type": "Type of photo. One of \"event\" or \"member\"",
                                                                "thumb_link": "Link for thumbnail sized photo"
                                                            }
                                                        ],
                                                        "id": "Numeric group ID",
                                                        "urlname": "Urlname used to identify the group on meetup.com",
                                                        "group_photo": [
                                                            "Group photo",
                                                            {
                                                                "highres_link": "Link for full sized photo",
                                                                "base_url": "A base url that can be use to construct a photo url from its components",
                                                                "id": "Numeric photo ID",
                                                                "photo_link": "Link for standard sized photo",
                                                                "type": "Type of photo. One of \"event\" or \"member\"",
                                                                "thumb_link": "Link for thumbnail sized photo"
                                                            }
                                                        ],
                                                        "swagger_type": "GroupSummary",
                                                        "who": "What the group calls its members"
                                                    }
                                                ]
                                            }
                                        ],
                                        "actions": "List of actions available for the authenticated member to perform.\nCurrently only \"message\" is supported",
                                        "blocks": "Boolean indication of whether or not the authenticated member blocks this member",
                                        "friends": "Boolean indication of whether or not the authenticated member is a friend of the member",
                                        "swagger_type": "MemberSelf"
                                    }
                                ],
                                "bio": "Intro of member",
                                "id": "Numeric member ID",
                                "title": "Organizer defined title of member. May be absent if not defined",
                                "event_context": [
                                    "Member's context within the event. Only returned in the context of an event",
                                    {
                                        "host": "Boolean indicator for whether this member is a host for the event"
                                    }
                                ],
                                "swagger_type": "AttendanceSummary"
                            }
                        ],
                        "id": "Unique numeric identifier for the RSVP. May be -1 for events scheduled in the future",
                        "updated": "Last modified time of the RSVP, in milliseconds since the epoch",
                        "swagger_type": "RSVPSummary",
                        "created": "Creation time of the RSVP, in milliseconds since the epoch"
                    }
                ],
                "series": [
                    "Returned when the \"fields\" request parameter value includes \"series\" for events that are part of a series of events",
                    {
                        "end_date": "Date when this series ends/ended, in milliseconds since the epoch",
                        "description": "Human displayable description of how often events in this series occur",
                        "id": "Unique numeric identifier for the series",
                        "swagger_type": "RecurrenceSchedule",
                        "weekly": [
                            "Returned for events that are part of a weekly recurring series of events",
                            {
                                "days_of_week": "List of integers 1-7 (Monday-Sunday) of days of week recurrence occurs upon",
                                "end_date": "Date when series ends/ended, in LocalDate (yyyy-MM-dd) format",
                                "interval": "Integer number of weeks between each recurrence"
                            }
                        ],
                        "start_date": "Date when this series begins/began, in milliseconds since the epoch"
                    }
                ],
                "name": "Name of the event",
                "self": [
                    "represents details particular to the authorized user, only present if requested and authenticated member is a member of the hosting group, returned when fields request parameter value includes 'self'",
                    {
                        "pay_status": "The authenticated member's payment status. This may be one of 'none', 'paid', 'partially_paid', 'payment_pending', 'echeck_pending', 'refund_pending', 'partially_refunded', 'refunded'",
                        "role": "The authenticated member's role in within the group, if any. This may be one of: Organizer, Assistant Organizer, Event Organizer, etc.",
                        "actions": "List of actions the authenticated member may perform, potentially one or more of the following\n\n\"announce\" to announce the event to the group's members\n\n\"attendance\" to view or take attendance for the event\n\n\"comment\" the ability to post a comment or reply\n\n\"payments\" the ability to mark members as paid if the event is ticketed\n\n\"publish\" to publish a draft event\n\n\"edit\" to edit the event information\n\n\"edit_hosts\" to edit the hosts for the event\n\n\"delete\" to delete the event\n\n\"rsvp\" to RSVP yes or no to the event\n\n\"wait\" to get on the waiting list (using the same RSVP methods).\n\n\"dues\" if an organizer requires membership dues to RSVP and the authorized\n member has not paid theirs\n\n\"upload_photo\" the ability to upload a photo for an event",
                        "rsvp": [
                            "Member's RSVP, if any",
                            {
                                "answers": [
                                    "List of answers to event survey questions asked when the member RSVP'd in the order asked, only available to organizers and assistant organizers",
                                    {
                                        "question": "Question text",
                                        "answer": "Answer text for question",
                                        "updated": "The last time this answer was updated",
                                        "question_id": "Unique number identifier for question",
                                        "swagger_type": "SurveyQuestionAnswer"
                                    }
                                ],
                                "guests": "Number of guests the RSVP'd member will be bringing",
                                "response": "May be \"yes\" or \"no\".\n\nIn cases where an event is over capacity and the member has shown an intent to attend,\nresponse may be \"waitlist\" if the event has a waitlist.\n\nIn cases of ticketed events, this may be \"yes_pending_payment\"\nfor a \"yes\" response for a ticketed event with an unprocessed payment"
                            }
                        ],
                        "swagger_type": "EventSelf"
                    }
                ],
                "time": "UTC start time of the event, in milliseconds since the epoch",
                "updated": "Last modified time for the event in milliseconds since the epoch",
                "status": "\"cancelled\", \"upcoming\", \"past\", \"proposed\", \"suggested\", or \"draft\""
            },
            "tag": null,
            "responseModel": "GetFindEvents"
        },
        "GetFindGroups": {
            "version": "3",
            "name": "GetFindGroups",
            "httpMethod": "GET",
            "parameters": {
                "zip": {
                    "location": "query",
                    "required": false,
                    "description": "Zipcode of location to limit search to"
                },
                "country": {
                    "location": "query",
                    "required": false,
                    "description": "A valid two character country code, defaults to US"
                },
                "upcoming_events": {
                    "location": "query",
                    "required": false,
                    "description": "If true, filters text and category based searches on groups that have upcoming events. Defaults to false"
                },
                "lon": {
                    "location": "query",
                    "required": false,
                    "description": "Approximate longitude"
                },
                "filter": {
                    "location": "query",
                    "required": false,
                    "description": "Determines which groups are returned. If 'all' (default), the text and category parameters are applied. If 'friends', groups your friends are in are returned. The value of this parameter may be one of all, friends"
                },
                "fallback_suggestions": {
                    "location": "query",
                    "required": false,
                    "description": "boolean indicator of whether or not to return a list of curated suggestions for groups if we can't find groups matching your criteria"
                },
                "location": {
                    "location": "query",
                    "required": false,
                    "description": "Raw text location query"
                },
                "text": {
                    "location": "query",
                    "required": false,
                    "description": "Raw full text search query"
                },
                "topic_id": {
                    "location": "query",
                    "required": false,
                    "description": "Comma-delimited list of numeric topic ids"
                },
                "radius": {
                    "location": "query",
                    "required": false,
                    "description": "Radius in miles. May be 0.0-100.0, 'global' or 'smart', a dynamic radius based on the number of active groups in the area. Defaults to member's preferred radius"
                },
                "fields": {
                    "location": "query",
                    "required": false,
                    "description": "Request that additional fields (separated by commas) be included in the output."
                },
                "category": {
                    "location": "query",
                    "required": false,
                    "description": "Comma-delimited list of numeric category ids"
                },
                "self_groups": {
                    "location": "query",
                    "required": false,
                    "description": "set to 'include' or 'exclude' Meetups the authorized member belongs to; default is 'include'"
                },
                "lat": {
                    "location": "query",
                    "required": false,
                    "description": "Approximate latitude"
                },
                "distance": {
                    "location": "query",
                    "required": false,
                    "description": "Order by distance"
                },
                "newest": {
                    "location": "query",
                    "required": false,
                    "description": "Order by date group was founded"
                },
                "most_active": {
                    "location": "query",
                    "required": false,
                    "description": "Order by group with most active members"
                },
                "members": {
                    "location": "query",
                    "required": false,
                    "description": "Order by number of members"
                },
                "page": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "offset": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "desc": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "order": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "only": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "omit": {
                    "location": "query",
                    "required": false,
                    "description": null
                }
            },
            "summary": "Text, location, category and friend-based group searches",
            "uri": "/find/groups",
            "notes": "All parameters are optional. If you do not supply some explicit form of location, the results will be based on your registered Meetup profile location, falling back on your IP's geographic location.\n\nIf we can't find find Meetup groups matching your criteria you may optionally request that a small set of suggestions are returned in their place.\nTo do so, send a request parameter named `fallback_suggestions` set to `true`. You can infer that a list of Meetup groups return are fallback suggestions when\nthe `X-Total-Count` pagination response header has a `0` value.\n\nSee the 'filter' parameter for more information controlling the results returned. Ordering does not apply to friend-filtered queries.",
            "response": {
                "country": "Country of the group",
                "pending_members": "Number representing the count of members pending organizer approval to join. Returned only when requested in the fields request parameter and the authenticated member has permission to approve members",
                "city": "City of the group",
                "similar_groups": [
                    "Optional fields parameter. Returns up to 5 groups similar to this groups, best suited for the authenticated member when a single group is queried for. Note: this field is being deprecated in favor of making a separate request to /:urlname/similar_groups",
                    {
                        "join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
                        "name": "Name of the group",
                        "lon": "Longitude",
                        "id": "Id of the group",
                        "urlname": "Urlname used to identify the group on meetup.com",
                        "photos": [
                            "Optional fields parameter. A small set of photos from the group",
                            {
                                "highres_link": "Link for full sized photo",
                                "base_url": "A base url that can be use to construct a photo url from its components",
                                "id": "Numeric photo ID",
                                "photo_link": "Link for standard sized photo",
                                "type": "Type of photo. One of \"event\" or \"member\"",
                                "thumb_link": "Link for thumbnail sized photo"
                            }
                        ],
                        "lat": "Latitude",
                        "who": "What this group calls it's members"
                    }
                ],
                "timezone": "This represents the universal timezone identifier for the group",
                "link": "Link to group on meetup.com",
                "description": "Short description of group",
                "lon": "Longitude",
                "welcome_message": "Optional fields parameter. Returns the Group's default welcome message if the authenticated member is the organizer of the group",
                "is_simplehtml": "Optional field, 'true' when the group description has been saved in a simplified HTML format, 'false' otherwise.",
                "group_photo": [
                    "Group photo",
                    {
                        "highres_link": "Link for full sized photo",
                        "base_url": "A base url that can be use to construct a photo url from its components",
                        "id": "Numeric photo ID",
                        "photo_link": "Link for standard sized photo",
                        "type": "Type of photo. One of \"event\" or \"member\"",
                        "thumb_link": "Link for thumbnail sized photo"
                    }
                ],
                "photos": [
                    "A small set of photos from the group",
                    {
                        "highres_link": "Link for full sized photo",
                        "base_url": "A base url that can be use to construct a photo url from its components",
                        "id": "Numeric photo ID",
                        "photo_link": "Link for standard sized photo",
                        "type": "Type of photo. One of \"event\" or \"member\"",
                        "thumb_link": "Link for thumbnail sized photo"
                    }
                ],
                "short_link": "Optional field, a shorted URL for the group",
                "score": "A numeric value representing how the relevancy of the group in this search context",
                "join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
                "approved": "Boolean indicator for whether this Group has been approved or not.\nNew Groups are generally approved (or removed)\nsoon after creation.\nReturned when the \"fields\" request parameter value includes\n\"approved\"",
                "contributions": [
                    "Optional field containing the contribution details of the group",
                    {
                        "thanks": "The 'thank you' message to be given when a contribution is made",
                        "reason": "The reason a member might consider contributing",
                        "potential": "Boolean stating that potential contributions are enabled for the group",
                        "enabled": "Boolean stating if contributions are enabled for the group"
                    }
                ],
                "members": "Number of Meetup members in this group",
                "state": "State of the group, if in US or Canada",
                "simple_html_description": "Description of the group, in simple HTML source format. If this group's description was saved in simple HTML format, the description field will be an HTML translation of this source. Returned when the \"fields\" request parameter value contains \"simple_html_description\"",
                "id": "Numeric group ID",
                "urlname": "Urlname used to identify the group on meetup.com",
                "membership_dues": [
                    "Optional field, returns membership dues for group if any",
                    {
                        "refund_policy": [
                            "Conditions for refunds",
                            {
                                "group_closes": "refund applies when the group closes",
                                "member_leaves": "refund applies when member leaves the group",
                                "none": "indicates there is no refund policy",
                                "member_banned": "refund applies when the member is banned",
                                "custom": "Boolean indicator of a custom refund policy"
                            }
                        ],
                        "reasons": "Array of reasons containing one or more of the following values compensate_organizer, cover_costs, encourage_engagement, improve_meetups, other, provide_supplies, reserve_fund",
                        "methods": [
                            "Methods of payments",
                            {
                                "credit_card": "Boolean indicator that credit cards are accepted",
                                "other": "Boolean indicator that other forms of payment are accepted",
                                "paypal": "Boolean indicator that Paypal payments are accepted",
                                "amazon_payments": "Boolean indicator that Amazon Payments are accepted"
                            }
                        ],
                        "fee": "Numeric fee value",
                        "trial_days": "When present, returns the number of days the group is offering a free trial period for to new members. When not present, this indicates that the group does not offer a trial membership period",
                        "self_payment_required": "Returns true if the authorized user is prevented from participating in the group until a payment is made",
                        "required": "true if dues are required",
                        "swagger_type": "MembershipDues",
                        "fee_desc": "The interval at which dues must be paid. Possible values may include: \"month\", \"year\", \"day\", or \"every other day\"",
                        "currency": "Currency in which the fee is declared",
                        "reasons_other": "An additional reason if specified.",
                        "required_to": "If the dues are required this indicates what they are required for. May be one of 'join' or 'rsvp'"
                    }
                ],
                "lat": "Latitude",
                "next_event": [
                    "The current ongoing or next upcoming event, if one is scheduled",
                    {
                        "utc_offset": "The local offset from UTC time, in milliseconds",
                        "name": "Name of event",
                        "id": "Alphanumeric event ID",
                        "time": "UTC start time of the event, in milliseconds since the epoch",
                        "swagger_type": "BasicEvent",
                        "yes_rsvp_count": "Number of yes RSVPs"
                    }
                ],
                "list_mode": "Optional field representing the policy for who can post the group mailing list. Returned when the \"fields\" request parameter value contains \"list_mode\". Value may be one of \"moderated\", \"off\", \"open\", or \"orgs_only\"",
                "photo_gradient": [
                    "Color combination used generate group duotone",
                    {
                        "dark_color": "Dark color in hexidecimal format",
                        "id": "Unique numeric identifier",
                        "composite_color": "Composite color in hexidecimal format",
                        "light_color": "Light color in hexidecimal format",
                        "swagger_type": "Duotone"
                    }
                ],
                "ga_code": "Optional field return the Google Analytics code for the group. Only members that can edit group settings can see this",
                "localized_country_name": "Name of country of the group",
                "join_info": [
                    "Optional field, lists any questions requested when joining and required fields",
                    {
                        "photo_req": "true if required, false otherwise",
                        "questions": [
                            "List of profile questions organizer would like new members to answer prior to joining",
                            {
                                "question": "The text of the question",
                                "id": "Unique numeric identifier for the question"
                            }
                        ],
                        "questions_req": "true if required, false otherwise",
                        "swagger_type": "GroupJoinInfo"
                    }
                ],
                "visibility": "Who can see this group. One of members, public or public_limited",
                "topics": [
                    "Optional fields parameter. Returns the group's topics",
                    {
                        "name": "Display name of the topic",
                        "urlkey": "The unique keyword used to identify this topic",
                        "id": "Numeric topic id",
                        "lang": "Language topic originates from",
                        "swagger_type": "TopicSummary"
                    }
                ],
                "created": "Time the group was created in milliseconds since the epoch",
                "key_photo": [
                    "Group primary photo",
                    {
                        "highres_link": "Link for full sized photo",
                        "base_url": "A base url that can be use to construct a photo url from its components",
                        "id": "Numeric photo ID",
                        "photo_link": "Link for standard sized photo",
                        "type": "Type of photo. One of \"event\" or \"member\"",
                        "thumb_link": "Link for thumbnail sized photo"
                    }
                ],
                "plain_text_description": "Description of the group, in plain text format. Returned when then \"fields\" request parameter value contains \"plain_text_description\"",
                "list_addr": "Optional field returning list address prefix. List mail will be {list_addr}-list@meetup.com. Announce email will be {list_addr}-announce@meetup.com. You must be a member of the group to see this",
                "organizer": [
                    "Group's primary organizer",
                    {
                        "name": "Name of member",
                        "photo": [
                            "Organizer photo, where defined",
                            {
                                "highres_link": "Link for full sized photo",
                                "base_url": "A base url that can be use to construct a photo url from its components",
                                "id": "Numeric photo ID",
                                "photo_link": "Link for standard sized photo",
                                "type": "Type of photo. One of \"event\" or \"member\"",
                                "thumb_link": "Link for thumbnail sized photo"
                            }
                        ],
                        "bio": "Bio of member",
                        "id": "Numeric member ID",
                        "swagger_type": "SimpleMember"
                    }
                ],
                "leads": "Optional field representing the number of members on this group's leadership team. Returned when the \"fields\" request parameter value contains \"leads\"",
                "last_event": [
                    "Optional field representing the last hosted event, if the group has one. Returned when the \"fields\" request parameter value contains \"last_event\"",
                    {
                        "utc_offset": "The local offset from UTC time, in milliseconds",
                        "name": "Name of event",
                        "id": "Alphanumeric event ID",
                        "time": "UTC start time of the event, in milliseconds since the epoch",
                        "swagger_type": "BasicEvent",
                        "yes_rsvp_count": "Number of yes RSVPs"
                    }
                ],
                "name": "Name of the group",
                "member_cap": "Number representing the maximum number of active members this group can have if capped. Returned only when requested in the fields request parameter and the authenticated member has permission to approve members",
                "self": [
                    "Optional field, contains details specific to the authorized user in this Meetup Group",
                    {
                        "visited": "Member's last visit to the group site, in milliseconds since the epoch",
                        "role": "Member's role in group, if any: Organizer, Assistant Organizer, Event Organizer, etc.",
                        "membership_dues": [
                            "Member's membership dues if the group has membership dues",
                            {
                                "paid_until": "For groups with recurring billing periods, this returns the time in milliseconds since the epoch that the member's next payment is due",
                                "total_amount": "Total amount paid",
                                "cancelled": "For groups with recurring billing periods, this Boolean field indicates that membership dues were cancelled",
                                "transaction_time": "Time the transaction was made in milliseconds since the epoch",
                                "exempt": "For groups with recurring billing periods, this Boolean field indicates that the member is exempt from payment.",
                                "trial": [
                                    "If the group offers a trial membership, this indicates information for unpaid members.",
                                    {
                                        "days": "The total number of trial days offered by the group",
                                        "days_remaining": "The number of days remaining in the member's trial period",
                                        "expired": "Boolean indicator of whether or not the unpaid subscription has expired or not"
                                    }
                                ],
                                "period_status": "For groups with recurring billing periods, this returns one of the following values grace paid pending unpaid"
                            }
                        ],
                        "actions": "List of actions the authenticated member may perform, potentially \"broadcast_message\": the ability to broadcast messages to group members via the \"announce\" mailing list, \"event_create\": the ability to create new events, \"event_draft\": the ability to save new events as drafts, \"role_assign\": the ability to assign member roles, \"edit\": the ability to edit group settings, \"member_approval\": the ability to approve or decline member requests to join, or \"subscription_upgrade\": the ability to upgrade this group's subscription plan",
                        "status": "Indicates the authorized user's membership with this group. Value may be one of \"none\", \"pending\", \"pending_payment\", \"active\", or \"blocked\""
                    }
                ],
                "category": [
                    "The primary category of the group, if the group has one",
                    {
                        "name": "Display name of the category",
                        "sort_name": "Name used for sorting",
                        "id": "Numeric category id",
                        "shortname": "String identifier of the category",
                        "swagger_type": "GroupCategory"
                    }
                ],
                "who": "What the group calls its members"
            },
            "tag": null,
            "responseModel": "GetFindGroups"
        },
        "GetFindLocations": {
            "version": "3",
            "name": "GetFindLocations",
            "httpMethod": "GET",
            "parameters": {
                "lon": {
                    "location": "query",
                    "required": false,
                    "description": "Search for locations based on location longitude.\nMust be provided with \"lat\""
                },
                "page": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "offset": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "lat": {
                    "location": "query",
                    "required": false,
                    "description": "Search for locations based on location latitude.\nMust be provided with \"lon\""
                },
                "query": {
                    "location": "query",
                    "required": false,
                    "description": "Search for locations based on city name or zip code"
                },
                "desc": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "order": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "only": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "omit": {
                    "location": "query",
                    "required": false,
                    "description": null
                }
            },
            "summary": "Provides a query interface for finding known locations",
            "uri": "/find/locations",
            "notes": "This endpoint uses HTTP [Link header based pagination](/meetup_api/docs/#v3_json).",
            "response": {
                "zip": "The location's zip code. For locations in countries without zip codes, a placeholder will be returned",
                "country": "Two character country code",
                "localized_country_name": "Localized name of country based on request's language information",
                "city": "Name of city",
                "lon": "Approximate location longitude",
                "state": "Enclosing location state, if the location's country declares one",
                "name_string": "The full name of the location as preformatted string",
                "swagger_type": "Location",
                "lat": "Approximate location latitude"
            },
            "tag": null,
            "responseModel": "GetFindLocations"
        },
        "GetFindMembers": {
            "version": "3",
            "name": "GetFindMembers",
            "httpMethod": "GET",
            "parameters": {
                "urlname": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "page": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "fields": {
                    "location": "query",
                    "required": false,
                    "description": "A comma-delimited list of optional fields to append to the response"
                },
                "query": {
                    "location": "query",
                    "required": false,
                    "description": "The name to search for"
                },
                "order": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "name": {
                    "location": "query",
                    "required": false,
                    "description": "Orded by the name of the member"
                },
                "closest_match": {
                    "location": "query",
                    "required": false,
                    "description": "Ordered by closest match to the provided query"
                },
                "offset": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "desc": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "only": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "omit": {
                    "location": "query",
                    "required": false,
                    "description": null
                }
            },
            "summary": "Find group member profiles by name.\nMember's who very recently joined or left the group may not be immediately searchable",
            "uri": "/find/{urlname}/members",
            "notes": "A valid __:urlname__ path parameter is required\n\nThis endpoint uses HTTP [Link header based pagination](/meetup_api/docs/#v3_json).",
            "response": {
                "birthday": [
                    "Returned only when the fields request parameter value includes 'birthday'\nand only for the authenticated member when defined",
                    {
                        "month": "Numeric month member was born. May be absent if not defined",
                        "year": "Year member was born",
                        "day": "Numeric day member was born. May be absent if not defined"
                    }
                ],
                "country": "Country code associated with Member's location",
                "localized_country_name": "Name of country associated with Member's location",
                "gender": "Returned only when the fields request parameter value includes \"gender\"\nand only for the authenticated member.\nValue may be one of \"female\", \"male\", \"none\", or \"other\".\nThis field may be absent where gender is not defined",
                "city": "City associated with Member's location",
                "joined": "Time member joined, represented as milliseconds since the epoch",
                "photo": [
                    "Member photo. May be absent if member has not chosen one.\nIn group contexts, the Member's Group profile photo will be returned.",
                    {
                        "highres_link": "Link for full sized photo",
                        "base_url": "A base url that can be use to construct a photo url from its components",
                        "id": "Numeric photo ID",
                        "photo_link": "Link for standard sized photo",
                        "type": "Type of photo. One of \"event\" or \"member\"",
                        "thumb_link": "Link for thumbnail sized photo"
                    }
                ],
                "bio": "Member bio. When profile does not belong to the authenticated member, this may be omitted if member opted to hide their bio from others",
                "privacy": [
                    "Member's privacy preferences\nReturned only when the \"fields\" request parameter value includes \"privacy\"",
                    {
                        "groups": "may be 'hidden' or 'visible",
                        "bio": "may be 'hidden' or 'visible'",
                        "topics": "may be 'hidden' or 'visible'",
                        "swagger_type": "MemberPrivacy",
                        "facebook": "may be 'hidden' of 'visible'.\nIf absent, the member has not connected their Facebook account to Meetup"
                    }
                ],
                "lon": "Geographic longitude associated with Member's location",
                "swagger_type": "Profile",
                "other_services": [
                    "An object whose key's are the names of associated external\nnetworks and values are identities within those networks.\nThe keys may be one of facebook, flickr, linkedin, tumblr or twitter.\nReturned only when \"fields\" request parameter value\nincludes \"other_services\"",
                    {
                        "identifier": "A unique string identifier",
                        "url": "A url for this identity. May be the same as identifier in some cases",
                        "swagger_type": "SocialNetwork"
                    }
                ],
                "group_profile": [
                    "Meetup Group profile information.\nThis field is only returned when profile is requested in group contexts",
                    {
                        "role": "The leadership role of this member within the Group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
                        "created": "The time this member joined the Group, represented as milliseconds since the epoch",
                        "intro": "Member intro, may be omitted if member opted to hide their intro from other members",
                        "visited": "The last time this member visited the Group, represented as milliseconds since the epoch",
                        "answers": [
                            "Array of answers to Group Profile questions",
                            {
                                "question": "Question text",
                                "answer": "Answer text",
                                "question_id": "Unique numeric question identifier"
                            }
                        ],
                        "link": "Member profile link, provides a link to the members chapter profile",
                        "title": "Organizer defined title of member. May be absent if not defined",
                        "updated": "The last time this member edited their Group profile, represented as milliseconds since the epoch",
                        "swagger_type": "GroupProfile",
                        "status": "Membership status in this Group.\nValue may be one of\nactive, blocked, pending, pending_payment or none",
                        "group": [
                            "The group associated with this membership",
                            {
                                "join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
                                "photo_gradient": [
                                    "Color combination used generate group duotone",
                                    {
                                        "dark_color": "Dark color in hexidecimal format",
                                        "id": "Unique numeric identifier",
                                        "composite_color": "Composite color in hexidecimal format",
                                        "light_color": "Light color in hexidecimal format",
                                        "swagger_type": "Duotone"
                                    }
                                ],
                                "name": "Name of the group",
                                "key_photo": [
                                    "Group primary photo",
                                    {
                                        "highres_link": "Link for full sized photo",
                                        "base_url": "A base url that can be use to construct a photo url from its components",
                                        "id": "Numeric photo ID",
                                        "photo_link": "Link for standard sized photo",
                                        "type": "Type of photo. One of \"event\" or \"member\"",
                                        "thumb_link": "Link for thumbnail sized photo"
                                    }
                                ],
                                "id": "Numeric group ID",
                                "urlname": "Urlname used to identify the group on meetup.com",
                                "group_photo": [
                                    "Group photo",
                                    {
                                        "highres_link": "Link for full sized photo",
                                        "base_url": "A base url that can be use to construct a photo url from its components",
                                        "id": "Numeric photo ID",
                                        "photo_link": "Link for standard sized photo",
                                        "type": "Type of photo. One of \"event\" or \"member\"",
                                        "thumb_link": "Link for thumbnail sized photo"
                                    }
                                ],
                                "swagger_type": "GroupSummary",
                                "who": "What the group calls its members"
                            }
                        ]
                    }
                ],
                "name": "Display name for the member",
                "self": [
                    "Represents the authenticated member's relation to member.\nReturned when \"fields\" request parameter value includes \"self\" and\nthe target member is not the authenticated member",
                    {
                        "common": [
                            "Information the authenticated member has in common with this member",
                            {
                                "groups": [
                                    "List of common groups",
                                    {
                                        "join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
                                        "photo_gradient": [
                                            "Color combination used generate group duotone",
                                            {
                                                "dark_color": "Dark color in hexidecimal format",
                                                "id": "Unique numeric identifier",
                                                "composite_color": "Composite color in hexidecimal format",
                                                "light_color": "Light color in hexidecimal format",
                                                "swagger_type": "Duotone"
                                            }
                                        ],
                                        "name": "Name of the group",
                                        "key_photo": [
                                            "Group primary photo",
                                            {
                                                "highres_link": "Link for full sized photo",
                                                "base_url": "A base url that can be use to construct a photo url from its components",
                                                "id": "Numeric photo ID",
                                                "photo_link": "Link for standard sized photo",
                                                "type": "Type of photo. One of \"event\" or \"member\"",
                                                "thumb_link": "Link for thumbnail sized photo"
                                            }
                                        ],
                                        "id": "Numeric group ID",
                                        "urlname": "Urlname used to identify the group on meetup.com",
                                        "group_photo": [
                                            "Group photo",
                                            {
                                                "highres_link": "Link for full sized photo",
                                                "base_url": "A base url that can be use to construct a photo url from its components",
                                                "id": "Numeric photo ID",
                                                "photo_link": "Link for standard sized photo",
                                                "type": "Type of photo. One of \"event\" or \"member\"",
                                                "thumb_link": "Link for thumbnail sized photo"
                                            }
                                        ],
                                        "swagger_type": "GroupSummary",
                                        "who": "What the group calls its members"
                                    }
                                ]
                            }
                        ],
                        "actions": "List of actions available for the authenticated member to perform.\nCurrently only \"message\" is supported",
                        "blocks": "Boolean indication of whether or not the authenticated member blocks this member",
                        "friends": "Boolean indication of whether or not the authenticated member is a friend of the member",
                        "swagger_type": "MemberSelf"
                    }
                ],
                "state": "State associated with Member's location, where available",
                "id": "Unique numeric identifier for the member",
                "lat": "Geographic latitude associated with Member's location",
                "messaging_pref": "The member's preference for being contacted from other members on the platform.\nReturned only when the fields request parameter value includes \"messaging_pref\".\nMay be one of the following: \"all_members\", \"groups_only\", or \"orgs_only\""
            },
            "tag": null,
            "responseModel": "GetFindMembers"
        },
        "GetFindTopicCategories": {
            "version": "3",
            "name": "GetFindTopicCategories",
            "httpMethod": "GET",
            "parameters": {
                "lon": {
                    "location": "query",
                    "required": false,
                    "description": "An optional approximate longitude to center a request for \"best_topics\". When not provided, lon associated with member is used"
                },
                "fields": {
                    "location": "query",
                    "required": false,
                    "description": "A comma-limited list of optional fields to append to the response"
                },
                "radius": {
                    "location": "query",
                    "required": false,
                    "description": "An radius (in miles) to center a request for \"best_topics\". When not provided, the members default alert radius is used"
                },
                "lat": {
                    "location": "query",
                    "required": false,
                    "description": "An optional approximate latitude to center a request for \"best_topics\". When not provided, lat associated with member is used"
                },
                "page": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "offset": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "desc": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "order": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "only": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "omit": {
                    "location": "query",
                    "required": false,
                    "description": null
                }
            },
            "summary": "Returns a list high level topic categories",
            "uri": "/find/topic_categories",
            "notes": "No parameters are required. Authenticated members may request \"best_topics\"\nusing the \"fields\" request parameter. By default these topics will selected\nbased on groups in the member's location. Alternatively you may supply a \"lat\",\n\"lon\", and \"radius\" to center these topic suggestions",
            "response": {
                "best_topics": [
                    "Represents the best topic matches for this category, returned when the \"fields\"\nrequest parameter value includes \"best_topics\"",
                    {
                        "name": "Display name of the topic",
                        "urlkey": "The unique keyword used to identify this topic",
                        "id": "Numeric topic id",
                        "lang": "Language topic originates from",
                        "swagger_type": "TopicSummary"
                    }
                ],
                "name": "Display name of the topic-category",
                "photo": [
                    "Photo representing this category",
                    {
                        "highres_link": "Link for full sized photo",
                        "base_url": "A base url that can be use to construct a photo url from its components",
                        "id": "Numeric photo ID",
                        "photo_link": "Link for standard sized photo",
                        "type": "Type of photo. One of \"event\" or \"member\"",
                        "thumb_link": "Link for thumbnail sized photo"
                    }
                ],
                "sort_name": "Name used for sorting",
                "category_ids": "List of numeric category ids associated with this topic category",
                "id": "Numeric topic-category id",
                "shortname": "Unique string identifier for this category",
                "swagger_type": "TopicCategory"
            },
            "tag": null,
            "responseModel": "GetFindTopicCategories"
        },
        "GetFindTopics": {
            "version": "3",
            "name": "GetFindTopics",
            "httpMethod": "GET",
            "parameters": {
                "query": {
                    "location": "query",
                    "required": false,
                    "description": "The text to topic text search for"
                },
                "page": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "offset": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "desc": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "order": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "only": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "omit": {
                    "location": "query",
                    "required": false,
                    "description": null
                }
            },
            "summary": "Find topics by name",
            "uri": "/find/topics",
            "notes": "This endpoint uses HTTP [Link header based pagination](/meetup_api/docs/#v3_json).",
            "response": {
                "urlkey": "The unique keyword used to identify this topic",
                "group_count": "The number of groups using this topic",
                "name": "Display name of the topic",
                "description": "The description of the topic",
                "id": "Numeric topic id",
                "member_count": "The number of members interested in this topic",
                "lang": "Language topic originates from",
                "swagger_type": "Topic"
            },
            "tag": null,
            "responseModel": "GetFindTopics"
        },
        "GetFindVenues": {
            "version": "3",
            "name": "GetFindVenues",
            "httpMethod": "GET",
            "parameters": {
                "zip": {
                    "location": "query",
                    "required": false,
                    "description": "Zipcode of location to limit search to"
                },
                "text": {
                    "location": "query",
                    "required": false,
                    "description": "Raw full text search query"
                },
                "country": {
                    "location": "query",
                    "required": false,
                    "description": "A valid two charater country code, desfaults to US"
                },
                "location": {
                    "location": "query",
                    "required": false,
                    "description": "Raw text location query"
                },
                "lon": {
                    "location": "query",
                    "required": false,
                    "description": "Approximate longitude"
                },
                "radius": {
                    "location": "query",
                    "required": false,
                    "description": "Radius in miles. Defaults to 25.0"
                },
                "fields": {
                    "location": "query",
                    "required": false,
                    "description": "Comma-delimited list of optional fields to append to the response"
                },
                "lat": {
                    "location": "query",
                    "required": false,
                    "description": "Approximate latitude"
                },
                "desc": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "rating": {
                    "location": "query",
                    "required": false,
                    "description": "Order by member rating"
                },
                "distance": {
                    "location": "query",
                    "required": false,
                    "description": "Order by distance for search location (default)"
                },
                "rating_count": {
                    "location": "query",
                    "required": false,
                    "description": "Order by number of member ratings"
                },
                "page": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "offset": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "order": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "only": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "omit": {
                    "location": "query",
                    "required": false,
                    "description": null
                }
            },
            "summary": "Returns list of venues based on location",
            "uri": "/find/venues",
            "notes": "\nYou can provide location in the form of zip+country,\nlat+lon or a raw location search. If you do not supply\nsome explicit form of location information, the results\nwill be based on the authenticated Member's profile location,\nfalling back on the request's IP' geographic location.\n\nYou can expand the search radius, which defaults to\n25.0 miles to search a wider area.\n         ",
            "response": {
                "zip": "If available, the venue's ZIP code",
                "country": "If available, the name of the venue's country code",
                "localized_country_name": "If available, the localized name of the venue's country",
                "visibility": "'private' if this venue is a private home, otherwise 'public'",
                "city": "If available, the name of the venue's city",
                "address_1": "If available, the first address line of the venue",
                "address_2": "If available, the second address line of the venue",
                "address_3": "If available, the third address line of the venue",
                "rating": "The average rating for the venue",
                "lon": "If available, the venue's longitude",
                "rating_count": "The number of times the venue was rated",
                "taglist": "list of string tags associated with the venue. returned when fields=taglist",
                "phone": "If available, the venue's photo number",
                "name": "If available, the venue's name",
                "state": "If available, and the venue's country id is within the US or Canada, the venue's state",
                "id": "Id, of the venue",
                "lat": "If available, the venue's latitude"
            },
            "tag": null,
            "responseModel": "GetFindVenues"
        },
        "GetGroup": {
            "version": "3",
            "name": "GetGroup",
            "httpMethod": "GET",
            "parameters": {
                "urlname": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "fields": {
                    "location": "query",
                    "required": false,
                    "description": "A comma-delimited list of optional fields to append to the response"
                },
                "page": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "offset": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "desc": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "order": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "only": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "omit": {
                    "location": "query",
                    "required": false,
                    "description": null
                }
            },
            "summary": "Fetches a Meetup group by urlname",
            "uri": "/{urlname}",
            "notes": "Only the path parameter :urlname is required",
            "response": {
                "country": "Country of the group",
                "pending_members": "Number representing the count of members pending organizer approval to join. Returned only when requested in the fields request parameter and the authenticated member has permission to approve members",
                "city": "City of the group",
                "similar_groups": [
                    "Optional fields parameter. Returns up to 5 groups similar to this groups, best suited for the authenticated member when a single group is queried for. Note: this field is being deprecated in favor of making a separate request to /:urlname/similar_groups",
                    {
                        "join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
                        "name": "Name of the group",
                        "lon": "Longitude",
                        "id": "Id of the group",
                        "urlname": "Urlname used to identify the group on meetup.com",
                        "photos": [
                            "Optional fields parameter. A small set of photos from the group",
                            {
                                "highres_link": "Link for full sized photo",
                                "base_url": "A base url that can be use to construct a photo url from its components",
                                "id": "Numeric photo ID",
                                "photo_link": "Link for standard sized photo",
                                "type": "Type of photo. One of \"event\" or \"member\"",
                                "thumb_link": "Link for thumbnail sized photo"
                            }
                        ],
                        "lat": "Latitude",
                        "who": "What this group calls it's members"
                    }
                ],
                "timezone": "This represents the universal timezone identifier for the group",
                "link": "Link to group on meetup.com",
                "description": "Short description of group",
                "lon": "Longitude",
                "welcome_message": "Optional fields parameter. Returns the Group's default welcome message if the authenticated member is the organizer of the group",
                "is_simplehtml": "Optional field, 'true' when the group description has been saved in a simplified HTML format, 'false' otherwise.",
                "group_photo": [
                    "Group photo",
                    {
                        "highres_link": "Link for full sized photo",
                        "base_url": "A base url that can be use to construct a photo url from its components",
                        "id": "Numeric photo ID",
                        "photo_link": "Link for standard sized photo",
                        "type": "Type of photo. One of \"event\" or \"member\"",
                        "thumb_link": "Link for thumbnail sized photo"
                    }
                ],
                "photos": [
                    "A small set of photos from the group",
                    {
                        "highres_link": "Link for full sized photo",
                        "base_url": "A base url that can be use to construct a photo url from its components",
                        "id": "Numeric photo ID",
                        "photo_link": "Link for standard sized photo",
                        "type": "Type of photo. One of \"event\" or \"member\"",
                        "thumb_link": "Link for thumbnail sized photo"
                    }
                ],
                "short_link": "Optional field, a shorted URL for the group",
                "event_sample": [
                    "A small sampling of recent past events with photos.\nReturned when the \"fields\" request parameter\nvalue contains \"event_sample\"\n and the group's \"visibility\" setting permits it",
                    {
                        "utc_offset": "The local offset from UTC time, in milliseconds",
                        "rsvp_limit": "The number of \"yes\" RSVPS an event has capacity for",
                        "venue": [
                            "The event venue, present only if selected and not hidden by an organizer",
                            {
                                "zip": "ZIP code if, venue is in US or Canada",
                                "country": "Country code of venue",
                                "localized_country_name": "The localized name of the venue's country",
                                "city": "City of venue",
                                "address_1": "Line 1 of venue address",
                                "address_2": "Line 2 of venue address",
                                "address_3": "Line 3 of venue address",
                                "lon": "Approximate longitude",
                                "phone": "Phone number of venue",
                                "name": "Venue name",
                                "state": "State of venue where available",
                                "id": "Unique numeric venue id",
                                "repinned": "true if the editor of the event altered the original venues pin location, false otherwise",
                                "lat": "Approximate latitude"
                            }
                        ],
                        "survey_questions": [
                            "Contains a list of organizer-defined survey questions intended to be asked of RSVPing members.\nReturned when the \"fields\" request parameter\ncontains \"survey_questions\"",
                            {
                                "question": "Question text",
                                "id": "Numeric question identifier"
                            }
                        ],
                        "waitlist_count": "Number of members on the waitlist, if one exists",
                        "created": "Creation time of the event, in milliseconds since the epoch",
                        "fee": [
                            "Ticketing fee information for events that support payments",
                            {
                                "amount": "Amount of the fee",
                                "accepts": "Acceptable methods of payments may be one of \"paypal\", \"amazon\", \"wepay\", or \"cash\"",
                                "description": "Fee description, typically \"per-person\"",
                                "currency": "Currency accepted for fee",
                                "label": "Label for fee, typically \"Price\"",
                                "required": "Boolean flag indicating if this fee is required to RSVP"
                            }
                        ],
                        "swagger_type": "EventSummary",
                        "yes_rsvp_count": "Number of yes RSVPs including guests",
                        "duration": "Scheduled event duration in milliseconds, if an end time is specified by the organizer. When not present, a default of 3 hours may be assumed by applications",
                        "photo_album": [
                            "Information about photo uploads for this event",
                            {
                                "photo_count": "Number of photos uploaded",
                                "photo_sample": [
                                    "A small collection of photos uploaded for this event",
                                    {
                                        "highres_link": "Link for full sized photo",
                                        "base_url": "A base url that can be use to construct a photo url from its components",
                                        "id": "Numeric photo ID",
                                        "photo_link": "Link for standard sized photo",
                                        "type": "Type of photo. One of \"event\" or \"member\"",
                                        "thumb_link": "Link for thumbnail sized photo"
                                    }
                                ],
                                "id": "Unique numeric identifier for photo album",
                                "event": [
                                    "Event photo album belongs to. This will be absent if the album\nis not associated with an event",
                                    {
                                        "utc_offset": "The local offset from UTC time, in milliseconds",
                                        "name": "Name of event",
                                        "id": "Alphanumeric event ID",
                                        "time": "UTC start time of the event, in milliseconds since the epoch",
                                        "swagger_type": "BasicEvent",
                                        "yes_rsvp_count": "Number of yes RSVPs"
                                    }
                                ],
                                "title": "Album title",
                                "swagger_type": "PhotoAlbumSummary"
                            }
                        ],
                        "rsvp_sample": [
                            "A small collection RSVPs for members attending this event, returned when the \"fields\" request parameter value includes \"rsvp_sample\"",
                            {
                                "member": [
                                    "Member who RSVP'd",
                                    {
                                        "role": "The leadership role of this member within the group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
                                        "name": "Name of member",
                                        "photo": [
                                            "Member photo, if available.\nMembers who registered via Facebook may not have highres photos",
                                            {
                                                "highres_link": "Link for full sized photo",
                                                "base_url": "A base url that can be use to construct a photo url from its components",
                                                "id": "Numeric photo ID",
                                                "photo_link": "Link for standard sized photo",
                                                "type": "Type of photo. One of \"event\" or \"member\"",
                                                "thumb_link": "Link for thumbnail sized photo"
                                            }
                                        ],
                                        "self": [
                                            "Represents the authenticated member's relation to member.\nReturned with the \"fields\" request parameter includes \"self\" and\nthe target member is not the authenticated member",
                                            {
                                                "common": [
                                                    "Information the authenticated member has in common with this member",
                                                    {
                                                        "groups": [
                                                            "List of common groups",
                                                            {
                                                                "join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
                                                                "photo_gradient": [
                                                                    "Color combination used generate group duotone",
                                                                    {
                                                                        "dark_color": "Dark color in hexidecimal format",
                                                                        "id": "Unique numeric identifier",
                                                                        "composite_color": "Composite color in hexidecimal format",
                                                                        "light_color": "Light color in hexidecimal format",
                                                                        "swagger_type": "Duotone"
                                                                    }
                                                                ],
                                                                "name": "Name of the group",
                                                                "key_photo": [
                                                                    "Group primary photo",
                                                                    {
                                                                        "highres_link": "Link for full sized photo",
                                                                        "base_url": "A base url that can be use to construct a photo url from its components",
                                                                        "id": "Numeric photo ID",
                                                                        "photo_link": "Link for standard sized photo",
                                                                        "type": "Type of photo. One of \"event\" or \"member\"",
                                                                        "thumb_link": "Link for thumbnail sized photo"
                                                                    }
                                                                ],
                                                                "id": "Numeric group ID",
                                                                "urlname": "Urlname used to identify the group on meetup.com",
                                                                "group_photo": [
                                                                    "Group photo",
                                                                    {
                                                                        "highres_link": "Link for full sized photo",
                                                                        "base_url": "A base url that can be use to construct a photo url from its components",
                                                                        "id": "Numeric photo ID",
                                                                        "photo_link": "Link for standard sized photo",
                                                                        "type": "Type of photo. One of \"event\" or \"member\"",
                                                                        "thumb_link": "Link for thumbnail sized photo"
                                                                    }
                                                                ],
                                                                "swagger_type": "GroupSummary",
                                                                "who": "What the group calls its members"
                                                            }
                                                        ]
                                                    }
                                                ],
                                                "actions": "List of actions available for the authenticated member to perform.\nCurrently only \"message\" is supported",
                                                "blocks": "Boolean indication of whether or not the authenticated member blocks this member",
                                                "friends": "Boolean indication of whether or not the authenticated member is a friend of the member",
                                                "swagger_type": "MemberSelf"
                                            }
                                        ],
                                        "bio": "Intro of member",
                                        "id": "Numeric member ID",
                                        "title": "Organizer defined title of member. May be absent if not defined",
                                        "event_context": [
                                            "Member's context within the event. Only returned in the context of an event",
                                            {
                                                "host": "Boolean indicator for whether this member is a host for the event"
                                            }
                                        ],
                                        "swagger_type": "AttendanceSummary"
                                    }
                                ],
                                "id": "Unique numeric identifier for the RSVP. May be -1 for events scheduled in the future",
                                "updated": "Last modified time of the RSVP, in milliseconds since the epoch",
                                "swagger_type": "RSVPSummary",
                                "created": "Creation time of the RSVP, in milliseconds since the epoch"
                            }
                        ],
                        "series": [
                            "Returned when the \"fields\" request parameter value includes \"series\" for events that are part of a series of events",
                            {
                                "end_date": "Date when this series ends/ended, in milliseconds since the epoch",
                                "description": "Human displayable description of how often events in this series occur",
                                "id": "Unique numeric identifier for the series",
                                "swagger_type": "RecurrenceSchedule",
                                "weekly": [
                                    "Returned for events that are part of a weekly recurring series of events",
                                    {
                                        "days_of_week": "List of integers 1-7 (Monday-Sunday) of days of week recurrence occurs upon",
                                        "end_date": "Date when series ends/ended, in LocalDate (yyyy-MM-dd) format",
                                        "interval": "Integer number of weeks between each recurrence"
                                    }
                                ],
                                "start_date": "Date when this series begins/began, in milliseconds since the epoch"
                            }
                        ],
                        "name": "Name of the event",
                        "id": "A unique alphanumeric identifier for event",
                        "time": "UTC start time of the event, in milliseconds since the epoch",
                        "updated": "Last modified time for the event in milliseconds since the epoch"
                    }
                ],
                "join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
                "approved": "Boolean indicator for whether this Group has been approved or not.\nNew Groups are generally approved (or removed)\nsoon after creation.\nReturned when the \"fields\" request parameter value includes\n\"approved\"",
                "contributions": [
                    "Optional field containing the contribution details of the group",
                    {
                        "thanks": "The 'thank you' message to be given when a contribution is made",
                        "reason": "The reason a member might consider contributing",
                        "potential": "Boolean stating that potential contributions are enabled for the group",
                        "enabled": "Boolean stating if contributions are enabled for the group"
                    }
                ],
                "members": "Number of Meetup members in this group",
                "state": "State of the group, if in US or Canada",
                "simple_html_description": "Description of the group, in simple HTML source format. If this group's description was saved in simple HTML format, the description field will be an HTML translation of this source. Returned when the \"fields\" request parameter value contains \"simple_html_description\"",
                "id": "Numeric group ID",
                "urlname": "Urlname used to identify the group on meetup.com",
                "membership_dues": [
                    "Optional field, returns membership dues for group if any",
                    {
                        "refund_policy": [
                            "Conditions for refunds",
                            {
                                "group_closes": "refund applies when the group closes",
                                "member_leaves": "refund applies when member leaves the group",
                                "none": "indicates there is no refund policy",
                                "member_banned": "refund applies when the member is banned",
                                "custom": "Boolean indicator of a custom refund policy"
                            }
                        ],
                        "reasons": "Array of reasons containing one or more of the following values compensate_organizer, cover_costs, encourage_engagement, improve_meetups, other, provide_supplies, reserve_fund",
                        "methods": [
                            "Methods of payments",
                            {
                                "credit_card": "Boolean indicator that credit cards are accepted",
                                "other": "Boolean indicator that other forms of payment are accepted",
                                "paypal": "Boolean indicator that Paypal payments are accepted",
                                "amazon_payments": "Boolean indicator that Amazon Payments are accepted"
                            }
                        ],
                        "fee": "Numeric fee value",
                        "trial_days": "When present, returns the number of days the group is offering a free trial period for to new members. When not present, this indicates that the group does not offer a trial membership period",
                        "self_payment_required": "Returns true if the authorized user is prevented from participating in the group until a payment is made",
                        "required": "true if dues are required",
                        "swagger_type": "MembershipDues",
                        "fee_desc": "The interval at which dues must be paid. Possible values may include: \"month\", \"year\", \"day\", or \"every other day\"",
                        "currency": "Currency in which the fee is declared",
                        "reasons_other": "An additional reason if specified.",
                        "required_to": "If the dues are required this indicates what they are required for. May be one of 'join' or 'rsvp'"
                    }
                ],
                "lat": "Latitude",
                "next_event": [
                    "The current ongoing or next upcoming event, if one is scheduled",
                    {
                        "utc_offset": "The local offset from UTC time, in milliseconds",
                        "name": "Name of event",
                        "id": "Alphanumeric event ID",
                        "time": "UTC start time of the event, in milliseconds since the epoch",
                        "swagger_type": "BasicEvent",
                        "yes_rsvp_count": "Number of yes RSVPs"
                    }
                ],
                "list_mode": "Optional field representing the policy for who can post the group mailing list. Returned when the \"fields\" request parameter value contains \"list_mode\". Value may be one of \"moderated\", \"off\", \"open\", or \"orgs_only\"",
                "photo_gradient": [
                    "Color combination used generate group duotone",
                    {
                        "dark_color": "Dark color in hexidecimal format",
                        "id": "Unique numeric identifier",
                        "composite_color": "Composite color in hexidecimal format",
                        "light_color": "Light color in hexidecimal format",
                        "swagger_type": "Duotone"
                    }
                ],
                "ga_code": "Optional field return the Google Analytics code for the group. Only members that can edit group settings can see this",
                "localized_country_name": "Name of country of the group",
                "join_info": [
                    "Optional field, lists any questions requested when joining and required fields",
                    {
                        "photo_req": "true if required, false otherwise",
                        "questions": [
                            "List of profile questions organizer would like new members to answer prior to joining",
                            {
                                "question": "The text of the question",
                                "id": "Unique numeric identifier for the question"
                            }
                        ],
                        "questions_req": "true if required, false otherwise",
                        "swagger_type": "GroupJoinInfo"
                    }
                ],
                "visibility": "Who can see this group. One of members, public or public_limited",
                "topics": [
                    "Optional fields parameter. Returns the group's topics",
                    {
                        "name": "Display name of the topic",
                        "urlkey": "The unique keyword used to identify this topic",
                        "id": "Numeric topic id",
                        "lang": "Language topic originates from",
                        "swagger_type": "TopicSummary"
                    }
                ],
                "created": "Time the group was created in milliseconds since the epoch",
                "key_photo": [
                    "Group primary photo",
                    {
                        "highres_link": "Link for full sized photo",
                        "base_url": "A base url that can be use to construct a photo url from its components",
                        "id": "Numeric photo ID",
                        "photo_link": "Link for standard sized photo",
                        "type": "Type of photo. One of \"event\" or \"member\"",
                        "thumb_link": "Link for thumbnail sized photo"
                    }
                ],
                "plain_text_description": "Description of the group, in plain text format. Returned when then \"fields\" request parameter value contains \"plain_text_description\"",
                "list_addr": "Optional field returning list address prefix. List mail will be {list_addr}-list@meetup.com. Announce email will be {list_addr}-announce@meetup.com. You must be a member of the group to see this",
                "member_sample": [
                    "A small sampling of active members. Returned when the\n'fields' request parameter\nvalue contains 'member_sample'\nand the group's 'visibility' setting permits it",
                    {
                        "birthday": [
                            "Returned only when the fields request parameter value includes 'birthday'\nand only for the authenticated member when defined",
                            {
                                "month": "Numeric month member was born. May be absent if not defined",
                                "year": "Year member was born",
                                "day": "Numeric day member was born. May be absent if not defined"
                            }
                        ],
                        "country": "Country code associated with Member's location",
                        "localized_country_name": "Name of country associated with Member's location",
                        "gender": "Returned only when the fields request parameter value includes \"gender\"\nand only for the authenticated member.\nValue may be one of \"female\", \"male\", \"none\", or \"other\".\nThis field may be absent where gender is not defined",
                        "city": "City associated with Member's location",
                        "joined": "Time member joined, represented as milliseconds since the epoch",
                        "photo": [
                            "Member photo. May be absent if member has not chosen one.\nIn group contexts, the Member's Group profile photo will be returned.",
                            {
                                "highres_link": "Link for full sized photo",
                                "base_url": "A base url that can be use to construct a photo url from its components",
                                "id": "Numeric photo ID",
                                "photo_link": "Link for standard sized photo",
                                "type": "Type of photo. One of \"event\" or \"member\"",
                                "thumb_link": "Link for thumbnail sized photo"
                            }
                        ],
                        "bio": "Member bio. When profile does not belong to the authenticated member, this may be omitted if member opted to hide their bio from others",
                        "privacy": [
                            "Member's privacy preferences\nReturned only when the \"fields\" request parameter value includes \"privacy\"",
                            {
                                "groups": "may be 'hidden' or 'visible",
                                "bio": "may be 'hidden' or 'visible'",
                                "topics": "may be 'hidden' or 'visible'",
                                "swagger_type": "MemberPrivacy",
                                "facebook": "may be 'hidden' of 'visible'.\nIf absent, the member has not connected their Facebook account to Meetup"
                            }
                        ],
                        "lon": "Geographic longitude associated with Member's location",
                        "swagger_type": "Profile",
                        "other_services": [
                            "An object whose key's are the names of associated external\nnetworks and values are identities within those networks.\nThe keys may be one of facebook, flickr, linkedin, tumblr or twitter.\nReturned only when \"fields\" request parameter value\nincludes \"other_services\"",
                            {
                                "identifier": "A unique string identifier",
                                "url": "A url for this identity. May be the same as identifier in some cases",
                                "swagger_type": "SocialNetwork"
                            }
                        ],
                        "name": "Display name for the member",
                        "self": [
                            "Represents the authenticated member's relation to member.\nReturned when \"fields\" request parameter value includes \"self\" and\nthe target member is not the authenticated member",
                            {
                                "common": [
                                    "Information the authenticated member has in common with this member",
                                    {
                                        "groups": [
                                            "List of common groups",
                                            {
                                                "join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
                                                "photo_gradient": [
                                                    "Color combination used generate group duotone",
                                                    {
                                                        "dark_color": "Dark color in hexidecimal format",
                                                        "id": "Unique numeric identifier",
                                                        "composite_color": "Composite color in hexidecimal format",
                                                        "light_color": "Light color in hexidecimal format",
                                                        "swagger_type": "Duotone"
                                                    }
                                                ],
                                                "name": "Name of the group",
                                                "key_photo": [
                                                    "Group primary photo",
                                                    {
                                                        "highres_link": "Link for full sized photo",
                                                        "base_url": "A base url that can be use to construct a photo url from its components",
                                                        "id": "Numeric photo ID",
                                                        "photo_link": "Link for standard sized photo",
                                                        "type": "Type of photo. One of \"event\" or \"member\"",
                                                        "thumb_link": "Link for thumbnail sized photo"
                                                    }
                                                ],
                                                "id": "Numeric group ID",
                                                "urlname": "Urlname used to identify the group on meetup.com",
                                                "group_photo": [
                                                    "Group photo",
                                                    {
                                                        "highres_link": "Link for full sized photo",
                                                        "base_url": "A base url that can be use to construct a photo url from its components",
                                                        "id": "Numeric photo ID",
                                                        "photo_link": "Link for standard sized photo",
                                                        "type": "Type of photo. One of \"event\" or \"member\"",
                                                        "thumb_link": "Link for thumbnail sized photo"
                                                    }
                                                ],
                                                "swagger_type": "GroupSummary",
                                                "who": "What the group calls its members"
                                            }
                                        ]
                                    }
                                ],
                                "actions": "List of actions available for the authenticated member to perform.\nCurrently only \"message\" is supported",
                                "blocks": "Boolean indication of whether or not the authenticated member blocks this member",
                                "friends": "Boolean indication of whether or not the authenticated member is a friend of the member",
                                "swagger_type": "MemberSelf"
                            }
                        ],
                        "state": "State associated with Member's location, where available",
                        "id": "Unique numeric identifier for the member",
                        "lat": "Geographic latitude associated with Member's location",
                        "messaging_pref": "The member's preference for being contacted from other members on the platform.\nReturned only when the fields request parameter value includes \"messaging_pref\".\nMay be one of the following: \"all_members\", \"groups_only\", or \"orgs_only\""
                    }
                ],
                "organizer": [
                    "Group's primary organizer",
                    {
                        "name": "Name of member",
                        "photo": [
                            "Organizer photo, where defined",
                            {
                                "highres_link": "Link for full sized photo",
                                "base_url": "A base url that can be use to construct a photo url from its components",
                                "id": "Numeric photo ID",
                                "photo_link": "Link for standard sized photo",
                                "type": "Type of photo. One of \"event\" or \"member\"",
                                "thumb_link": "Link for thumbnail sized photo"
                            }
                        ],
                        "bio": "Bio of member",
                        "id": "Numeric member ID",
                        "swagger_type": "SimpleMember"
                    }
                ],
                "leads": "Optional field representing the number of members on this group's leadership team. Returned when the \"fields\" request parameter value contains \"leads\"",
                "last_event": [
                    "Optional field representing the last hosted event, if the group has one. Returned when the \"fields\" request parameter value contains \"last_event\"",
                    {
                        "utc_offset": "The local offset from UTC time, in milliseconds",
                        "name": "Name of event",
                        "id": "Alphanumeric event ID",
                        "time": "UTC start time of the event, in milliseconds since the epoch",
                        "swagger_type": "BasicEvent",
                        "yes_rsvp_count": "Number of yes RSVPs"
                    }
                ],
                "name": "Name of the group",
                "member_cap": "Number representing the maximum number of active members this group can have if capped. Returned only when requested in the fields request parameter and the authenticated member has permission to approve members",
                "self": [
                    "Optional field, contains details specific to the authorized user in this Meetup Group",
                    {
                        "visited": "Member's last visit to the group site, in milliseconds since the epoch",
                        "role": "Member's role in group, if any: Organizer, Assistant Organizer, Event Organizer, etc.",
                        "membership_dues": [
                            "Member's membership dues if the group has membership dues",
                            {
                                "paid_until": "For groups with recurring billing periods, this returns the time in milliseconds since the epoch that the member's next payment is due",
                                "total_amount": "Total amount paid",
                                "cancelled": "For groups with recurring billing periods, this Boolean field indicates that membership dues were cancelled",
                                "transaction_time": "Time the transaction was made in milliseconds since the epoch",
                                "exempt": "For groups with recurring billing periods, this Boolean field indicates that the member is exempt from payment.",
                                "trial": [
                                    "If the group offers a trial membership, this indicates information for unpaid members.",
                                    {
                                        "days": "The total number of trial days offered by the group",
                                        "days_remaining": "The number of days remaining in the member's trial period",
                                        "expired": "Boolean indicator of whether or not the unpaid subscription has expired or not"
                                    }
                                ],
                                "period_status": "For groups with recurring billing periods, this returns one of the following values grace paid pending unpaid"
                            }
                        ],
                        "actions": "List of actions the authenticated member may perform, potentially \"broadcast_message\": the ability to broadcast messages to group members via the \"announce\" mailing list, \"event_create\": the ability to create new events, \"event_draft\": the ability to save new events as drafts, \"role_assign\": the ability to assign member roles, \"edit\": the ability to edit group settings, \"member_approval\": the ability to approve or decline member requests to join, or \"subscription_upgrade\": the ability to upgrade this group's subscription plan",
                        "status": "Indicates the authorized user's membership with this group. Value may be one of \"none\", \"pending\", \"pending_payment\", \"active\", or \"blocked\""
                    }
                ],
                "category": [
                    "The primary category of the group, if the group has one",
                    {
                        "name": "Display name of the category",
                        "sort_name": "Name used for sorting",
                        "id": "Numeric category id",
                        "shortname": "String identifier of the category",
                        "swagger_type": "GroupCategory"
                    }
                ],
                "who": "What the group calls its members"
            },
            "tag": "get",
            "responseModel": "GetGroup"
        },
        "GetGroupBoards": {
            "version": "3",
            "name": "GetGroupBoards",
            "httpMethod": "GET",
            "parameters": {
                "urlname": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "page": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "offset": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "desc": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "order": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "only": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "omit": {
                    "location": "query",
                    "required": false,
                    "description": null
                }
            },
            "summary": "Listings of Group discussion boards",
            "uri": "/{urlname}/boards",
            "notes": "The :urlname path element may be any valid group urlname or domain name",
            "response": {
                "created": "Time board was created in milliseconds since the epoch",
                "name": "Discussion board name",
                "post_count": "Number of posts in discussions on this board",
                "id": "Numeric ID of discussion board",
                "updated": "Time board was updated in milliseconds since the epoch",
                "discussion_count": "Number of discussions on this board",
                "latest_reply": [
                    "The latest reply on this board",
                    {
                        "member": [
                            "The posting member",
                            {
                                "name": "Member name"
                            }
                        ],
                        "created": "Time reply was posted in milliseconds since the epoch"
                    }
                ],
                "group": [
                    "The group associated with this board",
                    {
                        "id": "Numeric ID of group"
                    }
                ]
            },
            "tag": null,
            "responseModel": "GetGroupBoards"
        },
        "GetGroupBoardsDiscussions": {
            "version": "3",
            "name": "GetGroupBoardsDiscussions",
            "httpMethod": "GET",
            "parameters": {
                "urlname": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "bid": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "did": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "page": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "offset": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "desc": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "order": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "only": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "omit": {
                    "location": "query",
                    "required": false,
                    "description": null
                }
            },
            "summary": "Listing Group discussion posts",
            "uri": "/{urlname}/boards/{bid}/discussions/{did}",
            "notes": "The :urlname path element may be any valid group urlname or domain name. The :bid path element maybe any valid board ID for this group. The :did may be any valid discussion ID for this board",
            "response": {
                "subject": "subject of the post",
                "created": "Time post was created in milliseconds since the epoch",
                "member": [
                    "The member that started this discussion",
                    {
                        "country": "Country, if provided, for the member",
                        "city": "City, if provided, for the member",
                        "name": "Member name",
                        "photo": [
                            "Photo object for active member",
                            {
                                "thumb": "Thumbnail photo url"
                            }
                        ],
                        "state": "State if in the US",
                        "id": "Member ID"
                    }
                ],
                "id": "Numeric post ID",
                "discussion": [
                    "The discussion this was posted in",
                    {
                        "id": "Numeric discussion ID"
                    }
                ],
                "body": "content of the post",
                "updated": "Time post was updated in milliseconds since the epoch",
                "in_reply_to": "ID of the post this was in reply to"
            },
            "tag": null,
            "responseModel": "GetGroupBoardsDiscussions"
        },
        "GetGroupEvents": {
            "version": "3",
            "name": "GetGroupEvents",
            "httpMethod": "GET",
            "parameters": {
                "urlname": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "scroll": {
                    "location": "query",
                    "required": false,
                    "description": "A string representing an alias for a point on a timeline.\n\n__recent_past__: Scroll to the last past Meetup Event. If there are no recently events in the past,\nthis defaults to __next_upcoming__. Unless otherwise specified, this will apply a 'status' filter\nof \"upcoming\" and \"past\".\n\n__next_upcoming__: Scroll to the next upcoming Meetup event. Unless otherwise specified, this will apply a 'status'\nfilter of \"upcoming\" and \"past\"\n\n__future_or_past__: Scroll to the next ongoing or upcoming Meetup event. If there are no ongoing or upcoming events,\nthis defaults to returning past events. Unless otherwise specified, this will apply a 'status'\nfilter of \"upcoming\" and \"past\".\n\n"
                },
                "page": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "fields": {
                    "location": "query",
                    "required": false,
                    "description": "Comma-delimited list of optional fields to append to the response"
                },
                "desc": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "status": {
                    "location": "query",
                    "required": false,
                    "description": "A comma-delimited list of event statuses. Valid values are: \"cancelled\", \"draft\", \"past\", \"proposed\", \"suggested\", or \"upcoming\". This defaults to \"upcoming\" unless a scroll parameter is provided."
                },
                "offset": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "order": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "only": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "omit": {
                    "location": "query",
                    "required": false,
                    "description": null
                }
            },
            "summary": "Gets a listing of all Meetup Events hosted by a target group, in ascending order by default",
            "uri": "/{urlname}/events",
            "notes": "All parameters are optional.\n\nThis endpoint uses HTTP [Link header based pagination](/meetup_api/docs/#v3_json)\n\nThe default order is ascending. To return the list in descending order, send desc=true in requests.",
            "response": {
                "utc_offset": "The local offset from UTC time, in milliseconds",
                "comment_count": "An aggregate count of all comments and replies for a given event, returned when fields request parameter value includes 'comment_count'",
                "rsvp_limit": "The number of \"yes\" RSVPS an event has capacity for",
                "venue": [
                    "The event venue, present only if selected and not hidden by an organizer",
                    {
                        "zip": "ZIP code if, venue is in US or Canada",
                        "country": "Country code of venue",
                        "localized_country_name": "The localized name of the venue's country",
                        "city": "City of venue",
                        "address_1": "Line 1 of venue address",
                        "address_2": "Line 2 of venue address",
                        "address_3": "Line 3 of venue address",
                        "lon": "Approximate longitude",
                        "phone": "Phone number of venue",
                        "name": "Venue name",
                        "state": "State of venue where available",
                        "id": "Unique numeric venue id",
                        "repinned": "true if the editor of the event altered the original venues pin location, false otherwise",
                        "lat": "Approximate latitude"
                    }
                ],
                "featured": "Boolean indicator of whether or not a given event is featured, returned when fields request parameter value includes 'featured'",
                "survey_questions": [
                    "List of organizer-defined survey questions intended to be asked of RSVPing members. Returned when the \"fields\"' request parameter contains \"answers\"",
                    {
                        "question": "Question text",
                        "id": "Numeric question identifier"
                    }
                ],
                "venue_visibility": "Represents who can see the venue with a potential value of \"members\" or \"public\", returned when fields request parameter value includes \"venue_visibility\" and the authenticated member is a member of the group hosting the event",
                "manual_attendance_count": "Manually entered total attendee headcount, if any exists",
                "fee": [
                    "Ticketing fee information for events that support payments",
                    {
                        "amount": "Amount of the fee",
                        "accepts": "Acceptable methods of payments may be one of \"paypal\", \"amazon\", \"wepay\", or \"cash\"",
                        "description": "Fee description, typically \"per-person\"",
                        "currency": "Currency accepted for fee",
                        "label": "Label for fee, typically \"Price\"",
                        "required": "Boolean flag indicating if this fee is required to RSVP"
                    }
                ],
                "link": "Link to event on meetup.com",
                "why": "We should do this because...",
                "description": "Description of the event in HTML. Email addresses and phone numbers will be masked for non-members",
                "short_link": "A shortened link for the event on meetup.com, returned when fields request parameter value includes \"short_link\"",
                "yes_rsvp_count": "Number of yes RSVPs including guests",
                "duration": "Scheduled event duration in milliseconds, if an end time is specified by the organizer. When not present, a default of 3 hours may be assumed by applications",
                "event_hosts": [
                    "List of members hosting the event, returned when fields request parameter value includes 'event_hosts'",
                    {
                        "name": "Host member's name",
                        "photo": [
                            "Member photo if one exists",
                            {
                                "highres_link": "Link for full sized photo",
                                "base_url": "A base url that can be use to construct a photo url from its components",
                                "id": "Numeric photo ID",
                                "photo_link": "Link for standard sized photo",
                                "type": "Type of photo. One of \"event\" or \"member\"",
                                "thumb_link": "Link for thumbnail sized photo"
                            }
                        ],
                        "id": "Host member's id"
                    }
                ],
                "simple_html_description": "Description of the event, in simple HTML source format. If this event's description was saved in simple HTML format, the description field will be an HTML translation of this source. Returned when the \"fields\"' request parameter contains \"simple_html_description\"",
                "id": "A unique alphanumeric identifier for event",
                "group": [
                    "Information about group hosting the event",
                    {
                        "photo_gradient": [
                            "Color combination used to generate group duotone, returned when fields request parameter value includes 'group_photo_gradient'",
                            {
                                "dark_color": "Dark color in hexidecimal format",
                                "id": "Unique numeric identifier",
                                "composite_color": "Composite color in hexidecimal format",
                                "light_color": "Light color in hexidecimal format",
                                "swagger_type": "Duotone"
                            }
                        ],
                        "join_info": [
                            "Lists any questions requested when joining and required fields. Returned with \"fields\" request parameter value includes \"group_join_info\"",
                            {
                                "photo_req": "true if required, false otherwise",
                                "questions": [
                                    "List of profile questions organizer would like new members to answer prior to joining",
                                    {
                                        "question": "The text of the question",
                                        "id": "Unique numeric identifier for the question"
                                    }
                                ],
                                "questions_req": "true if required, false otherwise",
                                "swagger_type": "GroupJoinInfo"
                            }
                        ],
                        "visibility": "Group visibility, returned when fields request parameter value includes 'group_visibility'. Value may be \"public\", \"public_limited\", or \"members\".",
                        "topics": [
                            "Topics related to the group, returned when fields request parameter value includes 'group_topics'",
                            {
                                "name": "Display name of the topic",
                                "urlkey": "The unique keyword used to identify this topic",
                                "id": "Numeric topic id",
                                "lang": "Language topic originates from",
                                "swagger_type": "TopicSummary"
                            }
                        ],
                        "key_photo": [
                            "Group primary photo, returned when fields request parameter value includes 'group_key_photo'",
                            {
                                "highres_link": "Link for full sized photo",
                                "base_url": "A base url that can be use to construct a photo url from its components",
                                "id": "Numeric photo ID",
                                "photo_link": "Link for standard sized photo",
                                "type": "Type of photo. One of \"event\" or \"member\"",
                                "thumb_link": "Link for thumbnail sized photo"
                            }
                        ],
                        "photo": [
                            "Photo associated with group, returned when fields request parameter value includes 'group_photo'",
                            {
                                "highres_link": "Link for full sized photo",
                                "base_url": "A base url that can be use to construct a photo url from its components",
                                "id": "Numeric photo ID",
                                "photo_link": "Link for standard sized photo",
                                "type": "Type of photo. One of \"event\" or \"member\"",
                                "thumb_link": "Link for thumbnail sized photo"
                            }
                        ],
                        "lon": "Approximate group longitude",
                        "join_mode": "Indicator of how new members may be able to join. be one of \"open\", \"approval\" or \"closed\"",
                        "name": "Name of the group",
                        "self": [
                            "Information pertaining to the authenticated member with respect to the group, returned when fields request parameter value includes 'group_self_actions', 'group_self_membership_dues', or 'group_self_status'",
                            {
                                "actions": "list of actions the authenticated member may perform, potentially \"event_create\": the ability to create new events, \"event_draft\": the ability to save new events as drafts, \"role_assign\": the ability to assign member roles, \"edit\": the ability to edit group settings, \"member_approval\": the ability to approve or decline member requests to join, or \"subscription_upgrade\": the ability to upgrade this group's subscription plan",
                                "membership_dues": "Membership dues information associated with hosting group, returned when \"fields\" request parameter value includes \"group_membership_dues\" and group has dues",
                                "status": "Indicates the authorized user's membership with this group.\n\nValue may be one of \"none\", \"pending\", \"pending_payment\", \"active\", or \"blocked\""
                            }
                        ],
                        "id": "Numeric identifier for the group",
                        "urlname": "Alphanumeric urlname identifier for the group",
                        "category": [
                            "Category group belongs to, returned when fields request parameter value includes 'group_category'",
                            {
                                "name": "Display name of the category",
                                "sort_name": "Name used for sorting",
                                "id": "Numeric category id",
                                "shortname": "String identifier of the category",
                                "swagger_type": "GroupCategory"
                            }
                        ],
                        "membership_dues": [
                            "Membership dues information associated with hosting group, returned when fields request parameter value includes 'group_membership_dues'",
                            {
                                "refund_policy": [
                                    "Conditions for refunds",
                                    {
                                        "group_closes": "refund applies when the group closes",
                                        "member_leaves": "refund applies when member leaves the group",
                                        "none": "indicates there is no refund policy",
                                        "member_banned": "refund applies when the member is banned",
                                        "custom": "Boolean indicator of a custom refund policy"
                                    }
                                ],
                                "reasons": "Array of reasons containing one or more of the following values compensate_organizer, cover_costs, encourage_engagement, improve_meetups, other, provide_supplies, reserve_fund",
                                "methods": [
                                    "Methods of payments",
                                    {
                                        "credit_card": "Boolean indicator that credit cards are accepted",
                                        "other": "Boolean indicator that other forms of payment are accepted",
                                        "paypal": "Boolean indicator that Paypal payments are accepted",
                                        "amazon_payments": "Boolean indicator that Amazon Payments are accepted"
                                    }
                                ],
                                "fee": "Numeric fee value",
                                "trial_days": "When present, returns the number of days the group is offering a free trial period for to new members. When not present, this indicates that the group does not offer a trial membership period",
                                "self_payment_required": "Returns true if the authorized user is prevented from participating in the group until a payment is made",
                                "required": "true if dues are required",
                                "swagger_type": "MembershipDues",
                                "fee_desc": "The interval at which dues must be paid. Possible values may include: \"month\", \"year\", \"day\", or \"every other day\"",
                                "currency": "Currency in which the fee is declared",
                                "reasons_other": "An additional reason if specified.",
                                "required_to": "If the dues are required this indicates what they are required for. May be one of 'join' or 'rsvp'"
                            }
                        ],
                        "lat": "Approximate group latitude",
                        "who": "What the group calls its members"
                    }
                ],
                "rsvpable_after_join": "Boolean value indicating whether or not the authenticated member can RSVP\nafter joining the hosting group.\nReturned when the \"fields\" request parameter\nincludes \"rsvpable_after_join\"\nand the authenticated member is _not_ a member of the\ngroup hosting this event",
                "rsvp_rules": [
                    "Information about conditions that allow for member RSVPs, returned when fields request parameter value include 'rsvp_rules'",
                    {
                        "refund_policy": [
                            "The organizer-defined terms for refunds. If this is defined, you must provide the authenticated member a way to access this information before they can RSVP. They will need to agree to these terms before they RSVP",
                            {
                                "policies": "list of one or more of the following. 'no_refunds' if the organizer will not issue refunds', 'member_cancellation' if the organizer offers a refund for member cancellation, 'event_cancellation' if the organizer offers a refund if the event is canceled, 'event_rescheduled' if the organizer offers a refund when the event is rescheduled",
                                "days": "if member_cancellation is present, it's relative to this many days before the event",
                                "notes": "additional refund policy notes"
                            }
                        ],
                        "closed": "Boolean value indicating whether or not RSVPing was explicitly closed for the event.",
                        "open_time": "UTC time that members may begin to RSVP",
                        "waitlisting": "Wait list handling when RSVP limit is reached. Value may be one of 'auto', 'manual' or 'off'",
                        "guest_limit": "Number of guests members may include in their RSVP, 0 or more",
                        "close_time": "UTC time that RSVPs will no longer be accepted, though organizers may close RSVPs earlier"
                    }
                ],
                "visibility": "Event visibility: \"public\", \"public_limited\", or \"members\". Events in private groups that do not expose limited information are visible only to that group's members and should not be made public.",
                "waitlist_count": "Number of members on the waitlist, if one exists",
                "created": "Creation time of the event, in milliseconds since the epoch",
                "plain_text_description": "Plain text version of the event description. Email addresses and photo numbers will be masked for non-members. Returned when \"fields\" request parameter value contains \"plain_text_description\"",
                "how_to_find_us": "Additional information on how to find members at a venue when provided by an organizer, returned when fields request parameter value includes 'how_to_find_us'",
                "swagger_type": "EventSummary",
                "photo_album": [
                    "Information about photo uploads for this event, returned when fields request parameter value includes 'photo_album'",
                    {
                        "photo_count": "Number of photos uploaded",
                        "photo_sample": [
                            "A small collection of photos uploaded for this event",
                            {
                                "highres_link": "Link for full sized photo",
                                "base_url": "A base url that can be use to construct a photo url from its components",
                                "id": "Numeric photo ID",
                                "photo_link": "Link for standard sized photo",
                                "type": "Type of photo. One of \"event\" or \"member\"",
                                "thumb_link": "Link for thumbnail sized photo"
                            }
                        ],
                        "id": "Unique numeric identifier for photo album",
                        "event": [
                            "Event photo album belongs to. This will be absent if the album\nis not associated with an event",
                            {
                                "utc_offset": "The local offset from UTC time, in milliseconds",
                                "name": "Name of event",
                                "id": "Alphanumeric event ID",
                                "time": "UTC start time of the event, in milliseconds since the epoch",
                                "swagger_type": "BasicEvent",
                                "yes_rsvp_count": "Number of yes RSVPs"
                            }
                        ],
                        "title": "Album title",
                        "swagger_type": "PhotoAlbumSummary"
                    }
                ],
                "rsvpable": "Boolean value indicating whether or not the authenticated member can RSVP or join the waitlist when the event is full.\nReturned when the \"fields\" request parameter value\nincludes \"rsvpable\"",
                "rsvp_sample": [
                    "A small collection RSVPs for members attending this event, returned when fields request parameter value includes 'rsvp_sample'",
                    {
                        "member": [
                            "Member who RSVP'd",
                            {
                                "role": "The leadership role of this member within the group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
                                "name": "Name of member",
                                "photo": [
                                    "Member photo, if available.\nMembers who registered via Facebook may not have highres photos",
                                    {
                                        "highres_link": "Link for full sized photo",
                                        "base_url": "A base url that can be use to construct a photo url from its components",
                                        "id": "Numeric photo ID",
                                        "photo_link": "Link for standard sized photo",
                                        "type": "Type of photo. One of \"event\" or \"member\"",
                                        "thumb_link": "Link for thumbnail sized photo"
                                    }
                                ],
                                "self": [
                                    "Represents the authenticated member's relation to member.\nReturned with the \"fields\" request parameter includes \"self\" and\nthe target member is not the authenticated member",
                                    {
                                        "common": [
                                            "Information the authenticated member has in common with this member",
                                            {
                                                "groups": [
                                                    "List of common groups",
                                                    {
                                                        "join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
                                                        "photo_gradient": [
                                                            "Color combination used generate group duotone",
                                                            {
                                                                "dark_color": "Dark color in hexidecimal format",
                                                                "id": "Unique numeric identifier",
                                                                "composite_color": "Composite color in hexidecimal format",
                                                                "light_color": "Light color in hexidecimal format",
                                                                "swagger_type": "Duotone"
                                                            }
                                                        ],
                                                        "name": "Name of the group",
                                                        "key_photo": [
                                                            "Group primary photo",
                                                            {
                                                                "highres_link": "Link for full sized photo",
                                                                "base_url": "A base url that can be use to construct a photo url from its components",
                                                                "id": "Numeric photo ID",
                                                                "photo_link": "Link for standard sized photo",
                                                                "type": "Type of photo. One of \"event\" or \"member\"",
                                                                "thumb_link": "Link for thumbnail sized photo"
                                                            }
                                                        ],
                                                        "id": "Numeric group ID",
                                                        "urlname": "Urlname used to identify the group on meetup.com",
                                                        "group_photo": [
                                                            "Group photo",
                                                            {
                                                                "highres_link": "Link for full sized photo",
                                                                "base_url": "A base url that can be use to construct a photo url from its components",
                                                                "id": "Numeric photo ID",
                                                                "photo_link": "Link for standard sized photo",
                                                                "type": "Type of photo. One of \"event\" or \"member\"",
                                                                "thumb_link": "Link for thumbnail sized photo"
                                                            }
                                                        ],
                                                        "swagger_type": "GroupSummary",
                                                        "who": "What the group calls its members"
                                                    }
                                                ]
                                            }
                                        ],
                                        "actions": "List of actions available for the authenticated member to perform.\nCurrently only \"message\" is supported",
                                        "blocks": "Boolean indication of whether or not the authenticated member blocks this member",
                                        "friends": "Boolean indication of whether or not the authenticated member is a friend of the member",
                                        "swagger_type": "MemberSelf"
                                    }
                                ],
                                "bio": "Intro of member",
                                "id": "Numeric member ID",
                                "title": "Organizer defined title of member. May be absent if not defined",
                                "event_context": [
                                    "Member's context within the event. Only returned in the context of an event",
                                    {
                                        "host": "Boolean indicator for whether this member is a host for the event"
                                    }
                                ],
                                "swagger_type": "AttendanceSummary"
                            }
                        ],
                        "id": "Unique numeric identifier for the RSVP. May be -1 for events scheduled in the future",
                        "updated": "Last modified time of the RSVP, in milliseconds since the epoch",
                        "swagger_type": "RSVPSummary",
                        "created": "Creation time of the RSVP, in milliseconds since the epoch"
                    }
                ],
                "series": [
                    "Returned when the \"fields\" request parameter value includes \"series\" for events that are part of a series of events",
                    {
                        "end_date": "Date when this series ends/ended, in milliseconds since the epoch",
                        "description": "Human displayable description of how often events in this series occur",
                        "id": "Unique numeric identifier for the series",
                        "swagger_type": "RecurrenceSchedule",
                        "weekly": [
                            "Returned for events that are part of a weekly recurring series of events",
                            {
                                "days_of_week": "List of integers 1-7 (Monday-Sunday) of days of week recurrence occurs upon",
                                "end_date": "Date when series ends/ended, in LocalDate (yyyy-MM-dd) format",
                                "interval": "Integer number of weeks between each recurrence"
                            }
                        ],
                        "start_date": "Date when this series begins/began, in milliseconds since the epoch"
                    }
                ],
                "name": "Name of the event",
                "self": [
                    "represents details particular to the authorized user, only present if requested and authenticated member is a member of the hosting group, returned when fields request parameter value includes 'self'",
                    {
                        "pay_status": "The authenticated member's payment status. This may be one of 'none', 'paid', 'partially_paid', 'payment_pending', 'echeck_pending', 'refund_pending', 'partially_refunded', 'refunded'",
                        "role": "The authenticated member's role in within the group, if any. This may be one of: Organizer, Assistant Organizer, Event Organizer, etc.",
                        "actions": "List of actions the authenticated member may perform, potentially one or more of the following\n\n\"announce\" to announce the event to the group's members\n\n\"attendance\" to view or take attendance for the event\n\n\"comment\" the ability to post a comment or reply\n\n\"payments\" the ability to mark members as paid if the event is ticketed\n\n\"publish\" to publish a draft event\n\n\"edit\" to edit the event information\n\n\"edit_hosts\" to edit the hosts for the event\n\n\"delete\" to delete the event\n\n\"rsvp\" to RSVP yes or no to the event\n\n\"wait\" to get on the waiting list (using the same RSVP methods).\n\n\"dues\" if an organizer requires membership dues to RSVP and the authorized\n member has not paid theirs\n\n\"upload_photo\" the ability to upload a photo for an event",
                        "rsvp": [
                            "Member's RSVP, if any",
                            {
                                "answers": [
                                    "List of answers to event survey questions asked when the member RSVP'd in the order asked, only available to organizers and assistant organizers",
                                    {
                                        "question": "Question text",
                                        "answer": "Answer text for question",
                                        "updated": "The last time this answer was updated",
                                        "question_id": "Unique number identifier for question",
                                        "swagger_type": "SurveyQuestionAnswer"
                                    }
                                ],
                                "guests": "Number of guests the RSVP'd member will be bringing",
                                "response": "May be \"yes\" or \"no\".\n\nIn cases where an event is over capacity and the member has shown an intent to attend,\nresponse may be \"waitlist\" if the event has a waitlist.\n\nIn cases of ticketed events, this may be \"yes_pending_payment\"\nfor a \"yes\" response for a ticketed event with an unprocessed payment"
                            }
                        ],
                        "swagger_type": "EventSelf"
                    }
                ],
                "time": "UTC start time of the event, in milliseconds since the epoch",
                "updated": "Last modified time for the event in milliseconds since the epoch",
                "status": "\"cancelled\", \"upcoming\", \"past\", \"proposed\", \"suggested\", or \"draft\""
            },
            "tag": "list",
            "responseModel": "GetGroupEvents"
        },
        "GetGroupEventsAttendance": {
            "version": "3",
            "name": "GetGroupEventsAttendance",
            "httpMethod": "GET",
            "parameters": {
                "urlname": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "id": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "filter": {
                    "location": "query",
                    "required": false,
                    "description": "A named filter to apply to the attendance list. These are roughly equivalent to the set of filters you will see in the attendance tool on the site. These filters correspond with attendance records as well as each member's original RSVP status. The filter value be one of: legacy, maybe, waitlist, yes, absent, all, attended, noshow, excused, relevant, no. The default is 'attended'. The 'absent' filter represents all members not in attendance including members with a 'noshow' status. An 'excused' absence is an absent member marked as such by an administrative member"
                },
                "member": {
                    "location": "query",
                    "required": false,
                    "description": "Raw text used to search for member by name. This may only be applied when the filter parameter is set to 'all'. The provided text must consist of at least 2 characters."
                },
                "page": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "offset": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "desc": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "order": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "only": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "omit": {
                    "location": "query",
                    "required": false,
                    "description": null
                }
            },
            "summary": "Lists attendance records for Meetup events. Limited for use by administrative members.",
            "uri": "/{urlname}/events/{id}/attendance",
            "notes": "The :urlname path element may be any valid group urlname or domain name. The :id path element must be a valid alphanumeric Meetup event identifier",
            "response": {
                "member": [
                    "Member in, or not in, attendance",
                    {
                        "name": "Name of the member",
                        "photo": [
                            "Member's photo, if available",
                            {
                                "thumb": "Thumbnail photo url"
                            }
                        ],
                        "id": "Numeric member ID"
                    }
                ],
                "rsvp": [
                    "RSVP, if member originally RSVP'd",
                    {
                        "guests": "number of guests",
                        "response": "Member's original RSVP response. May be one of: maybe, waitlist, yes, no, havent"
                    }
                ],
                "status": "The member's attendance status. May be one of: noshow, absent, attended"
            },
            "tag": "list",
            "responseModel": "GetGroupEventsAttendance"
        },
        "GetGroupEventsComments": {
            "version": "3",
            "name": "GetGroupEventsComments",
            "httpMethod": "GET",
            "parameters": {
                "urlname": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "event_id": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "fields": {
                    "location": "query",
                    "required": false,
                    "description": "A comma-delimited list of optional fields to append to the response.\nCurrently only \"self\" is supported"
                },
                "page": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "offset": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "desc": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "order": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "only": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "omit": {
                    "location": "query",
                    "required": false,
                    "description": null
                }
            },
            "summary": "Lists the comments and replies posted in a given Meetup Event.\n\nTo view the list of likes for a comment or reply\nsee the [likes](/meetup_api/docs/:urlname/events/:event_id/comments/:comment_id/likes/)\nendpoint",
            "uri": "/{urlname}/events/{event_id}/comments",
            "notes": "A valid path parameter for __:urlname__ and __:event_id__\nis required.",
            "response": {
                "like_count": "The number of likes the comment has",
                "replies": "A list of replies, with the same structure as a comment.\nThis field may be absent in cases where there are no replies",
                "created": "Time the comment was posted in milliseconds since the epoch",
                "member": [
                    "The member that made the comment.\n\nIn cases where member has since left the group,\nthis member may have an id of 0",
                    {
                        "role": "The leadership role of this member within the group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
                        "name": "Name of member",
                        "photo": [
                            "Member photo, if available.\nMembers who registered via Facebook may not have highres photos",
                            {
                                "highres_link": "Link for full sized photo",
                                "base_url": "A base url that can be use to construct a photo url from its components",
                                "id": "Numeric photo ID",
                                "photo_link": "Link for standard sized photo",
                                "type": "Type of photo. One of \"event\" or \"member\"",
                                "thumb_link": "Link for thumbnail sized photo"
                            }
                        ],
                        "bio": "Intro of member",
                        "id": "Numeric member ID",
                        "title": "Organizer defined title of member. May be absent if not defined",
                        "event_context": [
                            "Member's context within the event. Only returned in the context of an event",
                            {
                                "host": "Boolean indicator for whether this member is a host for the event"
                            }
                        ],
                        "swagger_type": "AttendanceSummary"
                    }
                ],
                "self": [
                    "Context for the authenticated member",
                    {
                        "actions": "A list of actions the authenticated member may perform on the comment.\n\nValue may be one or more of the following:\n\n__flag_spam__ mark this comment as spam\n\n__delete__ delete this comment\n\n__unlike__ unlike this comment\n\n__like__ like this comment",
                        "liked": "A boolean indicator of whether or not the authenticated member has liked the comment",
                        "notifications": "Indicator of whether or not the authenticated member may\n              receive notifications about related comments. May be one of 'on' or 'off'"
                    }
                ],
                "comment": "The comment the member left for the event",
                "id": "Comment id",
                "swagger_type": "EventComment",
                "in_reply_to": "The id of the comment a reply was in relation to"
            },
            "tag": "list",
            "responseModel": "GetGroupEventsComments"
        },
        "GetGroupEventsCommentsLikes": {
            "version": "3",
            "name": "GetGroupEventsCommentsLikes",
            "httpMethod": "GET",
            "parameters": {
                "urlname": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "event_id": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "comment_id": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "page": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "offset": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "desc": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "order": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "only": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "omit": {
                    "location": "query",
                    "required": false,
                    "description": null
                }
            },
            "summary": "Returns lists of likes for an event comment or reply",
            "uri": "/{urlname}/events/{event_id}/comments/{comment_id}/likes",
            "notes": "A path parameter for __:urlname__,  __:event_id__,\nand __:comment_id__ is required\n\nThe __:comment_id__ should be formatted as `comment:{comment_id}` for top level comments\nor `reply:{reply_id}` for comment replies.\n\nTo obtain a list of comments and their replies for an event, see the\n[event comments](/meetup_api/docs/:urlname/events/:event_id/comments/) endpoint",
            "response": {
                "member": [
                    "Member associated with the like",
                    {
                        "role": "The leadership role of this member within the group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
                        "name": "Name of member",
                        "photo": [
                            "Member photo, if available.\nMembers who registered via Facebook may not have highres photos",
                            {
                                "highres_link": "Link for full sized photo",
                                "base_url": "A base url that can be use to construct a photo url from its components",
                                "id": "Numeric photo ID",
                                "photo_link": "Link for standard sized photo",
                                "type": "Type of photo. One of \"event\" or \"member\"",
                                "thumb_link": "Link for thumbnail sized photo"
                            }
                        ],
                        "bio": "Intro of member",
                        "id": "Numeric member ID",
                        "title": "Organizer defined title of member. May be absent if not defined",
                        "event_context": [
                            "Member's context within the event. Only returned in the context of an event",
                            {
                                "host": "Boolean indicator for whether this member is a host for the event"
                            }
                        ],
                        "swagger_type": "AttendanceSummary"
                    }
                ],
                "updated": "Time like was updated, in milliseconds since the epoch",
                "swagger_type": "MemberLike",
                "created": "Time of like, in milliseconds since the epoch"
            },
            "tag": "list",
            "responseModel": "GetGroupEventsCommentsLikes"
        },
        "GetGroupEventsHosts": {
            "version": "3",
            "name": "GetGroupEventsHosts",
            "httpMethod": "GET",
            "parameters": {
                "urlname": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "event_id": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "fields": {
                    "location": "query",
                    "required": false,
                    "description": "A comma-delimited list of optional fields to append to the response"
                },
                "page": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "offset": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "desc": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "order": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "only": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "omit": {
                    "location": "query",
                    "required": false,
                    "description": null
                }
            },
            "summary": "Returns the list of hosts for a given event",
            "uri": "/{urlname}/events/{event_id}/hosts",
            "notes": "A valid __:urlname__ and __:event_id__ is required.",
            "response": {
                "birthday": [
                    "Returned only when the fields request parameter value includes 'birthday'\nand only for the authenticated member when defined",
                    {
                        "month": "Numeric month member was born. May be absent if not defined",
                        "year": "Year member was born",
                        "day": "Numeric day member was born. May be absent if not defined"
                    }
                ],
                "country": "Country code associated with Member's location",
                "localized_country_name": "Name of country associated with Member's location",
                "gender": "Returned only when the fields request parameter value includes \"gender\"\nand only for the authenticated member.\nValue may be one of \"female\", \"male\", \"none\", or \"other\".\nThis field may be absent where gender is not defined",
                "city": "City associated with Member's location",
                "joined": "Time member joined, represented as milliseconds since the epoch",
                "photo": [
                    "Member photo. May be absent if member has not chosen one.\nIn group contexts, the Member's Group profile photo will be returned.",
                    {
                        "highres_link": "Link for full sized photo",
                        "base_url": "A base url that can be use to construct a photo url from its components",
                        "id": "Numeric photo ID",
                        "photo_link": "Link for standard sized photo",
                        "type": "Type of photo. One of \"event\" or \"member\"",
                        "thumb_link": "Link for thumbnail sized photo"
                    }
                ],
                "bio": "Member bio. When profile does not belong to the authenticated member, this may be omitted if member opted to hide their bio from others",
                "privacy": [
                    "Member's privacy preferences\nReturned only when the \"fields\" request parameter value includes \"privacy\"",
                    {
                        "groups": "may be 'hidden' or 'visible",
                        "bio": "may be 'hidden' or 'visible'",
                        "topics": "may be 'hidden' or 'visible'",
                        "swagger_type": "MemberPrivacy",
                        "facebook": "may be 'hidden' of 'visible'.\nIf absent, the member has not connected their Facebook account to Meetup"
                    }
                ],
                "lon": "Geographic longitude associated with Member's location",
                "swagger_type": "Profile",
                "other_services": [
                    "An object whose key's are the names of associated external\nnetworks and values are identities within those networks.\nThe keys may be one of facebook, flickr, linkedin, tumblr or twitter.\nReturned only when \"fields\" request parameter value\nincludes \"other_services\"",
                    {
                        "identifier": "A unique string identifier",
                        "url": "A url for this identity. May be the same as identifier in some cases",
                        "swagger_type": "SocialNetwork"
                    }
                ],
                "group_profile": [
                    "Meetup Group profile information.\nThis field is only returned when profile is requested in group contexts",
                    {
                        "role": "The leadership role of this member within the Group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
                        "created": "The time this member joined the Group, represented as milliseconds since the epoch",
                        "intro": "Member intro, may be omitted if member opted to hide their intro from other members",
                        "visited": "The last time this member visited the Group, represented as milliseconds since the epoch",
                        "answers": [
                            "Array of answers to Group Profile questions",
                            {
                                "question": "Question text",
                                "answer": "Answer text",
                                "question_id": "Unique numeric question identifier"
                            }
                        ],
                        "link": "Member profile link, provides a link to the members chapter profile",
                        "title": "Organizer defined title of member. May be absent if not defined",
                        "updated": "The last time this member edited their Group profile, represented as milliseconds since the epoch",
                        "swagger_type": "GroupProfile",
                        "status": "Membership status in this Group.\nValue may be one of\nactive, blocked, pending, pending_payment or none",
                        "group": [
                            "The group associated with this membership",
                            {
                                "join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
                                "photo_gradient": [
                                    "Color combination used generate group duotone",
                                    {
                                        "dark_color": "Dark color in hexidecimal format",
                                        "id": "Unique numeric identifier",
                                        "composite_color": "Composite color in hexidecimal format",
                                        "light_color": "Light color in hexidecimal format",
                                        "swagger_type": "Duotone"
                                    }
                                ],
                                "name": "Name of the group",
                                "key_photo": [
                                    "Group primary photo",
                                    {
                                        "highres_link": "Link for full sized photo",
                                        "base_url": "A base url that can be use to construct a photo url from its components",
                                        "id": "Numeric photo ID",
                                        "photo_link": "Link for standard sized photo",
                                        "type": "Type of photo. One of \"event\" or \"member\"",
                                        "thumb_link": "Link for thumbnail sized photo"
                                    }
                                ],
                                "id": "Numeric group ID",
                                "urlname": "Urlname used to identify the group on meetup.com",
                                "group_photo": [
                                    "Group photo",
                                    {
                                        "highres_link": "Link for full sized photo",
                                        "base_url": "A base url that can be use to construct a photo url from its components",
                                        "id": "Numeric photo ID",
                                        "photo_link": "Link for standard sized photo",
                                        "type": "Type of photo. One of \"event\" or \"member\"",
                                        "thumb_link": "Link for thumbnail sized photo"
                                    }
                                ],
                                "swagger_type": "GroupSummary",
                                "who": "What the group calls its members"
                            }
                        ]
                    }
                ],
                "name": "Display name for the member",
                "self": [
                    "Represents the authenticated member's relation to member.\nReturned when \"fields\" request parameter value includes \"self\" and\nthe target member is not the authenticated member",
                    {
                        "common": [
                            "Information the authenticated member has in common with this member",
                            {
                                "groups": [
                                    "List of common groups",
                                    {
                                        "join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
                                        "photo_gradient": [
                                            "Color combination used generate group duotone",
                                            {
                                                "dark_color": "Dark color in hexidecimal format",
                                                "id": "Unique numeric identifier",
                                                "composite_color": "Composite color in hexidecimal format",
                                                "light_color": "Light color in hexidecimal format",
                                                "swagger_type": "Duotone"
                                            }
                                        ],
                                        "name": "Name of the group",
                                        "key_photo": [
                                            "Group primary photo",
                                            {
                                                "highres_link": "Link for full sized photo",
                                                "base_url": "A base url that can be use to construct a photo url from its components",
                                                "id": "Numeric photo ID",
                                                "photo_link": "Link for standard sized photo",
                                                "type": "Type of photo. One of \"event\" or \"member\"",
                                                "thumb_link": "Link for thumbnail sized photo"
                                            }
                                        ],
                                        "id": "Numeric group ID",
                                        "urlname": "Urlname used to identify the group on meetup.com",
                                        "group_photo": [
                                            "Group photo",
                                            {
                                                "highres_link": "Link for full sized photo",
                                                "base_url": "A base url that can be use to construct a photo url from its components",
                                                "id": "Numeric photo ID",
                                                "photo_link": "Link for standard sized photo",
                                                "type": "Type of photo. One of \"event\" or \"member\"",
                                                "thumb_link": "Link for thumbnail sized photo"
                                            }
                                        ],
                                        "swagger_type": "GroupSummary",
                                        "who": "What the group calls its members"
                                    }
                                ]
                            }
                        ],
                        "actions": "List of actions available for the authenticated member to perform.\nCurrently only \"message\" is supported",
                        "blocks": "Boolean indication of whether or not the authenticated member blocks this member",
                        "friends": "Boolean indication of whether or not the authenticated member is a friend of the member",
                        "swagger_type": "MemberSelf"
                    }
                ],
                "state": "State associated with Member's location, where available",
                "id": "Unique numeric identifier for the member",
                "lat": "Geographic latitude associated with Member's location",
                "messaging_pref": "The member's preference for being contacted from other members on the platform.\nReturned only when the fields request parameter value includes \"messaging_pref\".\nMay be one of the following: \"all_members\", \"groups_only\", or \"orgs_only\""
            },
            "tag": null,
            "responseModel": "GetGroupEventsHosts"
        },
        "GetGroupEventsPhotos": {
            "version": "3",
            "name": "GetGroupEventsPhotos",
            "httpMethod": "GET",
            "parameters": {
                "urlname": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "event_id": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "photo_id": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "fields": {
                    "location": "query",
                    "required": false,
                    "description": "A comma-delimited list of optional response fields.\nCurrently supported values are\n\"comment_count\", \"self\" and \"short_link\""
                },
                "page": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "offset": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "desc": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "order": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "only": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "omit": {
                    "location": "query",
                    "required": false,
                    "description": null
                }
            },
            "summary": "Gets information about a specific photo",
            "uri": "/{urlname}/events/{event_id}/photos/{photo_id}",
            "notes": "A valid path parameter value for\n__:urlname__ and __:event_id__, and __:photo_id__\nis required",
            "response": {
                "utc_offset": "Numeric utc offset based on the timezone of the group\nhosting the event this photo was posted in",
                "comment_count": "The number of comments posted about this photo.\nReturned when 'comment_count' is present\nin the 'fields' request parameter.",
                "highres_link": "Link for full sized photo",
                "created": "Time photo was uploaded, in milliseconds since the epoch",
                "base_url": "A base url that can be use to construct a photo url from its components",
                "link": "Link to photo on meetup.com",
                "caption": "Photo caption, if defined",
                "type": "Type of photo. One of \"event\" or \"member\"",
                "thumb_link": "Link for thumbnail sized photo",
                "short_link": "Shortened link to photo on meetup.com. Returned when 'short_link'\nis present in the 'fields' request parameter",
                "swagger_type": "EventPhoto",
                "photo_album": [
                    "Photo album the photo is associated with",
                    {
                        "photo_count": "Number of photos uploaded",
                        "id": "Unique numeric identifier for photo album",
                        "event": [
                            "Event photo album belongs to. This will be absent if the album\nis not associated with an event",
                            {
                                "utc_offset": "The local offset from UTC time, in milliseconds",
                                "name": "Name of event",
                                "id": "Alphanumeric event ID",
                                "time": "UTC start time of the event, in milliseconds since the epoch",
                                "swagger_type": "BasicEvent",
                                "yes_rsvp_count": "Number of yes RSVPs"
                            }
                        ],
                        "title": "Album title",
                        "swagger_type": "EventPhotoSummary"
                    }
                ],
                "member": [
                    "Member who uploaded the photo. If member has since left the group,\nthis will return a member with an id of 0",
                    {
                        "role": "The leadership role of this member within the group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
                        "name": "Name of member",
                        "photo": [
                            "Member photo, if available.\nMembers who registered via Facebook may not have highres photos",
                            {
                                "highres_link": "Link for full sized photo",
                                "base_url": "A base url that can be use to construct a photo url from its components",
                                "id": "Numeric photo ID",
                                "photo_link": "Link for standard sized photo",
                                "type": "Type of photo. One of \"event\" or \"member\"",
                                "thumb_link": "Link for thumbnail sized photo"
                            }
                        ],
                        "bio": "Intro of member",
                        "id": "Numeric member ID",
                        "title": "Organizer defined title of member. May be absent if not defined",
                        "event_context": [
                            "Member's context within the event. Only returned in the context of an event",
                            {
                                "host": "Boolean indicator for whether this member is a host for the event"
                            }
                        ],
                        "swagger_type": "AttendanceSummary"
                    }
                ],
                "self": [
                    "Context for the authenticated member.\nReturned when 'self' is present\nin the 'fields' request parameter and the authenticated\nis a member of the group the photo is associated with.",
                    {
                        "actions": "List of actions the authenticated member may perform on this photo\nor its containing album, potentially one or more of the following\n\n\"comment\" if member can comment on this photo\n\n\"delete\" if the member can delete the photo\n\n\"edit\" if the member can edit the photo details\n\n\"upload_photo\" if the member can upload new photos"
                    }
                ],
                "id": "Numeric photo ID",
                "photo_link": "Link for standard sized photo",
                "updated": "Time photo was last updated, in milliseconds since the epoch",
                "group": [
                    "Group the photo is associated with.\" +\n          \"|Returned when 'group' is present \" +\n          \"|in the 'fields' request parameter.",
                    {
                        "join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
                        "photo_gradient": [
                            "Color combination used generate group duotone",
                            {
                                "dark_color": "Dark color in hexidecimal format",
                                "id": "Unique numeric identifier",
                                "composite_color": "Composite color in hexidecimal format",
                                "light_color": "Light color in hexidecimal format",
                                "swagger_type": "Duotone"
                            }
                        ],
                        "name": "Name of the group",
                        "key_photo": [
                            "Group primary photo",
                            {
                                "highres_link": "Link for full sized photo",
                                "base_url": "A base url that can be use to construct a photo url from its components",
                                "id": "Numeric photo ID",
                                "photo_link": "Link for standard sized photo",
                                "type": "Type of photo. One of \"event\" or \"member\"",
                                "thumb_link": "Link for thumbnail sized photo"
                            }
                        ],
                        "id": "Numeric group ID",
                        "urlname": "Urlname used to identify the group on meetup.com",
                        "group_photo": [
                            "Group photo",
                            {
                                "highres_link": "Link for full sized photo",
                                "base_url": "A base url that can be use to construct a photo url from its components",
                                "id": "Numeric photo ID",
                                "photo_link": "Link for standard sized photo",
                                "type": "Type of photo. One of \"event\" or \"member\"",
                                "thumb_link": "Link for thumbnail sized photo"
                            }
                        ],
                        "swagger_type": "GroupSummary",
                        "who": "What the group calls its members"
                    }
                ]
            },
            "tag": "get",
            "responseModel": "GetGroupEventsPhotos"
        },
        "GetGroupEventsPhotosComments": {
            "version": "3",
            "name": "GetGroupEventsPhotosComments",
            "httpMethod": "GET",
            "parameters": {
                "urlname": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "event_id": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "photo_id": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "page": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "offset": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "desc": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "order": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "only": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "omit": {
                    "location": "query",
                    "required": false,
                    "description": null
                }
            },
            "summary": "Lists photo comments associated with a photo",
            "uri": "/{urlname}/events/{event_id}/photos/{photo_id}/comments",
            "notes": "Valid path parameters for __:urlname__, __:event_id__, and __:photo_id__ are required\n\nFor groups that have limited public visibilty on their content, you must be a member of the group to see these",
            "response": {
                "member": [
                    "The member that made the comment.\n\nIn cases where member has since left the group,\nthis member may have an id of 0",
                    {
                        "role": "The leadership role of this member within the group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
                        "name": "Name of member",
                        "photo": [
                            "Member photo, if available.\nMembers who registered via Facebook may not have highres photos",
                            {
                                "highres_link": "Link for full sized photo",
                                "base_url": "A base url that can be use to construct a photo url from its components",
                                "id": "Numeric photo ID",
                                "photo_link": "Link for standard sized photo",
                                "type": "Type of photo. One of \"event\" or \"member\"",
                                "thumb_link": "Link for thumbnail sized photo"
                            }
                        ],
                        "bio": "Intro of member",
                        "id": "Numeric member ID",
                        "title": "Organizer defined title of member. May be absent if not defined",
                        "event_context": [
                            "Member's context within the event. Only returned in the context of an event",
                            {
                                "host": "Boolean indicator for whether this member is a host for the event"
                            }
                        ],
                        "swagger_type": "AttendanceSummary"
                    }
                ],
                "self": [
                    "Context for the authenticated member",
                    {
                        "actions": "A list of actions the authenticated member may perform on the comment.\n\nValue may be one or more of the following:\n\n__delete__ delete this comment"
                    }
                ],
                "comment": "The comment the member left for the photo",
                "id": "Comment id",
                "created": "Time the comment was posted in milliseconds since the epoch"
            },
            "tag": "get",
            "responseModel": "GetGroupEventsPhotosComments"
        },
        "GetGroupEventsRsvps": {
            "version": "3",
            "name": "GetGroupEventsRsvps",
            "httpMethod": "GET",
            "parameters": {
                "urlname": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "event_id": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "fields": {
                    "location": "query",
                    "required": false,
                    "description": "A comma-delimited list of optional fields to append to the response"
                },
                "response": {
                    "location": "query",
                    "required": false,
                    "description": "Filter returned list to one or more of the following RSVP responses.\n\"yes\" or \"no\". This defaults to \"yes,no\""
                },
                "order": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "page": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "offset": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "desc": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "only": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "omit": {
                    "location": "query",
                    "required": false,
                    "description": null
                }
            },
            "summary": "Retrieves list of event RSVPs",
            "uri": "/{urlname}/events/{event_id}/rsvps",
            "notes": "This endpoint returns an un-paginated list of RSVPs. Standard pagination parameters will have no effect",
            "response": {
                "venue": [
                    "Venue of event RSVP is hosted at.\nWill be omitted when venue is not yet defined or organizer has chosen to hide it from non-members.",
                    {
                        "zip": "ZIP code if, venue is in US or Canada",
                        "country": "Country code of venue",
                        "localized_country_name": "The localized name of the venue's country",
                        "city": "City of venue",
                        "address_1": "Line 1 of venue address",
                        "address_2": "Line 2 of venue address",
                        "address_3": "Line 3 of venue address",
                        "lon": "Approximate longitude",
                        "phone": "Phone number of venue",
                        "name": "Venue name",
                        "state": "State of venue where available",
                        "id": "Unique numeric venue id",
                        "repinned": "true if the editor of the event altered the original venues pin location, false otherwise",
                        "lat": "Approximate latitude"
                    }
                ],
                "created": "Creation time of the RSVP, in milliseconds since the epoch.",
                "answers": [
                    "Answers to event survey questions.\nVisible only to the posting member, hosts and the lead team",
                    {
                        "question": "Question text",
                        "answer": "Answer text for question",
                        "updated": "The last time this answer was updated",
                        "question_id": "Unique number identifier for question",
                        "swagger_type": "SurveyQuestionAnswer"
                    }
                ],
                "swagger_type": "Rsvp",
                "pay_status": "The member's pay status for ticketed events returned with \"pay_status\"\nis requested with the \"fields\" parameter.\n\nVisible only to the member and the lead team.\nMay be one of \"refunded\", \"partial_refund\", \"refund_pending\", \"pending\", \"echeck_pending\", \"paid\", \"none\", or \"exempt\"",
                "response": "The response to the RSVP. May be \"yes\" or \"no\".\n\nIn cases where an event is over capacity and the member has shown an intent to attend,\nresponse will be \"waitlist\" if the event has a waitlist.\n\nIn cases of ticketed events, this may be \"yes_pending_payment\"\nfor a \"yes\" response for a ticketed event with an unprocessed payment",
                "guests": "Number of guests the RSVP'd member will be bringing",
                "member": [
                    "Member who RSVP'd",
                    {
                        "role": "The leadership role of this member within the group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
                        "name": "Name of member",
                        "photo": [
                            "Member photo, if available.\nMembers who registered via Facebook may not have highres photos",
                            {
                                "highres_link": "Link for full sized photo",
                                "base_url": "A base url that can be use to construct a photo url from its components",
                                "id": "Numeric photo ID",
                                "photo_link": "Link for standard sized photo",
                                "type": "Type of photo. One of \"event\" or \"member\"",
                                "thumb_link": "Link for thumbnail sized photo"
                            }
                        ],
                        "self": [
                            "Represents the authenticated member's relation to member.\nReturned with the \"fields\" request parameter includes \"self\" and\nthe target member is not the authenticated member",
                            {
                                "common": [
                                    "Information the authenticated member has in common with this member",
                                    {
                                        "groups": [
                                            "List of common groups",
                                            {
                                                "join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
                                                "photo_gradient": [
                                                    "Color combination used generate group duotone",
                                                    {
                                                        "dark_color": "Dark color in hexidecimal format",
                                                        "id": "Unique numeric identifier",
                                                        "composite_color": "Composite color in hexidecimal format",
                                                        "light_color": "Light color in hexidecimal format",
                                                        "swagger_type": "Duotone"
                                                    }
                                                ],
                                                "name": "Name of the group",
                                                "key_photo": [
                                                    "Group primary photo",
                                                    {
                                                        "highres_link": "Link for full sized photo",
                                                        "base_url": "A base url that can be use to construct a photo url from its components",
                                                        "id": "Numeric photo ID",
                                                        "photo_link": "Link for standard sized photo",
                                                        "type": "Type of photo. One of \"event\" or \"member\"",
                                                        "thumb_link": "Link for thumbnail sized photo"
                                                    }
                                                ],
                                                "id": "Numeric group ID",
                                                "urlname": "Urlname used to identify the group on meetup.com",
                                                "group_photo": [
                                                    "Group photo",
                                                    {
                                                        "highres_link": "Link for full sized photo",
                                                        "base_url": "A base url that can be use to construct a photo url from its components",
                                                        "id": "Numeric photo ID",
                                                        "photo_link": "Link for standard sized photo",
                                                        "type": "Type of photo. One of \"event\" or \"member\"",
                                                        "thumb_link": "Link for thumbnail sized photo"
                                                    }
                                                ],
                                                "swagger_type": "GroupSummary",
                                                "who": "What the group calls its members"
                                            }
                                        ]
                                    }
                                ],
                                "actions": "List of actions available for the authenticated member to perform.\nCurrently only \"message\" is supported",
                                "blocks": "Boolean indication of whether or not the authenticated member blocks this member",
                                "friends": "Boolean indication of whether or not the authenticated member is a friend of the member",
                                "swagger_type": "MemberSelf"
                            }
                        ],
                        "bio": "Intro of member",
                        "id": "Numeric member ID",
                        "title": "Organizer defined title of member. May be absent if not defined",
                        "event_context": [
                            "Member's context within the event. Only returned in the context of an event",
                            {
                                "host": "Boolean indicator for whether this member is a host for the event"
                            }
                        ],
                        "swagger_type": "AttendanceSummary"
                    }
                ],
                "event": [
                    "The Event associated with the RSVP",
                    {
                        "utc_offset": "The local offset from UTC time, in milliseconds",
                        "name": "Name of event",
                        "id": "Alphanumeric event ID",
                        "time": "UTC start time of the event, in milliseconds since the epoch",
                        "swagger_type": "BasicEvent",
                        "yes_rsvp_count": "Number of yes RSVPs"
                    }
                ],
                "attendance_status": "Represents an attendance status for this RSVP,\nreturned when \"attendance_status\" is requested with the\n\"fields\" parameter and when the authorized member has\npermission to take attendance.\n\nValue may be \"attended\" when marked attending,\n\"absent\" when marked absent or \"noshow\" when marked noshow",
                "updated": "Last time the RSVP was updated, in milliseconds since the epoch.",
                "group": [
                    "The Group associated with the RSVP",
                    {
                        "join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
                        "photo_gradient": [
                            "Color combination used generate group duotone",
                            {
                                "dark_color": "Dark color in hexidecimal format",
                                "id": "Unique numeric identifier",
                                "composite_color": "Composite color in hexidecimal format",
                                "light_color": "Light color in hexidecimal format",
                                "swagger_type": "Duotone"
                            }
                        ],
                        "name": "Name of the group",
                        "key_photo": [
                            "Group primary photo",
                            {
                                "highres_link": "Link for full sized photo",
                                "base_url": "A base url that can be use to construct a photo url from its components",
                                "id": "Numeric photo ID",
                                "photo_link": "Link for standard sized photo",
                                "type": "Type of photo. One of \"event\" or \"member\"",
                                "thumb_link": "Link for thumbnail sized photo"
                            }
                        ],
                        "id": "Numeric group ID",
                        "urlname": "Urlname used to identify the group on meetup.com",
                        "group_photo": [
                            "Group photo",
                            {
                                "highres_link": "Link for full sized photo",
                                "base_url": "A base url that can be use to construct a photo url from its components",
                                "id": "Numeric photo ID",
                                "photo_link": "Link for standard sized photo",
                                "type": "Type of photo. One of \"event\" or \"member\"",
                                "thumb_link": "Link for thumbnail sized photo"
                            }
                        ],
                        "swagger_type": "GroupSummary",
                        "who": "What the group calls its members"
                    }
                ]
            },
            "tag": "list",
            "responseModel": "GetGroupEventsRsvps"
        },
        "GetGroupMembers": {
            "version": "3",
            "name": "GetGroupMembers",
            "httpMethod": "GET",
            "parameters": {
                "urlname": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "member_id": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "fields": {
                    "location": "query",
                    "required": false,
                    "description": "A comma-delimited string of optional response field names.\nThis may include birthday, gender, groups, privacy, self and topics"
                },
                "page": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "offset": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "desc": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "order": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "only": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "omit": {
                    "location": "query",
                    "required": false,
                    "description": null
                }
            },
            "summary": "Gets Group Profiles.\nFor Member Profiles, see [this endpoint](/meetup_api/docs/members/:member_id)",
            "uri": "/{urlname}/members/{member_id}",
            "notes": "A valid path parameter for :urlname and :member_id is required. A value of \"self\"\nmay be used in place of a numeric identifier to represent the authenticated\nMember's id",
            "response": {
                "birthday": [
                    "Returned only when the fields request parameter value includes 'birthday'\nand only for the authenticated member when defined",
                    {
                        "month": "Numeric month member was born. May be absent if not defined",
                        "year": "Year member was born",
                        "day": "Numeric day member was born. May be absent if not defined"
                    }
                ],
                "country": "Country code associated with Member's location",
                "gender": "Returned only when the fields request parameter value includes \"gender\"\nand only for the authenticated member.\nValue may be one of \"female\", \"male\", \"none\", or \"other\".\nThis field may be absent where gender is not defined",
                "city": "City associated with Member's location",
                "bio": "Member bio. When profile does not belong to the authenticated member, this may be omitted if member opted to hide their bio from others",
                "privacy": [
                    "Member's privacy preferences\nReturned only when the \"fields\" request parameter value includes \"privacy\"",
                    {
                        "groups": "may be 'hidden' or 'visible",
                        "bio": "may be 'hidden' or 'visible'",
                        "topics": "may be 'hidden' or 'visible'",
                        "swagger_type": "MemberPrivacy",
                        "facebook": "may be 'hidden' of 'visible'.\nIf absent, the member has not connected their Facebook account to Meetup"
                    }
                ],
                "lon": "Geographic longitude associated with Member's location",
                "memberships": [
                    "Group memberships affiliated with this member.\nReturned only when fields request parameter value includes \"memberships\".\nThis list may be omitted if the member has opted to hide their groups from others.",
                    {
                        "member": [
                            "Memberships where member holds a basic membership",
                            {
                                "role": "The leadership role of this member within the Group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
                                "created": "The time this member joined the Group, represented as milliseconds since the epoch",
                                "visited": "The last time this member visited the Group, represented as milliseconds since the epoch",
                                "title": "Organizer defined title of member. May be absent if not defined",
                                "updated": "The last time this member edited their Group profile, represented as milliseconds since the epoch",
                                "swagger_type": "GroupProfileListEntry",
                                "status": "Membership status in this Group.\nValue may be one of\nactive, blocked, pending, pending_payment or none",
                                "group": [
                                    "The group associated with this membership",
                                    {
                                        "join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
                                        "photo_gradient": [
                                            "Color combination used generate group duotone",
                                            {
                                                "dark_color": "Dark color in hexidecimal format",
                                                "id": "Unique numeric identifier",
                                                "composite_color": "Composite color in hexidecimal format",
                                                "light_color": "Light color in hexidecimal format",
                                                "swagger_type": "Duotone"
                                            }
                                        ],
                                        "name": "Name of the group",
                                        "key_photo": [
                                            "Group primary photo",
                                            {
                                                "highres_link": "Link for full sized photo",
                                                "base_url": "A base url that can be use to construct a photo url from its components",
                                                "id": "Numeric photo ID",
                                                "photo_link": "Link for standard sized photo",
                                                "type": "Type of photo. One of \"event\" or \"member\"",
                                                "thumb_link": "Link for thumbnail sized photo"
                                            }
                                        ],
                                        "id": "Numeric group ID",
                                        "urlname": "Urlname used to identify the group on meetup.com",
                                        "group_photo": [
                                            "Group photo",
                                            {
                                                "highres_link": "Link for full sized photo",
                                                "base_url": "A base url that can be use to construct a photo url from its components",
                                                "id": "Numeric photo ID",
                                                "photo_link": "Link for standard sized photo",
                                                "type": "Type of photo. One of \"event\" or \"member\"",
                                                "thumb_link": "Link for thumbnail sized photo"
                                            }
                                        ],
                                        "swagger_type": "GroupSummary",
                                        "who": "What the group calls its members"
                                    }
                                ]
                            }
                        ],
                        "organizer": [
                            "Memberships where member is on the group's lead team",
                            {
                                "role": "The leadership role of this member within the Group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
                                "created": "The time this member joined the Group, represented as milliseconds since the epoch",
                                "visited": "The last time this member visited the Group, represented as milliseconds since the epoch",
                                "title": "Organizer defined title of member. May be absent if not defined",
                                "updated": "The last time this member edited their Group profile, represented as milliseconds since the epoch",
                                "swagger_type": "GroupProfileListEntry",
                                "status": "Membership status in this Group.\nValue may be one of\nactive, blocked, pending, pending_payment or none",
                                "group": [
                                    "The group associated with this membership",
                                    {
                                        "join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
                                        "photo_gradient": [
                                            "Color combination used generate group duotone",
                                            {
                                                "dark_color": "Dark color in hexidecimal format",
                                                "id": "Unique numeric identifier",
                                                "composite_color": "Composite color in hexidecimal format",
                                                "light_color": "Light color in hexidecimal format",
                                                "swagger_type": "Duotone"
                                            }
                                        ],
                                        "name": "Name of the group",
                                        "key_photo": [
                                            "Group primary photo",
                                            {
                                                "highres_link": "Link for full sized photo",
                                                "base_url": "A base url that can be use to construct a photo url from its components",
                                                "id": "Numeric photo ID",
                                                "photo_link": "Link for standard sized photo",
                                                "type": "Type of photo. One of \"event\" or \"member\"",
                                                "thumb_link": "Link for thumbnail sized photo"
                                            }
                                        ],
                                        "id": "Numeric group ID",
                                        "urlname": "Urlname used to identify the group on meetup.com",
                                        "group_photo": [
                                            "Group photo",
                                            {
                                                "highres_link": "Link for full sized photo",
                                                "base_url": "A base url that can be use to construct a photo url from its components",
                                                "id": "Numeric photo ID",
                                                "photo_link": "Link for standard sized photo",
                                                "type": "Type of photo. One of \"event\" or \"member\"",
                                                "thumb_link": "Link for thumbnail sized photo"
                                            }
                                        ],
                                        "swagger_type": "GroupSummary",
                                        "who": "What the group calls its members"
                                    }
                                ]
                            }
                        ]
                    }
                ],
                "other_services": [
                    "An object whose key's are the names of associated external\nnetworks and values are identities within those networks.\nThe keys may be one of facebook, flickr, linkedin, tumblr or twitter.\nReturned only when \"fields\" request parameter value\nincludes \"other_services\"",
                    {
                        "identifier": "A unique string identifier",
                        "url": "A url for this identity. May be the same as identifier in some cases",
                        "swagger_type": "SocialNetwork"
                    }
                ],
                "stats": [
                    "High level numeric member statistics\nReturned only when fields request parameter value includes 'stats'",
                    {
                        "groups": "Number of Meetup Group memberships.\nMay be 0 if member chose to hide their groups from others",
                        "rsvps": "Number of RSVPs.\nMay be 0 if member chose to hide their groups from others",
                        "topics": "Number of Meetup topics member is interested in.\nMay be 0 if member chose to hide their topics from others"
                    }
                ],
                "state": "State associated with Member's location, where available",
                "id": "Unique numeric identifier for the member",
                "lat": "Geographic latitude associated with Member's location",
                "next_event": [
                    "Optional field representing either the current ongoing or next RSVP'd Meetup, where available.\nReturned when the \"fields\"\nrequest parameter value contains \"next_event\"\nonly for the profile of the authenticated member",
                    {
                        "utc_offset": "The local offset from UTC time, in milliseconds",
                        "rsvp_limit": "The number of \"yes\" RSVPS an event has capacity for",
                        "venue": [
                            "The event venue, present only if selected and not hidden by an organizer",
                            {
                                "zip": "ZIP code if, venue is in US or Canada",
                                "country": "Country code of venue",
                                "localized_country_name": "The localized name of the venue's country",
                                "city": "City of venue",
                                "address_1": "Line 1 of venue address",
                                "address_2": "Line 2 of venue address",
                                "address_3": "Line 3 of venue address",
                                "lon": "Approximate longitude",
                                "phone": "Phone number of venue",
                                "name": "Venue name",
                                "state": "State of venue where available",
                                "id": "Unique numeric venue id",
                                "repinned": "true if the editor of the event altered the original venues pin location, false otherwise",
                                "lat": "Approximate latitude"
                            }
                        ],
                        "survey_questions": [
                            "Contains a list of organizer-defined survey questions intended to be asked of RSVPing members.\nReturned when the \"fields\" request parameter\ncontains \"survey_questions\"",
                            {
                                "question": "Question text",
                                "id": "Numeric question identifier"
                            }
                        ],
                        "waitlist_count": "Number of members on the waitlist, if one exists",
                        "created": "Creation time of the event, in milliseconds since the epoch",
                        "fee": [
                            "Ticketing fee information for events that support payments",
                            {
                                "amount": "Amount of the fee",
                                "accepts": "Acceptable methods of payments may be one of \"paypal\", \"amazon\", \"wepay\", or \"cash\"",
                                "description": "Fee description, typically \"per-person\"",
                                "currency": "Currency accepted for fee",
                                "label": "Label for fee, typically \"Price\"",
                                "required": "Boolean flag indicating if this fee is required to RSVP"
                            }
                        ],
                        "swagger_type": "EventSummary",
                        "yes_rsvp_count": "Number of yes RSVPs including guests",
                        "duration": "Scheduled event duration in milliseconds, if an end time is specified by the organizer. When not present, a default of 3 hours may be assumed by applications",
                        "photo_album": [
                            "Information about photo uploads for this event",
                            {
                                "photo_count": "Number of photos uploaded",
                                "photo_sample": [
                                    "A small collection of photos uploaded for this event",
                                    {
                                        "highres_link": "Link for full sized photo",
                                        "base_url": "A base url that can be use to construct a photo url from its components",
                                        "id": "Numeric photo ID",
                                        "photo_link": "Link for standard sized photo",
                                        "type": "Type of photo. One of \"event\" or \"member\"",
                                        "thumb_link": "Link for thumbnail sized photo"
                                    }
                                ],
                                "id": "Unique numeric identifier for photo album",
                                "event": [
                                    "Event photo album belongs to. This will be absent if the album\nis not associated with an event",
                                    {
                                        "utc_offset": "The local offset from UTC time, in milliseconds",
                                        "name": "Name of event",
                                        "id": "Alphanumeric event ID",
                                        "time": "UTC start time of the event, in milliseconds since the epoch",
                                        "swagger_type": "BasicEvent",
                                        "yes_rsvp_count": "Number of yes RSVPs"
                                    }
                                ],
                                "title": "Album title",
                                "swagger_type": "PhotoAlbumSummary"
                            }
                        ],
                        "rsvp_sample": [
                            "A small collection RSVPs for members attending this event, returned when the \"fields\" request parameter value includes \"rsvp_sample\"",
                            {
                                "member": [
                                    "Member who RSVP'd",
                                    {
                                        "role": "The leadership role of this member within the group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
                                        "name": "Name of member",
                                        "photo": [
                                            "Member photo, if available.\nMembers who registered via Facebook may not have highres photos",
                                            {
                                                "highres_link": "Link for full sized photo",
                                                "base_url": "A base url that can be use to construct a photo url from its components",
                                                "id": "Numeric photo ID",
                                                "photo_link": "Link for standard sized photo",
                                                "type": "Type of photo. One of \"event\" or \"member\"",
                                                "thumb_link": "Link for thumbnail sized photo"
                                            }
                                        ],
                                        "self": [
                                            "Represents the authenticated member's relation to member.\nReturned with the \"fields\" request parameter includes \"self\" and\nthe target member is not the authenticated member",
                                            {
                                                "common": [
                                                    "Information the authenticated member has in common with this member",
                                                    {
                                                        "groups": [
                                                            "List of common groups",
                                                            {
                                                                "join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
                                                                "photo_gradient": [
                                                                    "Color combination used generate group duotone",
                                                                    {
                                                                        "dark_color": "Dark color in hexidecimal format",
                                                                        "id": "Unique numeric identifier",
                                                                        "composite_color": "Composite color in hexidecimal format",
                                                                        "light_color": "Light color in hexidecimal format",
                                                                        "swagger_type": "Duotone"
                                                                    }
                                                                ],
                                                                "name": "Name of the group",
                                                                "key_photo": [
                                                                    "Group primary photo",
                                                                    {
                                                                        "highres_link": "Link for full sized photo",
                                                                        "base_url": "A base url that can be use to construct a photo url from its components",
                                                                        "id": "Numeric photo ID",
                                                                        "photo_link": "Link for standard sized photo",
                                                                        "type": "Type of photo. One of \"event\" or \"member\"",
                                                                        "thumb_link": "Link for thumbnail sized photo"
                                                                    }
                                                                ],
                                                                "id": "Numeric group ID",
                                                                "urlname": "Urlname used to identify the group on meetup.com",
                                                                "group_photo": [
                                                                    "Group photo",
                                                                    {
                                                                        "highres_link": "Link for full sized photo",
                                                                        "base_url": "A base url that can be use to construct a photo url from its components",
                                                                        "id": "Numeric photo ID",
                                                                        "photo_link": "Link for standard sized photo",
                                                                        "type": "Type of photo. One of \"event\" or \"member\"",
                                                                        "thumb_link": "Link for thumbnail sized photo"
                                                                    }
                                                                ],
                                                                "swagger_type": "GroupSummary",
                                                                "who": "What the group calls its members"
                                                            }
                                                        ]
                                                    }
                                                ],
                                                "actions": "List of actions available for the authenticated member to perform.\nCurrently only \"message\" is supported",
                                                "blocks": "Boolean indication of whether or not the authenticated member blocks this member",
                                                "friends": "Boolean indication of whether or not the authenticated member is a friend of the member",
                                                "swagger_type": "MemberSelf"
                                            }
                                        ],
                                        "bio": "Intro of member",
                                        "id": "Numeric member ID",
                                        "title": "Organizer defined title of member. May be absent if not defined",
                                        "event_context": [
                                            "Member's context within the event. Only returned in the context of an event",
                                            {
                                                "host": "Boolean indicator for whether this member is a host for the event"
                                            }
                                        ],
                                        "swagger_type": "AttendanceSummary"
                                    }
                                ],
                                "id": "Unique numeric identifier for the RSVP. May be -1 for events scheduled in the future",
                                "updated": "Last modified time of the RSVP, in milliseconds since the epoch",
                                "swagger_type": "RSVPSummary",
                                "created": "Creation time of the RSVP, in milliseconds since the epoch"
                            }
                        ],
                        "series": [
                            "Returned when the \"fields\" request parameter value includes \"series\" for events that are part of a series of events",
                            {
                                "end_date": "Date when this series ends/ended, in milliseconds since the epoch",
                                "description": "Human displayable description of how often events in this series occur",
                                "id": "Unique numeric identifier for the series",
                                "swagger_type": "RecurrenceSchedule",
                                "weekly": [
                                    "Returned for events that are part of a weekly recurring series of events",
                                    {
                                        "days_of_week": "List of integers 1-7 (Monday-Sunday) of days of week recurrence occurs upon",
                                        "end_date": "Date when series ends/ended, in LocalDate (yyyy-MM-dd) format",
                                        "interval": "Integer number of weeks between each recurrence"
                                    }
                                ],
                                "start_date": "Date when this series begins/began, in milliseconds since the epoch"
                            }
                        ],
                        "name": "Name of the event",
                        "id": "A unique alphanumeric identifier for event",
                        "time": "UTC start time of the event, in milliseconds since the epoch",
                        "updated": "Last modified time for the event in milliseconds since the epoch",
                        "group": [
                            "Group hosting the event",
                            {
                                "join_mode": "Indicator of how new members may be able to join. be one of \"open\", \"approval\" or \"closed\"",
                                "name": "Name of the group",
                                "lon": "Approximate group longitude",
                                "id": "Numeric identifier for the group",
                                "urlname": "Alphanumeric urlname identifier for the group",
                                "lat": "Approximate group latitude",
                                "who": "What the group calls its members"
                            }
                        ]
                    }
                ],
                "localized_country_name": "Name of country associated with Member's location",
                "topics": [
                    "List of Meetup topics Member has interest in.\nReturned only when fields request parameter value includes \"topics\".\nThis list may be omitted when member has opted to hide the topics from others.",
                    {
                        "name": "Display name of the topic",
                        "urlkey": "The unique keyword used to identify this topic",
                        "id": "Numeric topic id",
                        "lang": "Language topic originates from",
                        "swagger_type": "TopicSummary"
                    }
                ],
                "joined": "Time member joined, represented as milliseconds since the epoch",
                "photo": [
                    "Member photo. May be absent if member has not chosen one.\nIn group contexts, the Member's Group profile photo will be returned.",
                    {
                        "highres_link": "Link for full sized photo",
                        "base_url": "A base url that can be use to construct a photo url from its components",
                        "id": "Numeric photo ID",
                        "photo_link": "Link for standard sized photo",
                        "type": "Type of photo. One of \"event\" or \"member\"",
                        "thumb_link": "Link for thumbnail sized photo"
                    }
                ],
                "swagger_type": "Profile",
                "group_profile": [
                    "Meetup Group profile information.\nThis field is only returned when profile is requested in group contexts",
                    {
                        "role": "The leadership role of this member within the Group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
                        "created": "The time this member joined the Group, represented as milliseconds since the epoch",
                        "intro": "Member intro, may be omitted if member opted to hide their intro from other members",
                        "visited": "The last time this member visited the Group, represented as milliseconds since the epoch",
                        "answers": [
                            "Array of answers to Group Profile questions",
                            {
                                "question": "Question text",
                                "answer": "Answer text",
                                "question_id": "Unique numeric question identifier"
                            }
                        ],
                        "link": "Member profile link, provides a link to the members chapter profile",
                        "title": "Organizer defined title of member. May be absent if not defined",
                        "updated": "The last time this member edited their Group profile, represented as milliseconds since the epoch",
                        "swagger_type": "GroupProfile",
                        "status": "Membership status in this Group.\nValue may be one of\nactive, blocked, pending, pending_payment or none",
                        "group": [
                            "The group associated with this membership",
                            {
                                "join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
                                "photo_gradient": [
                                    "Color combination used generate group duotone",
                                    {
                                        "dark_color": "Dark color in hexidecimal format",
                                        "id": "Unique numeric identifier",
                                        "composite_color": "Composite color in hexidecimal format",
                                        "light_color": "Light color in hexidecimal format",
                                        "swagger_type": "Duotone"
                                    }
                                ],
                                "name": "Name of the group",
                                "key_photo": [
                                    "Group primary photo",
                                    {
                                        "highres_link": "Link for full sized photo",
                                        "base_url": "A base url that can be use to construct a photo url from its components",
                                        "id": "Numeric photo ID",
                                        "photo_link": "Link for standard sized photo",
                                        "type": "Type of photo. One of \"event\" or \"member\"",
                                        "thumb_link": "Link for thumbnail sized photo"
                                    }
                                ],
                                "id": "Numeric group ID",
                                "urlname": "Urlname used to identify the group on meetup.com",
                                "group_photo": [
                                    "Group photo",
                                    {
                                        "highres_link": "Link for full sized photo",
                                        "base_url": "A base url that can be use to construct a photo url from its components",
                                        "id": "Numeric photo ID",
                                        "photo_link": "Link for standard sized photo",
                                        "type": "Type of photo. One of \"event\" or \"member\"",
                                        "thumb_link": "Link for thumbnail sized photo"
                                    }
                                ],
                                "swagger_type": "GroupSummary",
                                "who": "What the group calls its members"
                            }
                        ]
                    }
                ],
                "last_event": [
                    "Optional field representing the last RSVP'd Meetup this member attended within the last two weeks,\nwhere available. Returned when the \"fields\"\nrequest parameter value contains \"last_event\"\nonly for the profile of the authenticated member",
                    {
                        "utc_offset": "The local offset from UTC time, in milliseconds",
                        "rsvp_limit": "The number of \"yes\" RSVPS an event has capacity for",
                        "venue": [
                            "The event venue, present only if selected and not hidden by an organizer",
                            {
                                "zip": "ZIP code if, venue is in US or Canada",
                                "country": "Country code of venue",
                                "localized_country_name": "The localized name of the venue's country",
                                "city": "City of venue",
                                "address_1": "Line 1 of venue address",
                                "address_2": "Line 2 of venue address",
                                "address_3": "Line 3 of venue address",
                                "lon": "Approximate longitude",
                                "phone": "Phone number of venue",
                                "name": "Venue name",
                                "state": "State of venue where available",
                                "id": "Unique numeric venue id",
                                "repinned": "true if the editor of the event altered the original venues pin location, false otherwise",
                                "lat": "Approximate latitude"
                            }
                        ],
                        "survey_questions": [
                            "Contains a list of organizer-defined survey questions intended to be asked of RSVPing members.\nReturned when the \"fields\" request parameter\ncontains \"survey_questions\"",
                            {
                                "question": "Question text",
                                "id": "Numeric question identifier"
                            }
                        ],
                        "waitlist_count": "Number of members on the waitlist, if one exists",
                        "created": "Creation time of the event, in milliseconds since the epoch",
                        "fee": [
                            "Ticketing fee information for events that support payments",
                            {
                                "amount": "Amount of the fee",
                                "accepts": "Acceptable methods of payments may be one of \"paypal\", \"amazon\", \"wepay\", or \"cash\"",
                                "description": "Fee description, typically \"per-person\"",
                                "currency": "Currency accepted for fee",
                                "label": "Label for fee, typically \"Price\"",
                                "required": "Boolean flag indicating if this fee is required to RSVP"
                            }
                        ],
                        "swagger_type": "EventSummary",
                        "yes_rsvp_count": "Number of yes RSVPs including guests",
                        "duration": "Scheduled event duration in milliseconds, if an end time is specified by the organizer. When not present, a default of 3 hours may be assumed by applications",
                        "photo_album": [
                            "Information about photo uploads for this event",
                            {
                                "photo_count": "Number of photos uploaded",
                                "photo_sample": [
                                    "A small collection of photos uploaded for this event",
                                    {
                                        "highres_link": "Link for full sized photo",
                                        "base_url": "A base url that can be use to construct a photo url from its components",
                                        "id": "Numeric photo ID",
                                        "photo_link": "Link for standard sized photo",
                                        "type": "Type of photo. One of \"event\" or \"member\"",
                                        "thumb_link": "Link for thumbnail sized photo"
                                    }
                                ],
                                "id": "Unique numeric identifier for photo album",
                                "event": [
                                    "Event photo album belongs to. This will be absent if the album\nis not associated with an event",
                                    {
                                        "utc_offset": "The local offset from UTC time, in milliseconds",
                                        "name": "Name of event",
                                        "id": "Alphanumeric event ID",
                                        "time": "UTC start time of the event, in milliseconds since the epoch",
                                        "swagger_type": "BasicEvent",
                                        "yes_rsvp_count": "Number of yes RSVPs"
                                    }
                                ],
                                "title": "Album title",
                                "swagger_type": "PhotoAlbumSummary"
                            }
                        ],
                        "rsvp_sample": [
                            "A small collection RSVPs for members attending this event, returned when the \"fields\" request parameter value includes \"rsvp_sample\"",
                            {
                                "member": [
                                    "Member who RSVP'd",
                                    {
                                        "role": "The leadership role of this member within the group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
                                        "name": "Name of member",
                                        "photo": [
                                            "Member photo, if available.\nMembers who registered via Facebook may not have highres photos",
                                            {
                                                "highres_link": "Link for full sized photo",
                                                "base_url": "A base url that can be use to construct a photo url from its components",
                                                "id": "Numeric photo ID",
                                                "photo_link": "Link for standard sized photo",
                                                "type": "Type of photo. One of \"event\" or \"member\"",
                                                "thumb_link": "Link for thumbnail sized photo"
                                            }
                                        ],
                                        "self": [
                                            "Represents the authenticated member's relation to member.\nReturned with the \"fields\" request parameter includes \"self\" and\nthe target member is not the authenticated member",
                                            {
                                                "common": [
                                                    "Information the authenticated member has in common with this member",
                                                    {
                                                        "groups": [
                                                            "List of common groups",
                                                            {
                                                                "join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
                                                                "photo_gradient": [
                                                                    "Color combination used generate group duotone",
                                                                    {
                                                                        "dark_color": "Dark color in hexidecimal format",
                                                                        "id": "Unique numeric identifier",
                                                                        "composite_color": "Composite color in hexidecimal format",
                                                                        "light_color": "Light color in hexidecimal format",
                                                                        "swagger_type": "Duotone"
                                                                    }
                                                                ],
                                                                "name": "Name of the group",
                                                                "key_photo": [
                                                                    "Group primary photo",
                                                                    {
                                                                        "highres_link": "Link for full sized photo",
                                                                        "base_url": "A base url that can be use to construct a photo url from its components",
                                                                        "id": "Numeric photo ID",
                                                                        "photo_link": "Link for standard sized photo",
                                                                        "type": "Type of photo. One of \"event\" or \"member\"",
                                                                        "thumb_link": "Link for thumbnail sized photo"
                                                                    }
                                                                ],
                                                                "id": "Numeric group ID",
                                                                "urlname": "Urlname used to identify the group on meetup.com",
                                                                "group_photo": [
                                                                    "Group photo",
                                                                    {
                                                                        "highres_link": "Link for full sized photo",
                                                                        "base_url": "A base url that can be use to construct a photo url from its components",
                                                                        "id": "Numeric photo ID",
                                                                        "photo_link": "Link for standard sized photo",
                                                                        "type": "Type of photo. One of \"event\" or \"member\"",
                                                                        "thumb_link": "Link for thumbnail sized photo"
                                                                    }
                                                                ],
                                                                "swagger_type": "GroupSummary",
                                                                "who": "What the group calls its members"
                                                            }
                                                        ]
                                                    }
                                                ],
                                                "actions": "List of actions available for the authenticated member to perform.\nCurrently only \"message\" is supported",
                                                "blocks": "Boolean indication of whether or not the authenticated member blocks this member",
                                                "friends": "Boolean indication of whether or not the authenticated member is a friend of the member",
                                                "swagger_type": "MemberSelf"
                                            }
                                        ],
                                        "bio": "Intro of member",
                                        "id": "Numeric member ID",
                                        "title": "Organizer defined title of member. May be absent if not defined",
                                        "event_context": [
                                            "Member's context within the event. Only returned in the context of an event",
                                            {
                                                "host": "Boolean indicator for whether this member is a host for the event"
                                            }
                                        ],
                                        "swagger_type": "AttendanceSummary"
                                    }
                                ],
                                "id": "Unique numeric identifier for the RSVP. May be -1 for events scheduled in the future",
                                "updated": "Last modified time of the RSVP, in milliseconds since the epoch",
                                "swagger_type": "RSVPSummary",
                                "created": "Creation time of the RSVP, in milliseconds since the epoch"
                            }
                        ],
                        "series": [
                            "Returned when the \"fields\" request parameter value includes \"series\" for events that are part of a series of events",
                            {
                                "end_date": "Date when this series ends/ended, in milliseconds since the epoch",
                                "description": "Human displayable description of how often events in this series occur",
                                "id": "Unique numeric identifier for the series",
                                "swagger_type": "RecurrenceSchedule",
                                "weekly": [
                                    "Returned for events that are part of a weekly recurring series of events",
                                    {
                                        "days_of_week": "List of integers 1-7 (Monday-Sunday) of days of week recurrence occurs upon",
                                        "end_date": "Date when series ends/ended, in LocalDate (yyyy-MM-dd) format",
                                        "interval": "Integer number of weeks between each recurrence"
                                    }
                                ],
                                "start_date": "Date when this series begins/began, in milliseconds since the epoch"
                            }
                        ],
                        "name": "Name of the event",
                        "id": "A unique alphanumeric identifier for event",
                        "time": "UTC start time of the event, in milliseconds since the epoch",
                        "updated": "Last modified time for the event in milliseconds since the epoch",
                        "group": [
                            "Group hosting the event",
                            {
                                "join_mode": "Indicator of how new members may be able to join. be one of \"open\", \"approval\" or \"closed\"",
                                "name": "Name of the group",
                                "lon": "Approximate group longitude",
                                "id": "Numeric identifier for the group",
                                "urlname": "Alphanumeric urlname identifier for the group",
                                "lat": "Approximate group latitude",
                                "who": "What the group calls its members"
                            }
                        ]
                    }
                ],
                "name": "Display name for the member",
                "self": [
                    "Represents the authenticated member's relation to member.\nReturned when \"fields\" request parameter value includes \"self\" and\nthe target member is not the authenticated member",
                    {
                        "common": [
                            "Information the authenticated member has in common with this member",
                            {
                                "groups": [
                                    "List of common groups",
                                    {
                                        "join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
                                        "photo_gradient": [
                                            "Color combination used generate group duotone",
                                            {
                                                "dark_color": "Dark color in hexidecimal format",
                                                "id": "Unique numeric identifier",
                                                "composite_color": "Composite color in hexidecimal format",
                                                "light_color": "Light color in hexidecimal format",
                                                "swagger_type": "Duotone"
                                            }
                                        ],
                                        "name": "Name of the group",
                                        "key_photo": [
                                            "Group primary photo",
                                            {
                                                "highres_link": "Link for full sized photo",
                                                "base_url": "A base url that can be use to construct a photo url from its components",
                                                "id": "Numeric photo ID",
                                                "photo_link": "Link for standard sized photo",
                                                "type": "Type of photo. One of \"event\" or \"member\"",
                                                "thumb_link": "Link for thumbnail sized photo"
                                            }
                                        ],
                                        "id": "Numeric group ID",
                                        "urlname": "Urlname used to identify the group on meetup.com",
                                        "group_photo": [
                                            "Group photo",
                                            {
                                                "highres_link": "Link for full sized photo",
                                                "base_url": "A base url that can be use to construct a photo url from its components",
                                                "id": "Numeric photo ID",
                                                "photo_link": "Link for standard sized photo",
                                                "type": "Type of photo. One of \"event\" or \"member\"",
                                                "thumb_link": "Link for thumbnail sized photo"
                                            }
                                        ],
                                        "swagger_type": "GroupSummary",
                                        "who": "What the group calls its members"
                                    }
                                ]
                            }
                        ],
                        "actions": "List of actions available for the authenticated member to perform.\nCurrently only \"message\" is supported",
                        "blocks": "Boolean indication of whether or not the authenticated member blocks this member",
                        "friends": "Boolean indication of whether or not the authenticated member is a friend of the member",
                        "swagger_type": "MemberSelf"
                    }
                ],
                "messaging_pref": "The member's preference for being contacted from other members on the platform.\nReturned only when the fields request parameter value includes \"messaging_pref\".\nMay be one of the following: \"all_members\", \"groups_only\", or \"orgs_only\""
            },
            "tag": "get",
            "responseModel": "GetGroupMembers"
        },
        "GetGroupPhotoAlbums": {
            "version": "3",
            "name": "GetGroupPhotoAlbums",
            "httpMethod": "GET",
            "parameters": {
                "urlname": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "page": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "offset": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "fields": {
                    "location": "query",
                    "required": false,
                    "description": "A comma-delimited list of optional response fields.\nCurrently supported values are \"self\" and \"short_link\""
                },
                "desc": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "order": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "only": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "omit": {
                    "location": "query",
                    "required": false,
                    "description": null
                }
            },
            "summary": "Gets a list a group photo albums in ascending order based on the time they were created",
            "uri": "/{urlname}/photo_albums",
            "notes": "A valid path parameter value for\n__:urlname__ is required\n\nThis endpoint uses HTTP [Link header based pagination](/meetup_api/docs/#v3_json).",
            "response": {
                "photo_sample": [
                    "A small collection of photos uploaded for this event",
                    {
                        "highres_link": "Link for full sized photo",
                        "base_url": "A base url that can be use to construct a photo url from its components",
                        "id": "Numeric photo ID",
                        "photo_link": "Link for standard sized photo",
                        "type": "Type of photo. One of \"event\" or \"member\"",
                        "thumb_link": "Link for thumbnail sized photo"
                    }
                ],
                "created": "Time photo album was created, in milliseconds since the epoch",
                "link": "Link to photo album on meetup.com",
                "title": "Album title",
                "short_link": "Shortened link to photo album on meetup.com.\nReturned when 'short_link' is present\nin the 'fields' request parameter",
                "swagger_type": "Photo Album Full",
                "photo_count": "Number of photos uploaded",
                "self": [
                    "Contextual information related to the authenticated member.\nReturned when 'self' is present\nin the 'fields' request parameter",
                    {
                        "actions": "List of actions the member may perform.\n\nCurrently only \"upload_photo\" may be expected",
                        "swagger_type": "PhotoAlbumSelf"
                    }
                ],
                "id": "Unique numeric identifier for photo album",
                "event": [
                    "Event photo album belongs to. This will be absent if the album\nis not associated with an event",
                    {
                        "utc_offset": "The local offset from UTC time, in milliseconds",
                        "name": "Name of event",
                        "id": "Alphanumeric event ID",
                        "time": "UTC start time of the event, in milliseconds since the epoch",
                        "swagger_type": "BasicEvent",
                        "yes_rsvp_count": "Number of yes RSVPs"
                    }
                ],
                "album_photo": [
                    "Cover photo for this photo album",
                    {
                        "highres_link": "Link for full sized photo",
                        "base_url": "A base url that can be use to construct a photo url from its components",
                        "id": "Numeric photo ID",
                        "photo_link": "Link for standard sized photo",
                        "type": "Type of photo. One of \"event\" or \"member\"",
                        "thumb_link": "Link for thumbnail sized photo"
                    }
                ],
                "updated": "Time photo album was last updated in milliseconds since the epoch",
                "group": [
                    "Group associated with this photo album",
                    {
                        "join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
                        "photo_gradient": [
                            "Color combination used generate group duotone",
                            {
                                "dark_color": "Dark color in hexidecimal format",
                                "id": "Unique numeric identifier",
                                "composite_color": "Composite color in hexidecimal format",
                                "light_color": "Light color in hexidecimal format",
                                "swagger_type": "Duotone"
                            }
                        ],
                        "name": "Name of the group",
                        "key_photo": [
                            "Group primary photo",
                            {
                                "highres_link": "Link for full sized photo",
                                "base_url": "A base url that can be use to construct a photo url from its components",
                                "id": "Numeric photo ID",
                                "photo_link": "Link for standard sized photo",
                                "type": "Type of photo. One of \"event\" or \"member\"",
                                "thumb_link": "Link for thumbnail sized photo"
                            }
                        ],
                        "id": "Numeric group ID",
                        "urlname": "Urlname used to identify the group on meetup.com",
                        "group_photo": [
                            "Group photo",
                            {
                                "highres_link": "Link for full sized photo",
                                "base_url": "A base url that can be use to construct a photo url from its components",
                                "id": "Numeric photo ID",
                                "photo_link": "Link for standard sized photo",
                                "type": "Type of photo. One of \"event\" or \"member\"",
                                "thumb_link": "Link for thumbnail sized photo"
                            }
                        ],
                        "swagger_type": "GroupSummary",
                        "who": "What the group calls its members"
                    }
                ]
            },
            "tag": null,
            "responseModel": "GetGroupPhotoAlbums"
        },
        "GetGroupPhotoAlbumsPhotos": {
            "version": "3",
            "name": "GetGroupPhotoAlbumsPhotos",
            "httpMethod": "GET",
            "parameters": {
                "urlname": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "album_id": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "page": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "fields": {
                    "location": "query",
                    "required": false,
                    "description": "A comma-delimited list of optional response fields.\nCurrently supported values are\n\"comment_count\", \"self\" and \"short_link\""
                },
                "desc": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "offset": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "order": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "only": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "omit": {
                    "location": "query",
                    "required": false,
                    "description": null
                }
            },
            "summary": "Lists photos for a given photo album",
            "uri": "/{urlname}/photo_albums/{album_id}/photos",
            "notes": "A valid path parameter for\n__:urlname__ and __:album_id__ is required",
            "response": {
                "utc_offset": "Numeric utc offset based on the timezone of the group\nhosting the event this photo was posted in",
                "comment_count": "The number of comments posted about this photo.\nReturned when 'comment_count' is present\nin the 'fields' request parameter.",
                "highres_link": "Link for full sized photo",
                "created": "Time photo was uploaded, in milliseconds since the epoch",
                "base_url": "A base url that can be use to construct a photo url from its components",
                "link": "Link to photo on meetup.com",
                "caption": "Photo caption, if defined",
                "type": "Type of photo. One of \"event\" or \"member\"",
                "thumb_link": "Link for thumbnail sized photo",
                "short_link": "Shortened link to photo on meetup.com. Returned when 'short_link'\nis present in the 'fields' request parameter",
                "swagger_type": "EventPhoto",
                "photo_album": [
                    "Photo album the photo is associated with",
                    {
                        "photo_count": "Number of photos uploaded",
                        "id": "Unique numeric identifier for photo album",
                        "event": [
                            "Event photo album belongs to. This will be absent if the album\nis not associated with an event",
                            {
                                "utc_offset": "The local offset from UTC time, in milliseconds",
                                "name": "Name of event",
                                "id": "Alphanumeric event ID",
                                "time": "UTC start time of the event, in milliseconds since the epoch",
                                "swagger_type": "BasicEvent",
                                "yes_rsvp_count": "Number of yes RSVPs"
                            }
                        ],
                        "title": "Album title",
                        "swagger_type": "EventPhotoSummary"
                    }
                ],
                "member": [
                    "Member who uploaded the photo. If member has since left the group,\nthis will return a member with an id of 0",
                    {
                        "role": "The leadership role of this member within the group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
                        "name": "Name of member",
                        "photo": [
                            "Member photo, if available.\nMembers who registered via Facebook may not have highres photos",
                            {
                                "highres_link": "Link for full sized photo",
                                "base_url": "A base url that can be use to construct a photo url from its components",
                                "id": "Numeric photo ID",
                                "photo_link": "Link for standard sized photo",
                                "type": "Type of photo. One of \"event\" or \"member\"",
                                "thumb_link": "Link for thumbnail sized photo"
                            }
                        ],
                        "bio": "Intro of member",
                        "id": "Numeric member ID",
                        "title": "Organizer defined title of member. May be absent if not defined",
                        "event_context": [
                            "Member's context within the event. Only returned in the context of an event",
                            {
                                "host": "Boolean indicator for whether this member is a host for the event"
                            }
                        ],
                        "swagger_type": "AttendanceSummary"
                    }
                ],
                "self": [
                    "Context for the authenticated member.\nReturned when 'self' is present\nin the 'fields' request parameter and the authenticated\nis a member of the group the photo is associated with.",
                    {
                        "actions": "List of actions the authenticated member may perform on this photo\nor its containing album, potentially one or more of the following\n\n\"comment\" if member can comment on this photo\n\n\"delete\" if the member can delete the photo\n\n\"edit\" if the member can edit the photo details\n\n\"upload_photo\" if the member can upload new photos"
                    }
                ],
                "id": "Numeric photo ID",
                "photo_link": "Link for standard sized photo",
                "updated": "Time photo was last updated, in milliseconds since the epoch",
                "group": [
                    "Group the photo is associated with.\" +\n          \"|Returned when 'group' is present \" +\n          \"|in the 'fields' request parameter.",
                    {
                        "join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
                        "photo_gradient": [
                            "Color combination used generate group duotone",
                            {
                                "dark_color": "Dark color in hexidecimal format",
                                "id": "Unique numeric identifier",
                                "composite_color": "Composite color in hexidecimal format",
                                "light_color": "Light color in hexidecimal format",
                                "swagger_type": "Duotone"
                            }
                        ],
                        "name": "Name of the group",
                        "key_photo": [
                            "Group primary photo",
                            {
                                "highres_link": "Link for full sized photo",
                                "base_url": "A base url that can be use to construct a photo url from its components",
                                "id": "Numeric photo ID",
                                "photo_link": "Link for standard sized photo",
                                "type": "Type of photo. One of \"event\" or \"member\"",
                                "thumb_link": "Link for thumbnail sized photo"
                            }
                        ],
                        "id": "Numeric group ID",
                        "urlname": "Urlname used to identify the group on meetup.com",
                        "group_photo": [
                            "Group photo",
                            {
                                "highres_link": "Link for full sized photo",
                                "base_url": "A base url that can be use to construct a photo url from its components",
                                "id": "Numeric photo ID",
                                "photo_link": "Link for standard sized photo",
                                "type": "Type of photo. One of \"event\" or \"member\"",
                                "thumb_link": "Link for thumbnail sized photo"
                            }
                        ],
                        "swagger_type": "GroupSummary",
                        "who": "What the group calls its members"
                    }
                ]
            },
            "tag": "list",
            "responseModel": "GetGroupPhotoAlbumsPhotos"
        },
        "GetGroupPhotos": {
            "version": "3",
            "name": "GetGroupPhotos",
            "httpMethod": "GET",
            "parameters": {
                "urlname": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "page": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "fields": {
                    "location": "query",
                    "required": false,
                    "description": "A comma-delimited list of optional response fields.\nCurrently supported values are\n\"comment_count\", \"self\" and \"short_link\""
                },
                "desc": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "offset": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "order": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "only": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "omit": {
                    "location": "query",
                    "required": false,
                    "description": null
                }
            },
            "summary": "Lists of all photos uploaded for the group",
            "uri": "/{urlname}/photos",
            "notes": "A valid path parameter for\n__:urlname__ and __:album_id__ is required\n\nThis endpoint uses HTTP [Link header based pagination](/meetup_api/docs/#v3_json)",
            "response": {
                "utc_offset": "Numeric utc offset based on the timezone of the group\nhosting the event this photo was posted in",
                "comment_count": "The number of comments posted about this photo.\nReturned when 'comment_count' is present\nin the 'fields' request parameter.",
                "highres_link": "Link for full sized photo",
                "created": "Time photo was uploaded, in milliseconds since the epoch",
                "base_url": "A base url that can be use to construct a photo url from its components",
                "link": "Link to photo on meetup.com",
                "caption": "Photo caption, if defined",
                "type": "Type of photo. One of \"event\" or \"member\"",
                "thumb_link": "Link for thumbnail sized photo",
                "short_link": "Shortened link to photo on meetup.com. Returned when 'short_link'\nis present in the 'fields' request parameter",
                "swagger_type": "EventPhoto",
                "photo_album": [
                    "Photo album the photo is associated with",
                    {
                        "photo_count": "Number of photos uploaded",
                        "id": "Unique numeric identifier for photo album",
                        "event": [
                            "Event photo album belongs to. This will be absent if the album\nis not associated with an event",
                            {
                                "utc_offset": "The local offset from UTC time, in milliseconds",
                                "name": "Name of event",
                                "id": "Alphanumeric event ID",
                                "time": "UTC start time of the event, in milliseconds since the epoch",
                                "swagger_type": "BasicEvent",
                                "yes_rsvp_count": "Number of yes RSVPs"
                            }
                        ],
                        "title": "Album title",
                        "swagger_type": "EventPhotoSummary"
                    }
                ],
                "member": [
                    "Member who uploaded the photo. If member has since left the group,\nthis will return a member with an id of 0",
                    {
                        "role": "The leadership role of this member within the group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
                        "name": "Name of member",
                        "photo": [
                            "Member photo, if available.\nMembers who registered via Facebook may not have highres photos",
                            {
                                "highres_link": "Link for full sized photo",
                                "base_url": "A base url that can be use to construct a photo url from its components",
                                "id": "Numeric photo ID",
                                "photo_link": "Link for standard sized photo",
                                "type": "Type of photo. One of \"event\" or \"member\"",
                                "thumb_link": "Link for thumbnail sized photo"
                            }
                        ],
                        "bio": "Intro of member",
                        "id": "Numeric member ID",
                        "title": "Organizer defined title of member. May be absent if not defined",
                        "event_context": [
                            "Member's context within the event. Only returned in the context of an event",
                            {
                                "host": "Boolean indicator for whether this member is a host for the event"
                            }
                        ],
                        "swagger_type": "AttendanceSummary"
                    }
                ],
                "self": [
                    "Context for the authenticated member.\nReturned when 'self' is present\nin the 'fields' request parameter and the authenticated\nis a member of the group the photo is associated with.",
                    {
                        "actions": "List of actions the authenticated member may perform on this photo\nor its containing album, potentially one or more of the following\n\n\"comment\" if member can comment on this photo\n\n\"delete\" if the member can delete the photo\n\n\"edit\" if the member can edit the photo details\n\n\"upload_photo\" if the member can upload new photos"
                    }
                ],
                "id": "Numeric photo ID",
                "photo_link": "Link for standard sized photo",
                "updated": "Time photo was last updated, in milliseconds since the epoch",
                "group": [
                    "Group the photo is associated with.\" +\n          \"|Returned when 'group' is present \" +\n          \"|in the 'fields' request parameter.",
                    {
                        "join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
                        "photo_gradient": [
                            "Color combination used generate group duotone",
                            {
                                "dark_color": "Dark color in hexidecimal format",
                                "id": "Unique numeric identifier",
                                "composite_color": "Composite color in hexidecimal format",
                                "light_color": "Light color in hexidecimal format",
                                "swagger_type": "Duotone"
                            }
                        ],
                        "name": "Name of the group",
                        "key_photo": [
                            "Group primary photo",
                            {
                                "highres_link": "Link for full sized photo",
                                "base_url": "A base url that can be use to construct a photo url from its components",
                                "id": "Numeric photo ID",
                                "photo_link": "Link for standard sized photo",
                                "type": "Type of photo. One of \"event\" or \"member\"",
                                "thumb_link": "Link for thumbnail sized photo"
                            }
                        ],
                        "id": "Numeric group ID",
                        "urlname": "Urlname used to identify the group on meetup.com",
                        "group_photo": [
                            "Group photo",
                            {
                                "highres_link": "Link for full sized photo",
                                "base_url": "A base url that can be use to construct a photo url from its components",
                                "id": "Numeric photo ID",
                                "photo_link": "Link for standard sized photo",
                                "type": "Type of photo. One of \"event\" or \"member\"",
                                "thumb_link": "Link for thumbnail sized photo"
                            }
                        ],
                        "swagger_type": "GroupSummary",
                        "who": "What the group calls its members"
                    }
                ]
            },
            "tag": "list",
            "responseModel": "GetGroupPhotos"
        },
        "GetGroupSimilarGroups": {
            "version": "3",
            "name": "GetGroupSimilarGroups",
            "httpMethod": "GET",
            "parameters": {
                "urlname": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "page": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "offset": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "desc": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "order": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "only": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "omit": {
                    "location": "query",
                    "required": false,
                    "description": null
                }
            },
            "summary": "Renders a list of similar groups",
            "uri": "/{urlname}/similar_groups",
            "notes": "The :urlname path element may be any valid group urlname or domain name.",
            "response": {
                "country": "Country of the group",
                "pending_members": "Number representing the count of members pending organizer approval to join. Returned only when requested in the fields request parameter and the authenticated member has permission to approve members",
                "city": "City of the group",
                "similar_groups": [
                    "Optional fields parameter. Returns up to 5 groups similar to this groups, best suited for the authenticated member when a single group is queried for. Note: this field is being deprecated in favor of making a separate request to /:urlname/similar_groups",
                    {
                        "join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
                        "name": "Name of the group",
                        "lon": "Longitude",
                        "id": "Id of the group",
                        "urlname": "Urlname used to identify the group on meetup.com",
                        "photos": [
                            "Optional fields parameter. A small set of photos from the group",
                            {
                                "highres_link": "Link for full sized photo",
                                "base_url": "A base url that can be use to construct a photo url from its components",
                                "id": "Numeric photo ID",
                                "photo_link": "Link for standard sized photo",
                                "type": "Type of photo. One of \"event\" or \"member\"",
                                "thumb_link": "Link for thumbnail sized photo"
                            }
                        ],
                        "lat": "Latitude",
                        "who": "What this group calls it's members"
                    }
                ],
                "timezone": "This represents the universal timezone identifier for the group",
                "link": "Link to group on meetup.com",
                "description": "Short description of group",
                "lon": "Longitude",
                "welcome_message": "Optional fields parameter. Returns the Group's default welcome message if the authenticated member is the organizer of the group",
                "is_simplehtml": "Optional field, 'true' when the group description has been saved in a simplified HTML format, 'false' otherwise.",
                "group_photo": [
                    "Group photo",
                    {
                        "highres_link": "Link for full sized photo",
                        "base_url": "A base url that can be use to construct a photo url from its components",
                        "id": "Numeric photo ID",
                        "photo_link": "Link for standard sized photo",
                        "type": "Type of photo. One of \"event\" or \"member\"",
                        "thumb_link": "Link for thumbnail sized photo"
                    }
                ],
                "photos": [
                    "A small set of photos from the group",
                    {
                        "highres_link": "Link for full sized photo",
                        "base_url": "A base url that can be use to construct a photo url from its components",
                        "id": "Numeric photo ID",
                        "photo_link": "Link for standard sized photo",
                        "type": "Type of photo. One of \"event\" or \"member\"",
                        "thumb_link": "Link for thumbnail sized photo"
                    }
                ],
                "short_link": "Optional field, a shorted URL for the group",
                "join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
                "approved": "Boolean indicator for whether this Group has been approved or not.\nNew Groups are generally approved (or removed)\nsoon after creation.\nReturned when the \"fields\" request parameter value includes\n\"approved\"",
                "contributions": [
                    "Optional field containing the contribution details of the group",
                    {
                        "thanks": "The 'thank you' message to be given when a contribution is made",
                        "reason": "The reason a member might consider contributing",
                        "potential": "Boolean stating that potential contributions are enabled for the group",
                        "enabled": "Boolean stating if contributions are enabled for the group"
                    }
                ],
                "members": "Number of Meetup members in this group",
                "state": "State of the group, if in US or Canada",
                "simple_html_description": "Description of the group, in simple HTML source format. If this group's description was saved in simple HTML format, the description field will be an HTML translation of this source. Returned when the \"fields\" request parameter value contains \"simple_html_description\"",
                "id": "Numeric group ID",
                "urlname": "Urlname used to identify the group on meetup.com",
                "membership_dues": [
                    "Optional field, returns membership dues for group if any",
                    {
                        "refund_policy": [
                            "Conditions for refunds",
                            {
                                "group_closes": "refund applies when the group closes",
                                "member_leaves": "refund applies when member leaves the group",
                                "none": "indicates there is no refund policy",
                                "member_banned": "refund applies when the member is banned",
                                "custom": "Boolean indicator of a custom refund policy"
                            }
                        ],
                        "reasons": "Array of reasons containing one or more of the following values compensate_organizer, cover_costs, encourage_engagement, improve_meetups, other, provide_supplies, reserve_fund",
                        "methods": [
                            "Methods of payments",
                            {
                                "credit_card": "Boolean indicator that credit cards are accepted",
                                "other": "Boolean indicator that other forms of payment are accepted",
                                "paypal": "Boolean indicator that Paypal payments are accepted",
                                "amazon_payments": "Boolean indicator that Amazon Payments are accepted"
                            }
                        ],
                        "fee": "Numeric fee value",
                        "trial_days": "When present, returns the number of days the group is offering a free trial period for to new members. When not present, this indicates that the group does not offer a trial membership period",
                        "self_payment_required": "Returns true if the authorized user is prevented from participating in the group until a payment is made",
                        "required": "true if dues are required",
                        "swagger_type": "MembershipDues",
                        "fee_desc": "The interval at which dues must be paid. Possible values may include: \"month\", \"year\", \"day\", or \"every other day\"",
                        "currency": "Currency in which the fee is declared",
                        "reasons_other": "An additional reason if specified.",
                        "required_to": "If the dues are required this indicates what they are required for. May be one of 'join' or 'rsvp'"
                    }
                ],
                "lat": "Latitude",
                "next_event": [
                    "The current ongoing or next upcoming event, if one is scheduled",
                    {
                        "utc_offset": "The local offset from UTC time, in milliseconds",
                        "name": "Name of event",
                        "id": "Alphanumeric event ID",
                        "time": "UTC start time of the event, in milliseconds since the epoch",
                        "swagger_type": "BasicEvent",
                        "yes_rsvp_count": "Number of yes RSVPs"
                    }
                ],
                "list_mode": "Optional field representing the policy for who can post the group mailing list. Returned when the \"fields\" request parameter value contains \"list_mode\". Value may be one of \"moderated\", \"off\", \"open\", or \"orgs_only\"",
                "photo_gradient": [
                    "Color combination used generate group duotone",
                    {
                        "dark_color": "Dark color in hexidecimal format",
                        "id": "Unique numeric identifier",
                        "composite_color": "Composite color in hexidecimal format",
                        "light_color": "Light color in hexidecimal format",
                        "swagger_type": "Duotone"
                    }
                ],
                "ga_code": "Optional field return the Google Analytics code for the group. Only members that can edit group settings can see this",
                "localized_country_name": "Name of country of the group",
                "join_info": [
                    "Optional field, lists any questions requested when joining and required fields",
                    {
                        "photo_req": "true if required, false otherwise",
                        "questions": [
                            "List of profile questions organizer would like new members to answer prior to joining",
                            {
                                "question": "The text of the question",
                                "id": "Unique numeric identifier for the question"
                            }
                        ],
                        "questions_req": "true if required, false otherwise",
                        "swagger_type": "GroupJoinInfo"
                    }
                ],
                "visibility": "Who can see this group. One of members, public or public_limited",
                "topics": [
                    "Optional fields parameter. Returns the group's topics",
                    {
                        "name": "Display name of the topic",
                        "urlkey": "The unique keyword used to identify this topic",
                        "id": "Numeric topic id",
                        "lang": "Language topic originates from",
                        "swagger_type": "TopicSummary"
                    }
                ],
                "created": "Time the group was created in milliseconds since the epoch",
                "key_photo": [
                    "Group primary photo",
                    {
                        "highres_link": "Link for full sized photo",
                        "base_url": "A base url that can be use to construct a photo url from its components",
                        "id": "Numeric photo ID",
                        "photo_link": "Link for standard sized photo",
                        "type": "Type of photo. One of \"event\" or \"member\"",
                        "thumb_link": "Link for thumbnail sized photo"
                    }
                ],
                "plain_text_description": "Description of the group, in plain text format. Returned when then \"fields\" request parameter value contains \"plain_text_description\"",
                "list_addr": "Optional field returning list address prefix. List mail will be {list_addr}-list@meetup.com. Announce email will be {list_addr}-announce@meetup.com. You must be a member of the group to see this",
                "organizer": [
                    "Group's primary organizer",
                    {
                        "name": "Name of member",
                        "photo": [
                            "Organizer photo, where defined",
                            {
                                "highres_link": "Link for full sized photo",
                                "base_url": "A base url that can be use to construct a photo url from its components",
                                "id": "Numeric photo ID",
                                "photo_link": "Link for standard sized photo",
                                "type": "Type of photo. One of \"event\" or \"member\"",
                                "thumb_link": "Link for thumbnail sized photo"
                            }
                        ],
                        "bio": "Bio of member",
                        "id": "Numeric member ID",
                        "swagger_type": "SimpleMember"
                    }
                ],
                "leads": "Optional field representing the number of members on this group's leadership team. Returned when the \"fields\" request parameter value contains \"leads\"",
                "last_event": [
                    "Optional field representing the last hosted event, if the group has one. Returned when the \"fields\" request parameter value contains \"last_event\"",
                    {
                        "utc_offset": "The local offset from UTC time, in milliseconds",
                        "name": "Name of event",
                        "id": "Alphanumeric event ID",
                        "time": "UTC start time of the event, in milliseconds since the epoch",
                        "swagger_type": "BasicEvent",
                        "yes_rsvp_count": "Number of yes RSVPs"
                    }
                ],
                "name": "Name of the group",
                "member_cap": "Number representing the maximum number of active members this group can have if capped. Returned only when requested in the fields request parameter and the authenticated member has permission to approve members",
                "self": [
                    "Optional field, contains details specific to the authorized user in this Meetup Group",
                    {
                        "visited": "Member's last visit to the group site, in milliseconds since the epoch",
                        "role": "Member's role in group, if any: Organizer, Assistant Organizer, Event Organizer, etc.",
                        "membership_dues": [
                            "Member's membership dues if the group has membership dues",
                            {
                                "paid_until": "For groups with recurring billing periods, this returns the time in milliseconds since the epoch that the member's next payment is due",
                                "total_amount": "Total amount paid",
                                "cancelled": "For groups with recurring billing periods, this Boolean field indicates that membership dues were cancelled",
                                "transaction_time": "Time the transaction was made in milliseconds since the epoch",
                                "exempt": "For groups with recurring billing periods, this Boolean field indicates that the member is exempt from payment.",
                                "trial": [
                                    "If the group offers a trial membership, this indicates information for unpaid members.",
                                    {
                                        "days": "The total number of trial days offered by the group",
                                        "days_remaining": "The number of days remaining in the member's trial period",
                                        "expired": "Boolean indicator of whether or not the unpaid subscription has expired or not"
                                    }
                                ],
                                "period_status": "For groups with recurring billing periods, this returns one of the following values grace paid pending unpaid"
                            }
                        ],
                        "actions": "List of actions the authenticated member may perform, potentially \"broadcast_message\": the ability to broadcast messages to group members via the \"announce\" mailing list, \"event_create\": the ability to create new events, \"event_draft\": the ability to save new events as drafts, \"role_assign\": the ability to assign member roles, \"edit\": the ability to edit group settings, \"member_approval\": the ability to approve or decline member requests to join, or \"subscription_upgrade\": the ability to upgrade this group's subscription plan",
                        "status": "Indicates the authorized user's membership with this group. Value may be one of \"none\", \"pending\", \"pending_payment\", \"active\", or \"blocked\""
                    }
                ],
                "category": [
                    "The primary category of the group, if the group has one",
                    {
                        "name": "Display name of the category",
                        "sort_name": "Name used for sorting",
                        "id": "Numeric category id",
                        "shortname": "String identifier of the category",
                        "swagger_type": "GroupCategory"
                    }
                ],
                "who": "What the group calls its members"
            },
            "tag": null,
            "responseModel": "GetGroupSimilarGroups"
        },
        "GetGroupVenues": {
            "version": "3",
            "name": "GetGroupVenues",
            "httpMethod": "GET",
            "parameters": {
                "urlname": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "page": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "offset": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "desc": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "order": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "only": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "omit": {
                    "location": "query",
                    "required": false,
                    "description": null
                }
            },
            "summary": "Returns venues a group has previously hosted events at",
            "uri": "/{urlname}/venues",
            "notes": "The :urlname path element may be any valid group urlname or domain name. All parameters are optional",
            "response": {
                "zip": "If available, the venue's ZIP code",
                "country": "If available, the name of the venue's country code",
                "localized_country_name": "If available, the localized name of the venue's country",
                "visibility": "'private' if this venue is a private home, otherwise 'public'",
                "city": "If available, the name of the venue's city",
                "address_1": "If available, the first address line of the venue",
                "address_2": "If available, the second address line of the venue",
                "address_3": "If available, the third address line of the venue",
                "rating": "The average rating for the venue",
                "lon": "If available, the venue's longitude",
                "rating_count": "The number of times the venue was rated",
                "taglist": "list of string tags associated with the venue. returned when fields=taglist",
                "phone": "If available, the venue's photo number",
                "name": "If available, the venue's name",
                "state": "If available, and the venue's country id is within the US or Canada, the venue's state",
                "id": "Id, of the venue",
                "lat": "If available, the venue's latitude"
            },
            "tag": "list",
            "responseModel": "GetGroupVenues"
        },
        "GetMembers": {
            "version": "3",
            "name": "GetMembers",
            "httpMethod": "GET",
            "parameters": {
                "member_id": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "fields": {
                    "location": "query",
                    "required": false,
                    "description": "A comma-delimited string of optional response field names.\nThis may include groups, privacy, and topics"
                },
                "page": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "offset": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "desc": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "order": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "only": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "omit": {
                    "location": "query",
                    "required": false,
                    "description": null
                }
            },
            "summary": "Gets Member Profiles.\nFor Group Profiles, see [this endpoint](/meetup_api/docs/:urlname/members/:member_id)",
            "uri": "/members/{member_id}",
            "notes": "A valid path parameter for :member_id is required. A value of \"self\"\nmay be used in place of a numeric identifier to represent the authenticated\nMember's id",
            "response": {
                "birthday": [
                    "Returned only when the fields request parameter value includes 'birthday'\nand only for the authenticated member when defined",
                    {
                        "month": "Numeric month member was born. May be absent if not defined",
                        "year": "Year member was born",
                        "day": "Numeric day member was born. May be absent if not defined"
                    }
                ],
                "country": "Country code associated with Member's location",
                "localized_country_name": "Name of country associated with Member's location",
                "gender": "Returned only when the fields request parameter value includes \"gender\"\nand only for the authenticated member.\nValue may be one of \"female\", \"male\", \"none\", or \"other\".\nThis field may be absent where gender is not defined",
                "city": "City associated with Member's location",
                "topics": [
                    "List of Meetup topics Member has interest in.\nReturned only when fields request parameter value includes \"topics\".\nThis list may be omitted when member has opted to hide the topics from others.",
                    {
                        "name": "Display name of the topic",
                        "urlkey": "The unique keyword used to identify this topic",
                        "id": "Numeric topic id",
                        "lang": "Language topic originates from",
                        "swagger_type": "TopicSummary"
                    }
                ],
                "joined": "Time member joined, represented as milliseconds since the epoch",
                "photo": [
                    "Member photo. May be absent if member has not chosen one.\nIn group contexts, the Member's Group profile photo will be returned.",
                    {
                        "highres_link": "Link for full sized photo",
                        "base_url": "A base url that can be use to construct a photo url from its components",
                        "id": "Numeric photo ID",
                        "photo_link": "Link for standard sized photo",
                        "type": "Type of photo. One of \"event\" or \"member\"",
                        "thumb_link": "Link for thumbnail sized photo"
                    }
                ],
                "bio": "Member bio. When profile does not belong to the authenticated member, this may be omitted if member opted to hide their bio from others",
                "privacy": [
                    "Member's privacy preferences\nReturned only when the \"fields\" request parameter value includes \"privacy\"",
                    {
                        "groups": "may be 'hidden' or 'visible",
                        "bio": "may be 'hidden' or 'visible'",
                        "topics": "may be 'hidden' or 'visible'",
                        "swagger_type": "MemberPrivacy",
                        "facebook": "may be 'hidden' of 'visible'.\nIf absent, the member has not connected their Facebook account to Meetup"
                    }
                ],
                "lon": "Geographic longitude associated with Member's location",
                "memberships": [
                    "Group memberships affiliated with this member.\nReturned only when fields request parameter value includes \"memberships\".\nThis list may be omitted if the member has opted to hide their groups from others.",
                    {
                        "member": [
                            "Memberships where member holds a basic membership",
                            {
                                "role": "The leadership role of this member within the Group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
                                "created": "The time this member joined the Group, represented as milliseconds since the epoch",
                                "visited": "The last time this member visited the Group, represented as milliseconds since the epoch",
                                "title": "Organizer defined title of member. May be absent if not defined",
                                "updated": "The last time this member edited their Group profile, represented as milliseconds since the epoch",
                                "swagger_type": "GroupProfileListEntry",
                                "status": "Membership status in this Group.\nValue may be one of\nactive, blocked, pending, pending_payment or none",
                                "group": [
                                    "The group associated with this membership",
                                    {
                                        "join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
                                        "photo_gradient": [
                                            "Color combination used generate group duotone",
                                            {
                                                "dark_color": "Dark color in hexidecimal format",
                                                "id": "Unique numeric identifier",
                                                "composite_color": "Composite color in hexidecimal format",
                                                "light_color": "Light color in hexidecimal format",
                                                "swagger_type": "Duotone"
                                            }
                                        ],
                                        "name": "Name of the group",
                                        "key_photo": [
                                            "Group primary photo",
                                            {
                                                "highres_link": "Link for full sized photo",
                                                "base_url": "A base url that can be use to construct a photo url from its components",
                                                "id": "Numeric photo ID",
                                                "photo_link": "Link for standard sized photo",
                                                "type": "Type of photo. One of \"event\" or \"member\"",
                                                "thumb_link": "Link for thumbnail sized photo"
                                            }
                                        ],
                                        "id": "Numeric group ID",
                                        "urlname": "Urlname used to identify the group on meetup.com",
                                        "group_photo": [
                                            "Group photo",
                                            {
                                                "highres_link": "Link for full sized photo",
                                                "base_url": "A base url that can be use to construct a photo url from its components",
                                                "id": "Numeric photo ID",
                                                "photo_link": "Link for standard sized photo",
                                                "type": "Type of photo. One of \"event\" or \"member\"",
                                                "thumb_link": "Link for thumbnail sized photo"
                                            }
                                        ],
                                        "swagger_type": "GroupSummary",
                                        "who": "What the group calls its members"
                                    }
                                ]
                            }
                        ],
                        "organizer": [
                            "Memberships where member is on the group's lead team",
                            {
                                "role": "The leadership role of this member within the Group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
                                "created": "The time this member joined the Group, represented as milliseconds since the epoch",
                                "visited": "The last time this member visited the Group, represented as milliseconds since the epoch",
                                "title": "Organizer defined title of member. May be absent if not defined",
                                "updated": "The last time this member edited their Group profile, represented as milliseconds since the epoch",
                                "swagger_type": "GroupProfileListEntry",
                                "status": "Membership status in this Group.\nValue may be one of\nactive, blocked, pending, pending_payment or none",
                                "group": [
                                    "The group associated with this membership",
                                    {
                                        "join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
                                        "photo_gradient": [
                                            "Color combination used generate group duotone",
                                            {
                                                "dark_color": "Dark color in hexidecimal format",
                                                "id": "Unique numeric identifier",
                                                "composite_color": "Composite color in hexidecimal format",
                                                "light_color": "Light color in hexidecimal format",
                                                "swagger_type": "Duotone"
                                            }
                                        ],
                                        "name": "Name of the group",
                                        "key_photo": [
                                            "Group primary photo",
                                            {
                                                "highres_link": "Link for full sized photo",
                                                "base_url": "A base url that can be use to construct a photo url from its components",
                                                "id": "Numeric photo ID",
                                                "photo_link": "Link for standard sized photo",
                                                "type": "Type of photo. One of \"event\" or \"member\"",
                                                "thumb_link": "Link for thumbnail sized photo"
                                            }
                                        ],
                                        "id": "Numeric group ID",
                                        "urlname": "Urlname used to identify the group on meetup.com",
                                        "group_photo": [
                                            "Group photo",
                                            {
                                                "highres_link": "Link for full sized photo",
                                                "base_url": "A base url that can be use to construct a photo url from its components",
                                                "id": "Numeric photo ID",
                                                "photo_link": "Link for standard sized photo",
                                                "type": "Type of photo. One of \"event\" or \"member\"",
                                                "thumb_link": "Link for thumbnail sized photo"
                                            }
                                        ],
                                        "swagger_type": "GroupSummary",
                                        "who": "What the group calls its members"
                                    }
                                ]
                            }
                        ]
                    }
                ],
                "swagger_type": "Profile",
                "other_services": [
                    "An object whose key's are the names of associated external\nnetworks and values are identities within those networks.\nThe keys may be one of facebook, flickr, linkedin, tumblr or twitter.\nReturned only when \"fields\" request parameter value\nincludes \"other_services\"",
                    {
                        "identifier": "A unique string identifier",
                        "url": "A url for this identity. May be the same as identifier in some cases",
                        "swagger_type": "SocialNetwork"
                    }
                ],
                "stats": [
                    "High level numeric member statistics\nReturned only when fields request parameter value includes 'stats'",
                    {
                        "groups": "Number of Meetup Group memberships.\nMay be 0 if member chose to hide their groups from others",
                        "rsvps": "Number of RSVPs.\nMay be 0 if member chose to hide their groups from others",
                        "topics": "Number of Meetup topics member is interested in.\nMay be 0 if member chose to hide their topics from others"
                    }
                ],
                "last_event": [
                    "Optional field representing the last RSVP'd Meetup this member attended within the last two weeks,\nwhere available. Returned when the \"fields\"\nrequest parameter value contains \"last_event\"\nonly for the profile of the authenticated member",
                    {
                        "utc_offset": "The local offset from UTC time, in milliseconds",
                        "rsvp_limit": "The number of \"yes\" RSVPS an event has capacity for",
                        "venue": [
                            "The event venue, present only if selected and not hidden by an organizer",
                            {
                                "zip": "ZIP code if, venue is in US or Canada",
                                "country": "Country code of venue",
                                "localized_country_name": "The localized name of the venue's country",
                                "city": "City of venue",
                                "address_1": "Line 1 of venue address",
                                "address_2": "Line 2 of venue address",
                                "address_3": "Line 3 of venue address",
                                "lon": "Approximate longitude",
                                "phone": "Phone number of venue",
                                "name": "Venue name",
                                "state": "State of venue where available",
                                "id": "Unique numeric venue id",
                                "repinned": "true if the editor of the event altered the original venues pin location, false otherwise",
                                "lat": "Approximate latitude"
                            }
                        ],
                        "survey_questions": [
                            "Contains a list of organizer-defined survey questions intended to be asked of RSVPing members.\nReturned when the \"fields\" request parameter\ncontains \"survey_questions\"",
                            {
                                "question": "Question text",
                                "id": "Numeric question identifier"
                            }
                        ],
                        "waitlist_count": "Number of members on the waitlist, if one exists",
                        "created": "Creation time of the event, in milliseconds since the epoch",
                        "fee": [
                            "Ticketing fee information for events that support payments",
                            {
                                "amount": "Amount of the fee",
                                "accepts": "Acceptable methods of payments may be one of \"paypal\", \"amazon\", \"wepay\", or \"cash\"",
                                "description": "Fee description, typically \"per-person\"",
                                "currency": "Currency accepted for fee",
                                "label": "Label for fee, typically \"Price\"",
                                "required": "Boolean flag indicating if this fee is required to RSVP"
                            }
                        ],
                        "swagger_type": "EventSummary",
                        "yes_rsvp_count": "Number of yes RSVPs including guests",
                        "duration": "Scheduled event duration in milliseconds, if an end time is specified by the organizer. When not present, a default of 3 hours may be assumed by applications",
                        "photo_album": [
                            "Information about photo uploads for this event",
                            {
                                "photo_count": "Number of photos uploaded",
                                "photo_sample": [
                                    "A small collection of photos uploaded for this event",
                                    {
                                        "highres_link": "Link for full sized photo",
                                        "base_url": "A base url that can be use to construct a photo url from its components",
                                        "id": "Numeric photo ID",
                                        "photo_link": "Link for standard sized photo",
                                        "type": "Type of photo. One of \"event\" or \"member\"",
                                        "thumb_link": "Link for thumbnail sized photo"
                                    }
                                ],
                                "id": "Unique numeric identifier for photo album",
                                "event": [
                                    "Event photo album belongs to. This will be absent if the album\nis not associated with an event",
                                    {
                                        "utc_offset": "The local offset from UTC time, in milliseconds",
                                        "name": "Name of event",
                                        "id": "Alphanumeric event ID",
                                        "time": "UTC start time of the event, in milliseconds since the epoch",
                                        "swagger_type": "BasicEvent",
                                        "yes_rsvp_count": "Number of yes RSVPs"
                                    }
                                ],
                                "title": "Album title",
                                "swagger_type": "PhotoAlbumSummary"
                            }
                        ],
                        "rsvp_sample": [
                            "A small collection RSVPs for members attending this event, returned when the \"fields\" request parameter value includes \"rsvp_sample\"",
                            {
                                "member": [
                                    "Member who RSVP'd",
                                    {
                                        "role": "The leadership role of this member within the group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
                                        "name": "Name of member",
                                        "photo": [
                                            "Member photo, if available.\nMembers who registered via Facebook may not have highres photos",
                                            {
                                                "highres_link": "Link for full sized photo",
                                                "base_url": "A base url that can be use to construct a photo url from its components",
                                                "id": "Numeric photo ID",
                                                "photo_link": "Link for standard sized photo",
                                                "type": "Type of photo. One of \"event\" or \"member\"",
                                                "thumb_link": "Link for thumbnail sized photo"
                                            }
                                        ],
                                        "self": [
                                            "Represents the authenticated member's relation to member.\nReturned with the \"fields\" request parameter includes \"self\" and\nthe target member is not the authenticated member",
                                            {
                                                "common": [
                                                    "Information the authenticated member has in common with this member",
                                                    {
                                                        "groups": [
                                                            "List of common groups",
                                                            {
                                                                "join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
                                                                "photo_gradient": [
                                                                    "Color combination used generate group duotone",
                                                                    {
                                                                        "dark_color": "Dark color in hexidecimal format",
                                                                        "id": "Unique numeric identifier",
                                                                        "composite_color": "Composite color in hexidecimal format",
                                                                        "light_color": "Light color in hexidecimal format",
                                                                        "swagger_type": "Duotone"
                                                                    }
                                                                ],
                                                                "name": "Name of the group",
                                                                "key_photo": [
                                                                    "Group primary photo",
                                                                    {
                                                                        "highres_link": "Link for full sized photo",
                                                                        "base_url": "A base url that can be use to construct a photo url from its components",
                                                                        "id": "Numeric photo ID",
                                                                        "photo_link": "Link for standard sized photo",
                                                                        "type": "Type of photo. One of \"event\" or \"member\"",
                                                                        "thumb_link": "Link for thumbnail sized photo"
                                                                    }
                                                                ],
                                                                "id": "Numeric group ID",
                                                                "urlname": "Urlname used to identify the group on meetup.com",
                                                                "group_photo": [
                                                                    "Group photo",
                                                                    {
                                                                        "highres_link": "Link for full sized photo",
                                                                        "base_url": "A base url that can be use to construct a photo url from its components",
                                                                        "id": "Numeric photo ID",
                                                                        "photo_link": "Link for standard sized photo",
                                                                        "type": "Type of photo. One of \"event\" or \"member\"",
                                                                        "thumb_link": "Link for thumbnail sized photo"
                                                                    }
                                                                ],
                                                                "swagger_type": "GroupSummary",
                                                                "who": "What the group calls its members"
                                                            }
                                                        ]
                                                    }
                                                ],
                                                "actions": "List of actions available for the authenticated member to perform.\nCurrently only \"message\" is supported",
                                                "blocks": "Boolean indication of whether or not the authenticated member blocks this member",
                                                "friends": "Boolean indication of whether or not the authenticated member is a friend of the member",
                                                "swagger_type": "MemberSelf"
                                            }
                                        ],
                                        "bio": "Intro of member",
                                        "id": "Numeric member ID",
                                        "title": "Organizer defined title of member. May be absent if not defined",
                                        "event_context": [
                                            "Member's context within the event. Only returned in the context of an event",
                                            {
                                                "host": "Boolean indicator for whether this member is a host for the event"
                                            }
                                        ],
                                        "swagger_type": "AttendanceSummary"
                                    }
                                ],
                                "id": "Unique numeric identifier for the RSVP. May be -1 for events scheduled in the future",
                                "updated": "Last modified time of the RSVP, in milliseconds since the epoch",
                                "swagger_type": "RSVPSummary",
                                "created": "Creation time of the RSVP, in milliseconds since the epoch"
                            }
                        ],
                        "series": [
                            "Returned when the \"fields\" request parameter value includes \"series\" for events that are part of a series of events",
                            {
                                "end_date": "Date when this series ends/ended, in milliseconds since the epoch",
                                "description": "Human displayable description of how often events in this series occur",
                                "id": "Unique numeric identifier for the series",
                                "swagger_type": "RecurrenceSchedule",
                                "weekly": [
                                    "Returned for events that are part of a weekly recurring series of events",
                                    {
                                        "days_of_week": "List of integers 1-7 (Monday-Sunday) of days of week recurrence occurs upon",
                                        "end_date": "Date when series ends/ended, in LocalDate (yyyy-MM-dd) format",
                                        "interval": "Integer number of weeks between each recurrence"
                                    }
                                ],
                                "start_date": "Date when this series begins/began, in milliseconds since the epoch"
                            }
                        ],
                        "name": "Name of the event",
                        "id": "A unique alphanumeric identifier for event",
                        "time": "UTC start time of the event, in milliseconds since the epoch",
                        "updated": "Last modified time for the event in milliseconds since the epoch",
                        "group": [
                            "Group hosting the event",
                            {
                                "join_mode": "Indicator of how new members may be able to join. be one of \"open\", \"approval\" or \"closed\"",
                                "name": "Name of the group",
                                "lon": "Approximate group longitude",
                                "id": "Numeric identifier for the group",
                                "urlname": "Alphanumeric urlname identifier for the group",
                                "lat": "Approximate group latitude",
                                "who": "What the group calls its members"
                            }
                        ]
                    }
                ],
                "name": "Display name for the member",
                "self": [
                    "Represents the authenticated member's relation to member.\nReturned when \"fields\" request parameter value includes \"self\" and\nthe target member is not the authenticated member",
                    {
                        "common": [
                            "Information the authenticated member has in common with this member",
                            {
                                "groups": [
                                    "List of common groups",
                                    {
                                        "join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
                                        "photo_gradient": [
                                            "Color combination used generate group duotone",
                                            {
                                                "dark_color": "Dark color in hexidecimal format",
                                                "id": "Unique numeric identifier",
                                                "composite_color": "Composite color in hexidecimal format",
                                                "light_color": "Light color in hexidecimal format",
                                                "swagger_type": "Duotone"
                                            }
                                        ],
                                        "name": "Name of the group",
                                        "key_photo": [
                                            "Group primary photo",
                                            {
                                                "highres_link": "Link for full sized photo",
                                                "base_url": "A base url that can be use to construct a photo url from its components",
                                                "id": "Numeric photo ID",
                                                "photo_link": "Link for standard sized photo",
                                                "type": "Type of photo. One of \"event\" or \"member\"",
                                                "thumb_link": "Link for thumbnail sized photo"
                                            }
                                        ],
                                        "id": "Numeric group ID",
                                        "urlname": "Urlname used to identify the group on meetup.com",
                                        "group_photo": [
                                            "Group photo",
                                            {
                                                "highres_link": "Link for full sized photo",
                                                "base_url": "A base url that can be use to construct a photo url from its components",
                                                "id": "Numeric photo ID",
                                                "photo_link": "Link for standard sized photo",
                                                "type": "Type of photo. One of \"event\" or \"member\"",
                                                "thumb_link": "Link for thumbnail sized photo"
                                            }
                                        ],
                                        "swagger_type": "GroupSummary",
                                        "who": "What the group calls its members"
                                    }
                                ]
                            }
                        ],
                        "actions": "List of actions available for the authenticated member to perform.\nCurrently only \"message\" is supported",
                        "blocks": "Boolean indication of whether or not the authenticated member blocks this member",
                        "friends": "Boolean indication of whether or not the authenticated member is a friend of the member",
                        "swagger_type": "MemberSelf"
                    }
                ],
                "state": "State associated with Member's location, where available",
                "id": "Unique numeric identifier for the member",
                "lat": "Geographic latitude associated with Member's location",
                "next_event": [
                    "Optional field representing either the current ongoing or next RSVP'd Meetup, where available.\nReturned when the \"fields\"\nrequest parameter value contains \"next_event\"\nonly for the profile of the authenticated member",
                    {
                        "utc_offset": "The local offset from UTC time, in milliseconds",
                        "rsvp_limit": "The number of \"yes\" RSVPS an event has capacity for",
                        "venue": [
                            "The event venue, present only if selected and not hidden by an organizer",
                            {
                                "zip": "ZIP code if, venue is in US or Canada",
                                "country": "Country code of venue",
                                "localized_country_name": "The localized name of the venue's country",
                                "city": "City of venue",
                                "address_1": "Line 1 of venue address",
                                "address_2": "Line 2 of venue address",
                                "address_3": "Line 3 of venue address",
                                "lon": "Approximate longitude",
                                "phone": "Phone number of venue",
                                "name": "Venue name",
                                "state": "State of venue where available",
                                "id": "Unique numeric venue id",
                                "repinned": "true if the editor of the event altered the original venues pin location, false otherwise",
                                "lat": "Approximate latitude"
                            }
                        ],
                        "survey_questions": [
                            "Contains a list of organizer-defined survey questions intended to be asked of RSVPing members.\nReturned when the \"fields\" request parameter\ncontains \"survey_questions\"",
                            {
                                "question": "Question text",
                                "id": "Numeric question identifier"
                            }
                        ],
                        "waitlist_count": "Number of members on the waitlist, if one exists",
                        "created": "Creation time of the event, in milliseconds since the epoch",
                        "fee": [
                            "Ticketing fee information for events that support payments",
                            {
                                "amount": "Amount of the fee",
                                "accepts": "Acceptable methods of payments may be one of \"paypal\", \"amazon\", \"wepay\", or \"cash\"",
                                "description": "Fee description, typically \"per-person\"",
                                "currency": "Currency accepted for fee",
                                "label": "Label for fee, typically \"Price\"",
                                "required": "Boolean flag indicating if this fee is required to RSVP"
                            }
                        ],
                        "swagger_type": "EventSummary",
                        "yes_rsvp_count": "Number of yes RSVPs including guests",
                        "duration": "Scheduled event duration in milliseconds, if an end time is specified by the organizer. When not present, a default of 3 hours may be assumed by applications",
                        "photo_album": [
                            "Information about photo uploads for this event",
                            {
                                "photo_count": "Number of photos uploaded",
                                "photo_sample": [
                                    "A small collection of photos uploaded for this event",
                                    {
                                        "highres_link": "Link for full sized photo",
                                        "base_url": "A base url that can be use to construct a photo url from its components",
                                        "id": "Numeric photo ID",
                                        "photo_link": "Link for standard sized photo",
                                        "type": "Type of photo. One of \"event\" or \"member\"",
                                        "thumb_link": "Link for thumbnail sized photo"
                                    }
                                ],
                                "id": "Unique numeric identifier for photo album",
                                "event": [
                                    "Event photo album belongs to. This will be absent if the album\nis not associated with an event",
                                    {
                                        "utc_offset": "The local offset from UTC time, in milliseconds",
                                        "name": "Name of event",
                                        "id": "Alphanumeric event ID",
                                        "time": "UTC start time of the event, in milliseconds since the epoch",
                                        "swagger_type": "BasicEvent",
                                        "yes_rsvp_count": "Number of yes RSVPs"
                                    }
                                ],
                                "title": "Album title",
                                "swagger_type": "PhotoAlbumSummary"
                            }
                        ],
                        "rsvp_sample": [
                            "A small collection RSVPs for members attending this event, returned when the \"fields\" request parameter value includes \"rsvp_sample\"",
                            {
                                "member": [
                                    "Member who RSVP'd",
                                    {
                                        "role": "The leadership role of this member within the group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
                                        "name": "Name of member",
                                        "photo": [
                                            "Member photo, if available.\nMembers who registered via Facebook may not have highres photos",
                                            {
                                                "highres_link": "Link for full sized photo",
                                                "base_url": "A base url that can be use to construct a photo url from its components",
                                                "id": "Numeric photo ID",
                                                "photo_link": "Link for standard sized photo",
                                                "type": "Type of photo. One of \"event\" or \"member\"",
                                                "thumb_link": "Link for thumbnail sized photo"
                                            }
                                        ],
                                        "self": [
                                            "Represents the authenticated member's relation to member.\nReturned with the \"fields\" request parameter includes \"self\" and\nthe target member is not the authenticated member",
                                            {
                                                "common": [
                                                    "Information the authenticated member has in common with this member",
                                                    {
                                                        "groups": [
                                                            "List of common groups",
                                                            {
                                                                "join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
                                                                "photo_gradient": [
                                                                    "Color combination used generate group duotone",
                                                                    {
                                                                        "dark_color": "Dark color in hexidecimal format",
                                                                        "id": "Unique numeric identifier",
                                                                        "composite_color": "Composite color in hexidecimal format",
                                                                        "light_color": "Light color in hexidecimal format",
                                                                        "swagger_type": "Duotone"
                                                                    }
                                                                ],
                                                                "name": "Name of the group",
                                                                "key_photo": [
                                                                    "Group primary photo",
                                                                    {
                                                                        "highres_link": "Link for full sized photo",
                                                                        "base_url": "A base url that can be use to construct a photo url from its components",
                                                                        "id": "Numeric photo ID",
                                                                        "photo_link": "Link for standard sized photo",
                                                                        "type": "Type of photo. One of \"event\" or \"member\"",
                                                                        "thumb_link": "Link for thumbnail sized photo"
                                                                    }
                                                                ],
                                                                "id": "Numeric group ID",
                                                                "urlname": "Urlname used to identify the group on meetup.com",
                                                                "group_photo": [
                                                                    "Group photo",
                                                                    {
                                                                        "highres_link": "Link for full sized photo",
                                                                        "base_url": "A base url that can be use to construct a photo url from its components",
                                                                        "id": "Numeric photo ID",
                                                                        "photo_link": "Link for standard sized photo",
                                                                        "type": "Type of photo. One of \"event\" or \"member\"",
                                                                        "thumb_link": "Link for thumbnail sized photo"
                                                                    }
                                                                ],
                                                                "swagger_type": "GroupSummary",
                                                                "who": "What the group calls its members"
                                                            }
                                                        ]
                                                    }
                                                ],
                                                "actions": "List of actions available for the authenticated member to perform.\nCurrently only \"message\" is supported",
                                                "blocks": "Boolean indication of whether or not the authenticated member blocks this member",
                                                "friends": "Boolean indication of whether or not the authenticated member is a friend of the member",
                                                "swagger_type": "MemberSelf"
                                            }
                                        ],
                                        "bio": "Intro of member",
                                        "id": "Numeric member ID",
                                        "title": "Organizer defined title of member. May be absent if not defined",
                                        "event_context": [
                                            "Member's context within the event. Only returned in the context of an event",
                                            {
                                                "host": "Boolean indicator for whether this member is a host for the event"
                                            }
                                        ],
                                        "swagger_type": "AttendanceSummary"
                                    }
                                ],
                                "id": "Unique numeric identifier for the RSVP. May be -1 for events scheduled in the future",
                                "updated": "Last modified time of the RSVP, in milliseconds since the epoch",
                                "swagger_type": "RSVPSummary",
                                "created": "Creation time of the RSVP, in milliseconds since the epoch"
                            }
                        ],
                        "series": [
                            "Returned when the \"fields\" request parameter value includes \"series\" for events that are part of a series of events",
                            {
                                "end_date": "Date when this series ends/ended, in milliseconds since the epoch",
                                "description": "Human displayable description of how often events in this series occur",
                                "id": "Unique numeric identifier for the series",
                                "swagger_type": "RecurrenceSchedule",
                                "weekly": [
                                    "Returned for events that are part of a weekly recurring series of events",
                                    {
                                        "days_of_week": "List of integers 1-7 (Monday-Sunday) of days of week recurrence occurs upon",
                                        "end_date": "Date when series ends/ended, in LocalDate (yyyy-MM-dd) format",
                                        "interval": "Integer number of weeks between each recurrence"
                                    }
                                ],
                                "start_date": "Date when this series begins/began, in milliseconds since the epoch"
                            }
                        ],
                        "name": "Name of the event",
                        "id": "A unique alphanumeric identifier for event",
                        "time": "UTC start time of the event, in milliseconds since the epoch",
                        "updated": "Last modified time for the event in milliseconds since the epoch",
                        "group": [
                            "Group hosting the event",
                            {
                                "join_mode": "Indicator of how new members may be able to join. be one of \"open\", \"approval\" or \"closed\"",
                                "name": "Name of the group",
                                "lon": "Approximate group longitude",
                                "id": "Numeric identifier for the group",
                                "urlname": "Alphanumeric urlname identifier for the group",
                                "lat": "Approximate group latitude",
                                "who": "What the group calls its members"
                            }
                        ]
                    }
                ],
                "messaging_pref": "The member's preference for being contacted from other members on the platform.\nReturned only when the fields request parameter value includes \"messaging_pref\".\nMay be one of the following: \"all_members\", \"groups_only\", or \"orgs_only\""
            },
            "tag": "get",
            "responseModel": "GetMembers"
        },
        "GetNotifications": {
            "version": "3",
            "name": "GetNotifications",
            "httpMethod": "GET",
            "parameters": {
                "fields": {
                    "location": "query",
                    "required": false,
                    "description": "Request that additional fields (separated by commas) be included in the output."
                },
                "page": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "offset": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "desc": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "order": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "only": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "omit": {
                    "location": "query",
                    "required": false,
                    "description": null
                }
            },
            "summary": "Returns all recent Meetup notifications for the authorized member. To mark notifications read use [/notifications/read](/meetup_api/docs/notifications/read/) endpoint. To get the authenticated Member's current unread count, request it in an [HTTP header](/meetup_api/docs/#meta-headers).",
            "uri": "/notifications",
            "notes": "No parameters are required",
            "response": {
                "read": "True or False indicating whether a notification has been read",
                "kind": "Identifier indicating the kind of notification.\n\nThis may be one of comment, custom, donation_expire_notice, donation_potential_payment, dues, dues_confirm, dues_trial_notice, event_announce, event_announce_to_orgs, event_announce_untrusted, event_cancel, event_change, event_interest_org_push, event_reminder, external_url, group_announce, group_announce_push, invitation_acceptance, join, like, mug_comm_announce, mug_comm_comment, mug_comm_comment_like, mug_comm_invite, org_approve, outside_mup_rec, pending_member, photo, photo_tag, post_attendance, reply, rsvp, rsvp_confirm, spot_open, webview_url",
                "link": "Link to resource notification was triggered by",
                "photo": [
                    "A photo related to the notifications. Potentially absent",
                    {
                        "highres_link": "Link for full sized photo",
                        "base_url": "A base url that can be use to construct a photo url from its components",
                        "id": "Numeric photo ID",
                        "photo_link": "Link for standard sized photo",
                        "type": "Type of photo. One of \"event\" or \"member\"",
                        "thumb_link": "Link for thumbnail sized photo"
                    }
                ],
                "setting": [
                    "The setting that controls the member's preference for receiving sendings of this kind of notification",
                    {
                        "email": [
                            "A push setting if available",
                            {
                                "name": "display code"
                            }
                        ],
                        "push": [
                            "An email setting if available",
                            {
                                "name": "display code"
                            }
                        ]
                    }
                ],
                "target": [
                    "kind specific properties which may be used to navigate back to the source of the notification",
                    {
                        "member_id": "If needed, the numeric ID of the member involved in the notification",
                        "event_id": "If needed, the alphanumeric ID of the event which relates to this notification",
                        "photo_id": "If needed, a numeric photo ID",
                        "group_id": "If needed, the numeric ID of the group which relates to this notification",
                        "pending": "If needed, a boolean valid indicating the membership status of member_id in the context of a group",
                        "comment_parent_id": "If needed, the numeric ID of the top-level comment which relates to this notification",
                        "album_id": "If needed, a numeric photo album ID",
                        "comment_id": "If needed, the numeric ID of the comment which relates to this notification",
                        "type": "Identifier indicating the view that should be navigated to.\n\nThese may be one of: group, group_member_list, group_member_profile, event, topic_picker, calendar, group_list, event_photos, event_comments, friends_calendar, friends_groups, start_group, external_url, event_location, deeplink_url",
                        "group_urlname": "If needed, the alpha numeric urlname of the group which relates to this notification"
                    }
                ],
                "important": "True or False indicating a notification's level of importance",
                "photo_type": "Type of photo, event or member",
                "self": [
                    "Information pertaining the authorized member associated with this notification",
                    {
                        "action": "An action that may be performed on this notification.\n\nFor `group_announce` notifications this may be 'instant_join', meaning the group\nassociated with the notification may be joined without filling out profile\ninformation, or 'form_join', the group associated with the notification requires\nsome join information.\n\n`event_announce` and `spot_open` notifications this may be 'instant_rsvp', meaning\nthe event may be RSVP'd to without requiring additional input, or 'form_rsvp',\nmeaning the event may require some input on the current member's behalf before\nRSVPing.\n\nFor `event_reminder` notifications this may be 'instant_rsvp' if recipient is\na non-rsvper or 'instant_rsvp_no' if recipient is a yes rsvper.\n\nFor `pending_member` notifications this may be 'approve_member'."
                    }
                ],
                "text": "Notification content as text",
                "id": "A unique identifier for a notification",
                "category": "Identifier indicating a high level categorization of related kinds.\n\nThis may be one of comment, default, event, group, money, photo",
                "updated": "The last time the notification was modified, indicated as the time in milliseconds since the epoch"
            },
            "tag": null,
            "responseModel": "GetNotifications"
        },
        "GetProGroups": {
            "version": "3",
            "name": "GetProGroups",
            "httpMethod": "GET",
            "parameters": {
                "urlname": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "country": {
                    "location": "query",
                    "required": false,
                    "description": "String: Country"
                },
                "past_rsvps_min": {
                    "location": "query",
                    "required": false,
                    "description": "Positive Integer: Minumum range of the total number of past RSVPs"
                },
                "past_events_min": {
                    "location": "query",
                    "required": false,
                    "description": "Positive Integer: Minumum range of the number of the past events held"
                },
                "chapters": {
                    "location": "query",
                    "required": false,
                    "description": "List of Integer: the chapter ids that may belong to the organization"
                },
                "member_count_max": {
                    "location": "query",
                    "required": false,
                    "description": "Positive Integer: Maximum range of the number of members"
                },
                "upcoming_events_min": {
                    "location": "query",
                    "required": false,
                    "description": "Positive Integer: Minumum range of the number of the upcoming events"
                },
                "lon": {
                    "location": "query",
                    "required": false,
                    "description": "Float: Longitude"
                },
                "last_event_min": {
                    "location": "query",
                    "required": false,
                    "description": "Milliseconds since epoch: Minumum range of the date that the last meetup happened"
                },
                "repeat_rsvpers_min": {
                    "location": "query",
                    "required": false,
                    "description": "Positive Integer: Minumum range of the average number of repeat rsvpers"
                },
                "chapter_urlname": {
                    "location": "query",
                    "required": false,
                    "description": "List of String: the urlnames of chapters that may belong to the organization"
                },
                "average_age_min": {
                    "location": "query",
                    "required": false,
                    "description": "Positive Integer: Minumum range of the average age of the members"
                },
                "last_event_max": {
                    "location": "query",
                    "required": false,
                    "description": "Milliseconds since epoch: Maximum range of the date that the last meetup happened"
                },
                "radius": {
                    "location": "query",
                    "required": false,
                    "description": "String: `global`, `smart`, or search radius in Float"
                },
                "lat": {
                    "location": "query",
                    "required": false,
                    "description": "Float: Latitude"
                },
                "founded_date_min": {
                    "location": "query",
                    "required": false,
                    "description": "Milliseconds since epoch: Minumum range of the founded dates of the groups"
                },
                "order": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "zip": {
                    "location": "query",
                    "required": false,
                    "description": "String: Zip code"
                },
                "inactive_within_days": {
                    "location": "query",
                    "required": false,
                    "description": "Positive Integer: including only those groups that did not have event in the last specified days"
                },
                "offset": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "topics": {
                    "location": "query",
                    "required": false,
                    "description": "List of Integers: the ids of topic of the group"
                },
                "query": {
                    "location": "query",
                    "required": false,
                    "description": "String: raw query to search from group name, description, leadership member name, or city"
                },
                "upcoming_events_max": {
                    "location": "query",
                    "required": false,
                    "description": "Positive Integer: Maximum range of the number of the upcoming events"
                },
                "average_age_max": {
                    "location": "query",
                    "required": false,
                    "description": "Positive Integer: Maximum range of the average age of the members"
                },
                "pro_join_date_max": {
                    "location": "query",
                    "required": false,
                    "description": "Milliseconds since epoch: Maximum range of the dates the groups joined Pro organization"
                },
                "next_event_min": {
                    "location": "query",
                    "required": false,
                    "description": "Milliseconds since epoch: Minumum range of the date that the next meetup is scheduled"
                },
                "past_rsvps_max": {
                    "location": "query",
                    "required": false,
                    "description": "Positive Integer: Maximum range of the total number of past RSVPs"
                },
                "active_within_days": {
                    "location": "query",
                    "required": false,
                    "description": "Positive Integer: including only those groups that had event in the last specified days"
                },
                "rsvps_per_event_min": {
                    "location": "query",
                    "required": false,
                    "description": "Positive Integer: Minumum range of the average number of RSVPs per event"
                },
                "founded_date_max": {
                    "location": "query",
                    "required": false,
                    "description": "Milliseconds since epoch: Maximum range of the founded dates of the groups"
                },
                "excluded_chapters": {
                    "location": "query",
                    "required": false,
                    "description": "List of Integer: the chapters to exclude from the result"
                },
                "member_count_min": {
                    "location": "query",
                    "required": false,
                    "description": "Positive Integer: Minimum range of the number of members"
                },
                "past_events_max": {
                    "location": "query",
                    "required": false,
                    "description": "Positive Integer: Maximum range of the number of the past events held"
                },
                "name": {
                    "location": "query",
                    "required": false,
                    "description": "By the name of the groups"
                },
                "next_event_max": {
                    "location": "query",
                    "required": false,
                    "description": "Milliseconds since epoch: Maximum range of the date that the next meetup is scheduled"
                },
                "repeat_rsvpers_max": {
                    "location": "query",
                    "required": false,
                    "description": "Positive Integer: Maximum range of the average number of repeat rsvpers"
                },
                "location": {
                    "location": "query",
                    "required": false,
                    "description": "String: Raw location"
                },
                "page": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "pro_join_date_min": {
                    "location": "query",
                    "required": false,
                    "description": "Milliseconds since epoch: Minumum range of the dates the groups joined Pro organization"
                },
                "rsvps_per_event_max": {
                    "location": "query",
                    "required": false,
                    "description": "Positive Integer: Maximum range of the average number of RSVPs per event"
                },
                "category": {
                    "location": "query",
                    "required": false,
                    "description": "List of Integers: the ids of the category of the group"
                },
                "desc": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "repeat_rsvpers": {
                    "location": "query",
                    "required": false,
                    "description": "By the number of members RSVPing subsequent events"
                },
                "gender_female": {
                    "location": "query",
                    "required": false,
                    "description": "By the proportion of people who identify themselves as female"
                },
                "past_events": {
                    "location": "query",
                    "required": false,
                    "description": "By the number of past meetups held"
                },
                "past_rsvps": {
                    "location": "query",
                    "required": false,
                    "description": "By the total number of past RSVPs"
                },
                "gender_unknown": {
                    "location": "query",
                    "required": false,
                    "description": "By the proportion of people whose gender info is unknown"
                },
                "gender_male": {
                    "location": "query",
                    "required": false,
                    "description": "By the proportion of people who identify themselves as male"
                },
                "founded_date": {
                    "location": "query",
                    "required": false,
                    "description": "By the founded date of the group"
                },
                "pro_join_date": {
                    "location": "query",
                    "required": false,
                    "description": "By the date the group joined the Pro org"
                },
                "rsvps_per_event": {
                    "location": "query",
                    "required": false,
                    "description": "By the average number of RSVPs per event"
                },
                "last_event": {
                    "location": "query",
                    "required": false,
                    "description": "By the date of the last event happened"
                },
                "gender_other": {
                    "location": "query",
                    "required": false,
                    "description": "By the proportion of people who identify themselves as gender other than female or male"
                },
                "member_count": {
                    "location": "query",
                    "required": false,
                    "description": "By the number of members"
                },
                "average_age": {
                    "location": "query",
                    "required": false,
                    "description": "By the average age of members"
                },
                "next_event": {
                    "location": "query",
                    "required": false,
                    "description": "By the date of the next event scheduled"
                },
                "only": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "omit": {
                    "location": "query",
                    "required": false,
                    "description": null
                }
            },
            "summary": "Name and statistics range search for the meetup groups belonging to Pro organization.",
            "uri": "/pro/{urlname}/groups",
            "notes": "All parameters are optional. `order` and `desc` can take multiple items in a comma-delimited list.",
            "response": {
                "country": "Country of the group",
                "gender_female": "Proportion of members who identify as female",
                "city": "City of the group",
                "past_events": "Number of the past meetup events",
                "description": "Description of the group",
                "past_rsvps": "Number of total RSVPs in the past",
                "lon": "Longitude",
                "founded_date": "Date when the group was founded",
                "pro_join_date": "Date when the group joined the Pro organization",
                "gender_other": "Proportion of members who identify as gender other than male or female",
                "state": "State of the group, if in US or Canada",
                "id": "Id of the group",
                "urlname": "Urlname used to identify the group on meetup.com",
                "member_count": "Number of the group members",
                "average_age": "Average age of the group members",
                "lat": "Latitude",
                "next_event": "Date of the next meetup event, not present if the group has no event scheduled",
                "repeat_rsvpers": "Number of members who RSVPed to a past event and RSVPs to a new event",
                "topics": [
                    "Topics that are assigned to the group",
                    {
                        "name": "Name of the topic",
                        "urlkey": "Urlkey used to identify the topic on meetup.com",
                        "id": "Id of the topic",
                        "lang": "Locale of the topic"
                    }
                ],
                "upcoming_events": "Number of the upcoming meetup events",
                "gender_unknown": "Proportion of members whose gender is unknown",
                "gender_male": "Proportion of members who identify as male",
                "rsvps_per_event": "Average number of RSVPs per event",
                "last_event": "Date of the last meetup event, not present if the group never had a meetup event",
                "name": "Name of the group",
                "category": [
                    "Categories that the group belongs to",
                    {
                        "name": "Name of the category",
                        "id": "Id of the category",
                        "shortname": "Abbreviated name of the category"
                    }
                ]
            },
            "tag": null,
            "responseModel": "GetProGroups"
        },
        "GetProMembers": {
            "version": "3",
            "name": "GetProMembers",
            "httpMethod": "GET",
            "parameters": {
                "urlname": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "zip": {
                    "location": "query",
                    "required": false,
                    "description": "String: Zip code"
                },
                "country": {
                    "location": "query",
                    "required": false,
                    "description": "String: Country"
                },
                "events_attended_max": {
                    "location": "query",
                    "required": false,
                    "description": "Positive Integer: Maximum number of attended events"
                },
                "offset": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "chapters": {
                    "location": "query",
                    "required": false,
                    "description": "List of Integers: The chapters which the member belongs to"
                },
                "query": {
                    "location": "query",
                    "required": false,
                    "description": "String: raw query string to search from member name or city"
                },
                "is_organizer": {
                    "location": "query",
                    "required": false,
                    "description": "By whether the member is an organizer or not"
                },
                "lon": {
                    "location": "query",
                    "required": false,
                    "description": "Float: Longitude"
                },
                "member_name": {
                    "location": "query",
                    "required": false,
                    "description": "By the member name"
                },
                "active_within_days": {
                    "location": "query",
                    "required": false,
                    "description": "Positive Integer: The range of date from the past until today, for the recent activity"
                },
                "join_time_min": {
                    "location": "query",
                    "required": false,
                    "description": "Milliseconds since epoch: The oldest time limit for member join"
                },
                "email_received": {
                    "location": "query",
                    "required": false,
                    "description": "Integers: The id of a previous emails that the member received"
                },
                "events_attended_min": {
                    "location": "query",
                    "required": false,
                    "description": "Positive Integer: Minimum number of attended events"
                },
                "location": {
                    "location": "query",
                    "required": false,
                    "description": "String: Raw location"
                },
                "page": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "radius": {
                    "location": "query",
                    "required": false,
                    "description": "String: `global`, `smart`, or search radius in Float"
                },
                "join_time_max": {
                    "location": "query",
                    "required": false,
                    "description": "Milliseconds since epoch: The latest time limit for member join"
                },
                "lat": {
                    "location": "query",
                    "required": false,
                    "description": "Float: Latitude"
                },
                "desc": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "order": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "join_time": {
                    "location": "query",
                    "required": false,
                    "description": "By the time when the member joined Meetup"
                },
                "last_access_time": {
                    "location": "query",
                    "required": false,
                    "description": "By the time of most recent visit"
                },
                "events_attended": {
                    "location": "query",
                    "required": false,
                    "description": "By the number of events attended"
                },
                "only": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "omit": {
                    "location": "query",
                    "required": false,
                    "description": null
                }
            },
            "summary": "Name, location, and time based search for the members of the meetups belonging to Pro organization.",
            "uri": "/pro/{urlname}/members",
            "notes": "All parameters are optional.",
            "response": {
                "member_id": "Id of the member",
                "photo_thumb_url": "Url of the photo thumbnail of the member",
                "country": "Country of the member",
                "city": "City of the member",
                "chapters": [
                    "Pro organization groups that the member belongs to",
                    {
                        "name": "Name of the group",
                        "id": "Id of the group",
                        "urlname": "Urlname used to identify the group on meetup.com"
                    }
                ],
                "is_organizer": "Organizer status of the member",
                "lon": "Longitude",
                "member_name": "Name of the member",
                "join_time": "The time when the member joined Meetup",
                "last_access_time": "The time when the last activity occured",
                "events_attended": "The number of attended events",
                "state": "State of the member, if in US or Canada",
                "lat": "Latitude"
            },
            "tag": null,
            "responseModel": "GetProMembers"
        },
        "GetProTickets": {
            "version": "3",
            "name": "GetProTickets",
            "httpMethod": "GET",
            "parameters": {
                "urlname": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "country": {
                    "location": "query",
                    "required": false,
                    "description": "String: two-letter country code of the redeemed chapters"
                },
                "chapter_name": {
                    "location": "query",
                    "required": false,
                    "description": "By the name of the chapter that redeemed the ticket"
                },
                "ticket_key": {
                    "location": "query",
                    "required": false,
                    "description": "String: full matching string of an issued ticket key"
                },
                "chapters": {
                    "location": "query",
                    "required": false,
                    "description": "Comma delimited positive integers: ids of redeemed chapters"
                },
                "status": {
                    "location": "query",
                    "required": false,
                    "description": "By the redeemed status of the ticket"
                },
                "updated": {
                    "location": "query",
                    "required": false,
                    "description": "By the update timestamp of ticket"
                },
                "created": {
                    "location": "query",
                    "required": false,
                    "description": "By the creation timestamp of ticket"
                },
                "page": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "offset": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "desc": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "order": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "only": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "omit": {
                    "location": "query",
                    "required": false,
                    "description": null
                }
            },
            "summary": "Redeemed chapter, redeemed member, status, and timestamp for tickets belonging to Pro organization.",
            "uri": "/pro/{urlname}/tickets",
            "notes": "All parameters are optional.",
            "response": {
                "chapter": [
                    "Pro organization chapter that redeemed the ticket, if the ticket is redeemed",
                    {
                        "name": "Name of the chapter",
                        "country": "Country of the Chapter",
                        "id": "Id of the chapter",
                        "urlname": "Urlname used to identify the chapter on meetup.com"
                    }
                ],
                "created": "Ticket creation time",
                "member": [
                    "Member who claimed the ticket, if the ticket is claimed",
                    {
                        "name": "Name of the member",
                        "id": "Id of the member"
                    }
                ],
                "ticket_key": "Ticket key",
                "updated": "Last update time of ticket",
                "status": "The status of ticket, one of the following: inactive, available, claimed, redeemed"
            },
            "tag": null,
            "responseModel": "GetProTickets"
        },
        "GetRecommendedEvents": {
            "version": "3",
            "name": "GetRecommendedEvents",
            "httpMethod": "GET",
            "parameters": {
                "lon": {
                    "location": "query",
                    "required": false,
                    "description": "Approximate target longitude"
                },
                "page": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "fields": {
                    "location": "query",
                    "required": false,
                    "description": "A comma-delimited list of optional fields to populate in the response"
                },
                "self_groups": {
                    "location": "query",
                    "required": false,
                    "description": "Boolean indicator of whether or not to include events within your existing Meetup network. This includes groups in locations that may differ from the target location. Defaults to true"
                },
                "topic_category": {
                    "location": "query",
                    "required": false,
                    "description": "Numeric topic category identifier for filtering recommendations by a topic category"
                },
                "lat": {
                    "location": "query",
                    "required": false,
                    "description": "Approximate target latitude"
                },
                "offset": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "desc": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "order": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "only": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "omit": {
                    "location": "query",
                    "required": false,
                    "description": null
                }
            },
            "summary": "Returns a list of upcoming recommended events",
            "uri": "/recommended/events",
            "notes": "By default, the events returned will be based on the hosting groups near the authenticated member's location.\nTo customize this location, send a valid \"lat\" and \"lon\" parameter combination reflecting a desired location.\n\nYou may filter results using an topic category identifier from the [Topic Categories API](/meetup_api/docs/find/topic_categories/)\n\nThis endpoint uses HTTP [Link header based pagination](/meetup_api/docs/#v3_json). Results may page forward but never in reverse",
            "response": {
                "utc_offset": "The local offset from UTC time, in milliseconds",
                "comment_count": "An aggregate count of all comments and replies for a given event, returned when fields request parameter value includes 'comment_count'",
                "rsvp_limit": "The number of \"yes\" RSVPS an event has capacity for",
                "venue": [
                    "The event venue, present only if selected and not hidden by an organizer",
                    {
                        "zip": "ZIP code if, venue is in US or Canada",
                        "country": "Country code of venue",
                        "localized_country_name": "The localized name of the venue's country",
                        "city": "City of venue",
                        "address_1": "Line 1 of venue address",
                        "address_2": "Line 2 of venue address",
                        "address_3": "Line 3 of venue address",
                        "lon": "Approximate longitude",
                        "phone": "Phone number of venue",
                        "name": "Venue name",
                        "state": "State of venue where available",
                        "id": "Unique numeric venue id",
                        "repinned": "true if the editor of the event altered the original venues pin location, false otherwise",
                        "lat": "Approximate latitude"
                    }
                ],
                "featured": "Boolean indicator of whether or not a given event is featured, returned when fields request parameter value includes 'featured'",
                "survey_questions": [
                    "List of organizer-defined survey questions intended to be asked of RSVPing members. Returned when the \"fields\"' request parameter contains \"answers\"",
                    {
                        "question": "Question text",
                        "id": "Numeric question identifier"
                    }
                ],
                "venue_visibility": "Represents who can see the venue with a potential value of \"members\" or \"public\", returned when fields request parameter value includes \"venue_visibility\" and the authenticated member is a member of the group hosting the event",
                "manual_attendance_count": "Manually entered total attendee headcount, if any exists",
                "fee": [
                    "Ticketing fee information for events that support payments",
                    {
                        "amount": "Amount of the fee",
                        "accepts": "Acceptable methods of payments may be one of \"paypal\", \"amazon\", \"wepay\", or \"cash\"",
                        "description": "Fee description, typically \"per-person\"",
                        "currency": "Currency accepted for fee",
                        "label": "Label for fee, typically \"Price\"",
                        "required": "Boolean flag indicating if this fee is required to RSVP"
                    }
                ],
                "link": "Link to event on meetup.com",
                "why": "We should do this because...",
                "description": "Description of the event in HTML. Email addresses and phone numbers will be masked for non-members",
                "short_link": "A shortened link for the event on meetup.com, returned when fields request parameter value includes \"short_link\"",
                "yes_rsvp_count": "Number of yes RSVPs including guests",
                "duration": "Scheduled event duration in milliseconds, if an end time is specified by the organizer. When not present, a default of 3 hours may be assumed by applications",
                "event_hosts": [
                    "List of members hosting the event, returned when fields request parameter value includes 'event_hosts'",
                    {
                        "name": "Host member's name",
                        "photo": [
                            "Member photo if one exists",
                            {
                                "highres_link": "Link for full sized photo",
                                "base_url": "A base url that can be use to construct a photo url from its components",
                                "id": "Numeric photo ID",
                                "photo_link": "Link for standard sized photo",
                                "type": "Type of photo. One of \"event\" or \"member\"",
                                "thumb_link": "Link for thumbnail sized photo"
                            }
                        ],
                        "id": "Host member's id"
                    }
                ],
                "simple_html_description": "Description of the event, in simple HTML source format. If this event's description was saved in simple HTML format, the description field will be an HTML translation of this source. Returned when the \"fields\"' request parameter contains \"simple_html_description\"",
                "id": "A unique alphanumeric identifier for event",
                "group": [
                    "Information about group hosting the event",
                    {
                        "photo_gradient": [
                            "Color combination used to generate group duotone, returned when fields request parameter value includes 'group_photo_gradient'",
                            {
                                "dark_color": "Dark color in hexidecimal format",
                                "id": "Unique numeric identifier",
                                "composite_color": "Composite color in hexidecimal format",
                                "light_color": "Light color in hexidecimal format",
                                "swagger_type": "Duotone"
                            }
                        ],
                        "join_info": [
                            "Lists any questions requested when joining and required fields. Returned with \"fields\" request parameter value includes \"group_join_info\"",
                            {
                                "photo_req": "true if required, false otherwise",
                                "questions": [
                                    "List of profile questions organizer would like new members to answer prior to joining",
                                    {
                                        "question": "The text of the question",
                                        "id": "Unique numeric identifier for the question"
                                    }
                                ],
                                "questions_req": "true if required, false otherwise",
                                "swagger_type": "GroupJoinInfo"
                            }
                        ],
                        "visibility": "Group visibility, returned when fields request parameter value includes 'group_visibility'. Value may be \"public\", \"public_limited\", or \"members\".",
                        "topics": [
                            "Topics related to the group, returned when fields request parameter value includes 'group_topics'",
                            {
                                "name": "Display name of the topic",
                                "urlkey": "The unique keyword used to identify this topic",
                                "id": "Numeric topic id",
                                "lang": "Language topic originates from",
                                "swagger_type": "TopicSummary"
                            }
                        ],
                        "key_photo": [
                            "Group primary photo, returned when fields request parameter value includes 'group_key_photo'",
                            {
                                "highres_link": "Link for full sized photo",
                                "base_url": "A base url that can be use to construct a photo url from its components",
                                "id": "Numeric photo ID",
                                "photo_link": "Link for standard sized photo",
                                "type": "Type of photo. One of \"event\" or \"member\"",
                                "thumb_link": "Link for thumbnail sized photo"
                            }
                        ],
                        "photo": [
                            "Photo associated with group, returned when fields request parameter value includes 'group_photo'",
                            {
                                "highres_link": "Link for full sized photo",
                                "base_url": "A base url that can be use to construct a photo url from its components",
                                "id": "Numeric photo ID",
                                "photo_link": "Link for standard sized photo",
                                "type": "Type of photo. One of \"event\" or \"member\"",
                                "thumb_link": "Link for thumbnail sized photo"
                            }
                        ],
                        "lon": "Approximate group longitude",
                        "join_mode": "Indicator of how new members may be able to join. be one of \"open\", \"approval\" or \"closed\"",
                        "name": "Name of the group",
                        "self": [
                            "Information pertaining to the authenticated member with respect to the group, returned when fields request parameter value includes 'group_self_actions', 'group_self_membership_dues', or 'group_self_status'",
                            {
                                "actions": "list of actions the authenticated member may perform, potentially \"event_create\": the ability to create new events, \"event_draft\": the ability to save new events as drafts, \"role_assign\": the ability to assign member roles, \"edit\": the ability to edit group settings, \"member_approval\": the ability to approve or decline member requests to join, or \"subscription_upgrade\": the ability to upgrade this group's subscription plan",
                                "membership_dues": "Membership dues information associated with hosting group, returned when \"fields\" request parameter value includes \"group_membership_dues\" and group has dues",
                                "status": "Indicates the authorized user's membership with this group.\n\nValue may be one of \"none\", \"pending\", \"pending_payment\", \"active\", or \"blocked\""
                            }
                        ],
                        "id": "Numeric identifier for the group",
                        "urlname": "Alphanumeric urlname identifier for the group",
                        "category": [
                            "Category group belongs to, returned when fields request parameter value includes 'group_category'",
                            {
                                "name": "Display name of the category",
                                "sort_name": "Name used for sorting",
                                "id": "Numeric category id",
                                "shortname": "String identifier of the category",
                                "swagger_type": "GroupCategory"
                            }
                        ],
                        "membership_dues": [
                            "Membership dues information associated with hosting group, returned when fields request parameter value includes 'group_membership_dues'",
                            {
                                "refund_policy": [
                                    "Conditions for refunds",
                                    {
                                        "group_closes": "refund applies when the group closes",
                                        "member_leaves": "refund applies when member leaves the group",
                                        "none": "indicates there is no refund policy",
                                        "member_banned": "refund applies when the member is banned",
                                        "custom": "Boolean indicator of a custom refund policy"
                                    }
                                ],
                                "reasons": "Array of reasons containing one or more of the following values compensate_organizer, cover_costs, encourage_engagement, improve_meetups, other, provide_supplies, reserve_fund",
                                "methods": [
                                    "Methods of payments",
                                    {
                                        "credit_card": "Boolean indicator that credit cards are accepted",
                                        "other": "Boolean indicator that other forms of payment are accepted",
                                        "paypal": "Boolean indicator that Paypal payments are accepted",
                                        "amazon_payments": "Boolean indicator that Amazon Payments are accepted"
                                    }
                                ],
                                "fee": "Numeric fee value",
                                "trial_days": "When present, returns the number of days the group is offering a free trial period for to new members. When not present, this indicates that the group does not offer a trial membership period",
                                "self_payment_required": "Returns true if the authorized user is prevented from participating in the group until a payment is made",
                                "required": "true if dues are required",
                                "swagger_type": "MembershipDues",
                                "fee_desc": "The interval at which dues must be paid. Possible values may include: \"month\", \"year\", \"day\", or \"every other day\"",
                                "currency": "Currency in which the fee is declared",
                                "reasons_other": "An additional reason if specified.",
                                "required_to": "If the dues are required this indicates what they are required for. May be one of 'join' or 'rsvp'"
                            }
                        ],
                        "lat": "Approximate group latitude",
                        "who": "What the group calls its members"
                    }
                ],
                "rsvpable_after_join": "Boolean value indicating whether or not the authenticated member can RSVP\nafter joining the hosting group.\nReturned when the \"fields\" request parameter\nincludes \"rsvpable_after_join\"\nand the authenticated member is _not_ a member of the\ngroup hosting this event",
                "rsvp_rules": [
                    "Information about conditions that allow for member RSVPs, returned when fields request parameter value include 'rsvp_rules'",
                    {
                        "refund_policy": [
                            "The organizer-defined terms for refunds. If this is defined, you must provide the authenticated member a way to access this information before they can RSVP. They will need to agree to these terms before they RSVP",
                            {
                                "policies": "list of one or more of the following. 'no_refunds' if the organizer will not issue refunds', 'member_cancellation' if the organizer offers a refund for member cancellation, 'event_cancellation' if the organizer offers a refund if the event is canceled, 'event_rescheduled' if the organizer offers a refund when the event is rescheduled",
                                "days": "if member_cancellation is present, it's relative to this many days before the event",
                                "notes": "additional refund policy notes"
                            }
                        ],
                        "closed": "Boolean value indicating whether or not RSVPing was explicitly closed for the event.",
                        "open_time": "UTC time that members may begin to RSVP",
                        "waitlisting": "Wait list handling when RSVP limit is reached. Value may be one of 'auto', 'manual' or 'off'",
                        "guest_limit": "Number of guests members may include in their RSVP, 0 or more",
                        "close_time": "UTC time that RSVPs will no longer be accepted, though organizers may close RSVPs earlier"
                    }
                ],
                "visibility": "Event visibility: \"public\", \"public_limited\", or \"members\". Events in private groups that do not expose limited information are visible only to that group's members and should not be made public.",
                "waitlist_count": "Number of members on the waitlist, if one exists",
                "created": "Creation time of the event, in milliseconds since the epoch",
                "plain_text_description": "Plain text version of the event description. Email addresses and photo numbers will be masked for non-members. Returned when \"fields\" request parameter value contains \"plain_text_description\"",
                "how_to_find_us": "Additional information on how to find members at a venue when provided by an organizer, returned when fields request parameter value includes 'how_to_find_us'",
                "swagger_type": "EventSummary",
                "photo_album": [
                    "Information about photo uploads for this event, returned when fields request parameter value includes 'photo_album'",
                    {
                        "photo_count": "Number of photos uploaded",
                        "photo_sample": [
                            "A small collection of photos uploaded for this event",
                            {
                                "highres_link": "Link for full sized photo",
                                "base_url": "A base url that can be use to construct a photo url from its components",
                                "id": "Numeric photo ID",
                                "photo_link": "Link for standard sized photo",
                                "type": "Type of photo. One of \"event\" or \"member\"",
                                "thumb_link": "Link for thumbnail sized photo"
                            }
                        ],
                        "id": "Unique numeric identifier for photo album",
                        "event": [
                            "Event photo album belongs to. This will be absent if the album\nis not associated with an event",
                            {
                                "utc_offset": "The local offset from UTC time, in milliseconds",
                                "name": "Name of event",
                                "id": "Alphanumeric event ID",
                                "time": "UTC start time of the event, in milliseconds since the epoch",
                                "swagger_type": "BasicEvent",
                                "yes_rsvp_count": "Number of yes RSVPs"
                            }
                        ],
                        "title": "Album title",
                        "swagger_type": "PhotoAlbumSummary"
                    }
                ],
                "rsvpable": "Boolean value indicating whether or not the authenticated member can RSVP or join the waitlist when the event is full.\nReturned when the \"fields\" request parameter value\nincludes \"rsvpable\"",
                "rsvp_sample": [
                    "A small collection RSVPs for members attending this event, returned when fields request parameter value includes 'rsvp_sample'",
                    {
                        "member": [
                            "Member who RSVP'd",
                            {
                                "role": "The leadership role of this member within the group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
                                "name": "Name of member",
                                "photo": [
                                    "Member photo, if available.\nMembers who registered via Facebook may not have highres photos",
                                    {
                                        "highres_link": "Link for full sized photo",
                                        "base_url": "A base url that can be use to construct a photo url from its components",
                                        "id": "Numeric photo ID",
                                        "photo_link": "Link for standard sized photo",
                                        "type": "Type of photo. One of \"event\" or \"member\"",
                                        "thumb_link": "Link for thumbnail sized photo"
                                    }
                                ],
                                "self": [
                                    "Represents the authenticated member's relation to member.\nReturned with the \"fields\" request parameter includes \"self\" and\nthe target member is not the authenticated member",
                                    {
                                        "common": [
                                            "Information the authenticated member has in common with this member",
                                            {
                                                "groups": [
                                                    "List of common groups",
                                                    {
                                                        "join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
                                                        "photo_gradient": [
                                                            "Color combination used generate group duotone",
                                                            {
                                                                "dark_color": "Dark color in hexidecimal format",
                                                                "id": "Unique numeric identifier",
                                                                "composite_color": "Composite color in hexidecimal format",
                                                                "light_color": "Light color in hexidecimal format",
                                                                "swagger_type": "Duotone"
                                                            }
                                                        ],
                                                        "name": "Name of the group",
                                                        "key_photo": [
                                                            "Group primary photo",
                                                            {
                                                                "highres_link": "Link for full sized photo",
                                                                "base_url": "A base url that can be use to construct a photo url from its components",
                                                                "id": "Numeric photo ID",
                                                                "photo_link": "Link for standard sized photo",
                                                                "type": "Type of photo. One of \"event\" or \"member\"",
                                                                "thumb_link": "Link for thumbnail sized photo"
                                                            }
                                                        ],
                                                        "id": "Numeric group ID",
                                                        "urlname": "Urlname used to identify the group on meetup.com",
                                                        "group_photo": [
                                                            "Group photo",
                                                            {
                                                                "highres_link": "Link for full sized photo",
                                                                "base_url": "A base url that can be use to construct a photo url from its components",
                                                                "id": "Numeric photo ID",
                                                                "photo_link": "Link for standard sized photo",
                                                                "type": "Type of photo. One of \"event\" or \"member\"",
                                                                "thumb_link": "Link for thumbnail sized photo"
                                                            }
                                                        ],
                                                        "swagger_type": "GroupSummary",
                                                        "who": "What the group calls its members"
                                                    }
                                                ]
                                            }
                                        ],
                                        "actions": "List of actions available for the authenticated member to perform.\nCurrently only \"message\" is supported",
                                        "blocks": "Boolean indication of whether or not the authenticated member blocks this member",
                                        "friends": "Boolean indication of whether or not the authenticated member is a friend of the member",
                                        "swagger_type": "MemberSelf"
                                    }
                                ],
                                "bio": "Intro of member",
                                "id": "Numeric member ID",
                                "title": "Organizer defined title of member. May be absent if not defined",
                                "event_context": [
                                    "Member's context within the event. Only returned in the context of an event",
                                    {
                                        "host": "Boolean indicator for whether this member is a host for the event"
                                    }
                                ],
                                "swagger_type": "AttendanceSummary"
                            }
                        ],
                        "id": "Unique numeric identifier for the RSVP. May be -1 for events scheduled in the future",
                        "updated": "Last modified time of the RSVP, in milliseconds since the epoch",
                        "swagger_type": "RSVPSummary",
                        "created": "Creation time of the RSVP, in milliseconds since the epoch"
                    }
                ],
                "series": [
                    "Returned when the \"fields\" request parameter value includes \"series\" for events that are part of a series of events",
                    {
                        "end_date": "Date when this series ends/ended, in milliseconds since the epoch",
                        "description": "Human displayable description of how often events in this series occur",
                        "id": "Unique numeric identifier for the series",
                        "swagger_type": "RecurrenceSchedule",
                        "weekly": [
                            "Returned for events that are part of a weekly recurring series of events",
                            {
                                "days_of_week": "List of integers 1-7 (Monday-Sunday) of days of week recurrence occurs upon",
                                "end_date": "Date when series ends/ended, in LocalDate (yyyy-MM-dd) format",
                                "interval": "Integer number of weeks between each recurrence"
                            }
                        ],
                        "start_date": "Date when this series begins/began, in milliseconds since the epoch"
                    }
                ],
                "name": "Name of the event",
                "self": [
                    "represents details particular to the authorized user, only present if requested and authenticated member is a member of the hosting group, returned when fields request parameter value includes 'self'",
                    {
                        "pay_status": "The authenticated member's payment status. This may be one of 'none', 'paid', 'partially_paid', 'payment_pending', 'echeck_pending', 'refund_pending', 'partially_refunded', 'refunded'",
                        "role": "The authenticated member's role in within the group, if any. This may be one of: Organizer, Assistant Organizer, Event Organizer, etc.",
                        "actions": "List of actions the authenticated member may perform, potentially one or more of the following\n\n\"announce\" to announce the event to the group's members\n\n\"attendance\" to view or take attendance for the event\n\n\"comment\" the ability to post a comment or reply\n\n\"payments\" the ability to mark members as paid if the event is ticketed\n\n\"publish\" to publish a draft event\n\n\"edit\" to edit the event information\n\n\"edit_hosts\" to edit the hosts for the event\n\n\"delete\" to delete the event\n\n\"rsvp\" to RSVP yes or no to the event\n\n\"wait\" to get on the waiting list (using the same RSVP methods).\n\n\"dues\" if an organizer requires membership dues to RSVP and the authorized\n member has not paid theirs\n\n\"upload_photo\" the ability to upload a photo for an event",
                        "rsvp": [
                            "Member's RSVP, if any",
                            {
                                "answers": [
                                    "List of answers to event survey questions asked when the member RSVP'd in the order asked, only available to organizers and assistant organizers",
                                    {
                                        "question": "Question text",
                                        "answer": "Answer text for question",
                                        "updated": "The last time this answer was updated",
                                        "question_id": "Unique number identifier for question",
                                        "swagger_type": "SurveyQuestionAnswer"
                                    }
                                ],
                                "guests": "Number of guests the RSVP'd member will be bringing",
                                "response": "May be \"yes\" or \"no\".\n\nIn cases where an event is over capacity and the member has shown an intent to attend,\nresponse may be \"waitlist\" if the event has a waitlist.\n\nIn cases of ticketed events, this may be \"yes_pending_payment\"\nfor a \"yes\" response for a ticketed event with an unprocessed payment"
                            }
                        ],
                        "swagger_type": "EventSelf"
                    }
                ],
                "time": "UTC start time of the event, in milliseconds since the epoch",
                "updated": "Last modified time for the event in milliseconds since the epoch",
                "status": "\"cancelled\", \"upcoming\", \"past\", \"proposed\", \"suggested\", or \"draft\""
            },
            "tag": null,
            "responseModel": "GetRecommendedEvents"
        },
        "GetRecommendedGroupTopics": {
            "version": "3",
            "name": "GetRecommendedGroupTopics",
            "httpMethod": "GET",
            "parameters": {
                "page": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "text": {
                    "location": "query",
                    "required": false,
                    "description": "Free form text search"
                },
                "lang": {
                    "location": "query",
                    "required": false,
                    "description": "Defines a language preference for ordering results. Valid values are en-USen-AUde-DEeses-ESfr-FRit-ITpt-BRja-JPnl-NLko-KRpl-PLth-THtr-TRsv-SEpt-brpl-plit-itsv-seja-jpen-aude-deen-usth-thtr-tres-esnl-nlfr-frko-krendefritptjanlkoplthtrsv. You may also substitute this with the Accept-Language header"
                },
                "other_topics": {
                    "location": "query",
                    "required": false,
                    "description": "A comma-delimited list of topic ids to inform recommendations"
                },
                "exclude_topics": {
                    "location": "query",
                    "required": false,
                    "description": "A comma-delimited list of topic ids to exclude from the recommendations"
                },
                "offset": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "desc": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "order": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "only": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "omit": {
                    "location": "query",
                    "required": false,
                    "description": null
                }
            },
            "summary": "Recommends suggestions for group topics based on a text search or other topics",
            "uri": "/recommended/group_topics",
            "notes": null,
            "response": {
                "urlkey": "The unique keyword used to identify this topic",
                "group_count": "The number of groups using this topic",
                "name": "Display name of the topic",
                "description": "The description of the topic",
                "id": "Numeric topic id",
                "member_count": "The number of members interested in this topic",
                "lang": "Language topic originates from",
                "swagger_type": "Topic"
            },
            "tag": null,
            "responseModel": "GetRecommendedGroupTopics"
        },
        "GetRecommendedGroups": {
            "version": "3",
            "name": "GetRecommendedGroups",
            "httpMethod": "GET",
            "parameters": {
                "zip": {
                    "location": "query",
                    "required": false,
                    "description": "Zip code you are searching for recommendations in"
                },
                "country": {
                    "location": "query",
                    "required": false,
                    "description": "A valid two character country code, defaults to US"
                },
                "instant_join_only": {
                    "location": "query",
                    "required": false,
                    "description": "Recommend only groups without join requirements and that can be joined instantly"
                },
                "location": {
                    "location": "query",
                    "required": false,
                    "description": "Raw text location query"
                },
                "lon": {
                    "location": "query",
                    "required": false,
                    "description": "Approximate longitude"
                },
                "topic_id": {
                    "location": "query",
                    "required": false,
                    "description": "Comma delimited list of up to 100 topic ids to help inform recommendations"
                },
                "sort": {
                    "location": "query",
                    "required": false,
                    "description": "How to order the results. Valid values are \"default\" or \"static\"."
                },
                "radius": {
                    "location": "query",
                    "required": false,
                    "description": "Radius in miles. May be 0.0-100.0, 'global' or 'smart', a dynamic radius based on the number of active groups in the area. Defaults to member's preferred radius"
                },
                "fields": {
                    "location": "query",
                    "required": false,
                    "description": "Request that additional fields (separated by commas) be included in the output."
                },
                "category": {
                    "location": "query",
                    "required": false,
                    "description": "A valid category id which limits recommended groups to a particular category"
                },
                "lat": {
                    "location": "query",
                    "required": false,
                    "description": "Approximate latitude"
                },
                "page": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "offset": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "desc": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "order": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "only": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "omit": {
                    "location": "query",
                    "required": false,
                    "description": null
                }
            },
            "summary": "Returns groups Meetup finds relevant to you",
            "uri": "/recommended/groups",
            "notes": "All parameters are optional. You may change the 'location' and 'radius' for the request. If you do not supply a location your request will be based on your IP's geographic location. If the server is unable to produce recommendations in a suitable amount of time, a 503 error will be returned.",
            "response": {
                "country": "Country of the group",
                "pending_members": "Number representing the count of members pending organizer approval to join. Returned only when requested in the fields request parameter and the authenticated member has permission to approve members",
                "city": "City of the group",
                "similar_groups": [
                    "Optional fields parameter. Returns up to 5 groups similar to this groups, best suited for the authenticated member when a single group is queried for. Note: this field is being deprecated in favor of making a separate request to /:urlname/similar_groups",
                    {
                        "join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
                        "name": "Name of the group",
                        "lon": "Longitude",
                        "id": "Id of the group",
                        "urlname": "Urlname used to identify the group on meetup.com",
                        "photos": [
                            "Optional fields parameter. A small set of photos from the group",
                            {
                                "highres_link": "Link for full sized photo",
                                "base_url": "A base url that can be use to construct a photo url from its components",
                                "id": "Numeric photo ID",
                                "photo_link": "Link for standard sized photo",
                                "type": "Type of photo. One of \"event\" or \"member\"",
                                "thumb_link": "Link for thumbnail sized photo"
                            }
                        ],
                        "lat": "Latitude",
                        "who": "What this group calls it's members"
                    }
                ],
                "timezone": "This represents the universal timezone identifier for the group",
                "link": "Link to group on meetup.com",
                "description": "Short description of group",
                "lon": "Longitude",
                "welcome_message": "Optional fields parameter. Returns the Group's default welcome message if the authenticated member is the organizer of the group",
                "is_simplehtml": "Optional field, 'true' when the group description has been saved in a simplified HTML format, 'false' otherwise.",
                "group_photo": [
                    "Group photo",
                    {
                        "highres_link": "Link for full sized photo",
                        "base_url": "A base url that can be use to construct a photo url from its components",
                        "id": "Numeric photo ID",
                        "photo_link": "Link for standard sized photo",
                        "type": "Type of photo. One of \"event\" or \"member\"",
                        "thumb_link": "Link for thumbnail sized photo"
                    }
                ],
                "photos": [
                    "A small set of photos from the group",
                    {
                        "highres_link": "Link for full sized photo",
                        "base_url": "A base url that can be use to construct a photo url from its components",
                        "id": "Numeric photo ID",
                        "photo_link": "Link for standard sized photo",
                        "type": "Type of photo. One of \"event\" or \"member\"",
                        "thumb_link": "Link for thumbnail sized photo"
                    }
                ],
                "short_link": "Optional field, a shorted URL for the group",
                "score": "A numeric value representing how the relevancy of the group in this search context",
                "join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
                "approved": "Boolean indicator for whether this Group has been approved or not.\nNew Groups are generally approved (or removed)\nsoon after creation.\nReturned when the \"fields\" request parameter value includes\n\"approved\"",
                "contributions": [
                    "Optional field containing the contribution details of the group",
                    {
                        "thanks": "The 'thank you' message to be given when a contribution is made",
                        "reason": "The reason a member might consider contributing",
                        "potential": "Boolean stating that potential contributions are enabled for the group",
                        "enabled": "Boolean stating if contributions are enabled for the group"
                    }
                ],
                "members": "Number of Meetup members in this group",
                "state": "State of the group, if in US or Canada",
                "simple_html_description": "Description of the group, in simple HTML source format. If this group's description was saved in simple HTML format, the description field will be an HTML translation of this source. Returned when the \"fields\" request parameter value contains \"simple_html_description\"",
                "id": "Numeric group ID",
                "urlname": "Urlname used to identify the group on meetup.com",
                "membership_dues": [
                    "Optional field, returns membership dues for group if any",
                    {
                        "refund_policy": [
                            "Conditions for refunds",
                            {
                                "group_closes": "refund applies when the group closes",
                                "member_leaves": "refund applies when member leaves the group",
                                "none": "indicates there is no refund policy",
                                "member_banned": "refund applies when the member is banned",
                                "custom": "Boolean indicator of a custom refund policy"
                            }
                        ],
                        "reasons": "Array of reasons containing one or more of the following values compensate_organizer, cover_costs, encourage_engagement, improve_meetups, other, provide_supplies, reserve_fund",
                        "methods": [
                            "Methods of payments",
                            {
                                "credit_card": "Boolean indicator that credit cards are accepted",
                                "other": "Boolean indicator that other forms of payment are accepted",
                                "paypal": "Boolean indicator that Paypal payments are accepted",
                                "amazon_payments": "Boolean indicator that Amazon Payments are accepted"
                            }
                        ],
                        "fee": "Numeric fee value",
                        "trial_days": "When present, returns the number of days the group is offering a free trial period for to new members. When not present, this indicates that the group does not offer a trial membership period",
                        "self_payment_required": "Returns true if the authorized user is prevented from participating in the group until a payment is made",
                        "required": "true if dues are required",
                        "swagger_type": "MembershipDues",
                        "fee_desc": "The interval at which dues must be paid. Possible values may include: \"month\", \"year\", \"day\", or \"every other day\"",
                        "currency": "Currency in which the fee is declared",
                        "reasons_other": "An additional reason if specified.",
                        "required_to": "If the dues are required this indicates what they are required for. May be one of 'join' or 'rsvp'"
                    }
                ],
                "lat": "Latitude",
                "next_event": [
                    "The current ongoing or next upcoming event, if one is scheduled",
                    {
                        "utc_offset": "The local offset from UTC time, in milliseconds",
                        "name": "Name of event",
                        "id": "Alphanumeric event ID",
                        "time": "UTC start time of the event, in milliseconds since the epoch",
                        "swagger_type": "BasicEvent",
                        "yes_rsvp_count": "Number of yes RSVPs"
                    }
                ],
                "list_mode": "Optional field representing the policy for who can post the group mailing list. Returned when the \"fields\" request parameter value contains \"list_mode\". Value may be one of \"moderated\", \"off\", \"open\", or \"orgs_only\"",
                "photo_gradient": [
                    "Color combination used generate group duotone",
                    {
                        "dark_color": "Dark color in hexidecimal format",
                        "id": "Unique numeric identifier",
                        "composite_color": "Composite color in hexidecimal format",
                        "light_color": "Light color in hexidecimal format",
                        "swagger_type": "Duotone"
                    }
                ],
                "ga_code": "Optional field return the Google Analytics code for the group. Only members that can edit group settings can see this",
                "localized_country_name": "Name of country of the group",
                "join_info": [
                    "Optional field, lists any questions requested when joining and required fields",
                    {
                        "photo_req": "true if required, false otherwise",
                        "questions": [
                            "List of profile questions organizer would like new members to answer prior to joining",
                            {
                                "question": "The text of the question",
                                "id": "Unique numeric identifier for the question"
                            }
                        ],
                        "questions_req": "true if required, false otherwise",
                        "swagger_type": "GroupJoinInfo"
                    }
                ],
                "visibility": "Who can see this group. One of members, public or public_limited",
                "topics": [
                    "Optional fields parameter. Returns the group's topics",
                    {
                        "name": "Display name of the topic",
                        "urlkey": "The unique keyword used to identify this topic",
                        "id": "Numeric topic id",
                        "lang": "Language topic originates from",
                        "swagger_type": "TopicSummary"
                    }
                ],
                "created": "Time the group was created in milliseconds since the epoch",
                "key_photo": [
                    "Group primary photo",
                    {
                        "highres_link": "Link for full sized photo",
                        "base_url": "A base url that can be use to construct a photo url from its components",
                        "id": "Numeric photo ID",
                        "photo_link": "Link for standard sized photo",
                        "type": "Type of photo. One of \"event\" or \"member\"",
                        "thumb_link": "Link for thumbnail sized photo"
                    }
                ],
                "plain_text_description": "Description of the group, in plain text format. Returned when then \"fields\" request parameter value contains \"plain_text_description\"",
                "list_addr": "Optional field returning list address prefix. List mail will be {list_addr}-list@meetup.com. Announce email will be {list_addr}-announce@meetup.com. You must be a member of the group to see this",
                "organizer": [
                    "Group's primary organizer",
                    {
                        "name": "Name of member",
                        "photo": [
                            "Organizer photo, where defined",
                            {
                                "highres_link": "Link for full sized photo",
                                "base_url": "A base url that can be use to construct a photo url from its components",
                                "id": "Numeric photo ID",
                                "photo_link": "Link for standard sized photo",
                                "type": "Type of photo. One of \"event\" or \"member\"",
                                "thumb_link": "Link for thumbnail sized photo"
                            }
                        ],
                        "bio": "Bio of member",
                        "id": "Numeric member ID",
                        "swagger_type": "SimpleMember"
                    }
                ],
                "leads": "Optional field representing the number of members on this group's leadership team. Returned when the \"fields\" request parameter value contains \"leads\"",
                "last_event": [
                    "Optional field representing the last hosted event, if the group has one. Returned when the \"fields\" request parameter value contains \"last_event\"",
                    {
                        "utc_offset": "The local offset from UTC time, in milliseconds",
                        "name": "Name of event",
                        "id": "Alphanumeric event ID",
                        "time": "UTC start time of the event, in milliseconds since the epoch",
                        "swagger_type": "BasicEvent",
                        "yes_rsvp_count": "Number of yes RSVPs"
                    }
                ],
                "name": "Name of the group",
                "member_cap": "Number representing the maximum number of active members this group can have if capped. Returned only when requested in the fields request parameter and the authenticated member has permission to approve members",
                "self": [
                    "Optional field, contains details specific to the authorized user in this Meetup Group",
                    {
                        "visited": "Member's last visit to the group site, in milliseconds since the epoch",
                        "role": "Member's role in group, if any: Organizer, Assistant Organizer, Event Organizer, etc.",
                        "membership_dues": [
                            "Member's membership dues if the group has membership dues",
                            {
                                "paid_until": "For groups with recurring billing periods, this returns the time in milliseconds since the epoch that the member's next payment is due",
                                "total_amount": "Total amount paid",
                                "cancelled": "For groups with recurring billing periods, this Boolean field indicates that membership dues were cancelled",
                                "transaction_time": "Time the transaction was made in milliseconds since the epoch",
                                "exempt": "For groups with recurring billing periods, this Boolean field indicates that the member is exempt from payment.",
                                "trial": [
                                    "If the group offers a trial membership, this indicates information for unpaid members.",
                                    {
                                        "days": "The total number of trial days offered by the group",
                                        "days_remaining": "The number of days remaining in the member's trial period",
                                        "expired": "Boolean indicator of whether or not the unpaid subscription has expired or not"
                                    }
                                ],
                                "period_status": "For groups with recurring billing periods, this returns one of the following values grace paid pending unpaid"
                            }
                        ],
                        "actions": "List of actions the authenticated member may perform, potentially \"broadcast_message\": the ability to broadcast messages to group members via the \"announce\" mailing list, \"event_create\": the ability to create new events, \"event_draft\": the ability to save new events as drafts, \"role_assign\": the ability to assign member roles, \"edit\": the ability to edit group settings, \"member_approval\": the ability to approve or decline member requests to join, or \"subscription_upgrade\": the ability to upgrade this group's subscription plan",
                        "status": "Indicates the authorized user's membership with this group. Value may be one of \"none\", \"pending\", \"pending_payment\", \"active\", or \"blocked\""
                    }
                ],
                "category": [
                    "The primary category of the group, if the group has one",
                    {
                        "name": "Display name of the category",
                        "sort_name": "Name used for sorting",
                        "id": "Numeric category id",
                        "shortname": "String identifier of the category",
                        "swagger_type": "GroupCategory"
                    }
                ],
                "who": "What the group calls its members"
            },
            "tag": null,
            "responseModel": "GetRecommendedGroups"
        },
        "GetRecommendedVenues": {
            "version": "3",
            "name": "GetRecommendedVenues",
            "httpMethod": "GET",
            "parameters": {
                "zip": {
                    "location": "query",
                    "required": false,
                    "description": "Zip code you are searching for recommendations in"
                },
                "country": {
                    "location": "query",
                    "required": false,
                    "description": "A valid two character country code, defaults to US"
                },
                "used_between": {
                    "location": "query",
                    "required": false,
                    "description": "Return venues that have been used within the given time range, defined by two times separated with a single comma. Each end of the range may be specified with relative dates, such as \"1m\" for one month from now, or by absolute time in milliseconds since the epoch. If an endpoint is omitted, the range is unbounded on that end. The default value is unbounded on both ends (though restricted to the search window described above)."
                },
                "min_groups": {
                    "location": "query",
                    "required": false,
                    "description": "The minimum number of groups that have hosted events at this venue"
                },
                "group_id": {
                    "location": "query",
                    "required": false,
                    "description": "Comma-delimited list of up to 200 group ids to help inform recommendations"
                },
                "location": {
                    "location": "query",
                    "required": false,
                    "description": "Raw text location query"
                },
                "lon": {
                    "location": "query",
                    "required": false,
                    "description": "Approximate longitude"
                },
                "radius": {
                    "location": "query",
                    "required": false,
                    "description": "Radius in miles. Defaults to member's preferred radius"
                },
                "category": {
                    "location": "query",
                    "required": false,
                    "description": "Comma-delimited list of up to 200 category ids to help inform recommendations"
                },
                "group_urlname": {
                    "location": "query",
                    "required": false,
                    "description": "Comma-delimited list of up to 200 group urlnames to help inform recommendations"
                },
                "lat": {
                    "location": "query",
                    "required": false,
                    "description": "Approximate latitude"
                },
                "page": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "offset": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "desc": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "order": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "only": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "omit": {
                    "location": "query",
                    "required": false,
                    "description": null
                }
            },
            "summary": "Returns venues Meetup finds relevant to you based on location and category. This method does not yet support sorting or pagination.",
            "uri": "/recommended/venues",
            "notes": "All parameters are optional. If you do not supply a location your request will be based on your IP's geographic location. If the server is unable to produce recommendations in a suitable amount of time, a 503 error will be returned.",
            "response": {
                "zip": "If available, the venue's ZIP code",
                "country": "If available, the name of the venue's country code",
                "localized_country_name": "If available, the localized name of the venue's country",
                "visibility": "'private' if this venue is a private home, otherwise 'public'",
                "city": "If available, the name of the venue's city",
                "address_1": "If available, the first address line of the venue",
                "address_2": "If available, the second address line of the venue",
                "address_3": "If available, the third address line of the venue",
                "rating": "The average rating for the venue",
                "lon": "If available, the venue's longitude",
                "rating_count": "The number of times the venue was rated",
                "taglist": "list of string tags associated with the venue. returned when fields=taglist",
                "phone": "If available, the venue's photo number",
                "name": "If available, the venue's name",
                "state": "If available, and the venue's country id is within the US or Canada, the venue's state",
                "id": "Id, of the venue",
                "lat": "If available, the venue's latitude"
            },
            "tag": null,
            "responseModel": "GetRecommendedVenues"
        },
        "GetSelfBlocks": {
            "version": "3",
            "name": "GetSelfBlocks",
            "httpMethod": "GET",
            "parameters": {
                "member_id": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "page": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "offset": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "desc": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "order": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "only": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "omit": {
                    "location": "query",
                    "required": false,
                    "description": null
                }
            },
            "summary": "Checks the block status for a target member relative to the authenticated member",
            "uri": "/self/blocks/{member_id}",
            "notes": "A valid member_id path parameter for the target member is required.",
            "response": {
                "status": "The block status for the target member. This may be one of 'blocked' or 'none'"
            },
            "tag": "status",
            "responseModel": "GetSelfBlocks"
        },
        "GetSelfCalendar": {
            "version": "3",
            "name": "GetSelfCalendar",
            "httpMethod": "GET",
            "parameters": {
                "fields": {
                    "location": "query",
                    "required": false,
                    "description": "A comma-delimited list of optional fields names which may be appended to the response"
                },
                "page": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "offset": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "desc": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "order": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "only": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "omit": {
                    "location": "query",
                    "required": false,
                    "description": null
                }
            },
            "summary": "Get a listing of all upcoming Meetup events for the authenticated member",
            "uri": "/self/calendar",
            "notes": "All parameters are optional.\n\nThis endpoint uses HTTP [Link header based pagination](/meetup_api/docs/#v3_json)",
            "response": {
                "utc_offset": "The local offset from UTC time, in milliseconds",
                "comment_count": "An aggregate count of all comments and replies for a given event, returned when fields request parameter value includes 'comment_count'",
                "rsvp_limit": "The number of \"yes\" RSVPS an event has capacity for",
                "venue": [
                    "The event venue, present only if selected and not hidden by an organizer",
                    {
                        "zip": "ZIP code if, venue is in US or Canada",
                        "country": "Country code of venue",
                        "localized_country_name": "The localized name of the venue's country",
                        "city": "City of venue",
                        "address_1": "Line 1 of venue address",
                        "address_2": "Line 2 of venue address",
                        "address_3": "Line 3 of venue address",
                        "lon": "Approximate longitude",
                        "phone": "Phone number of venue",
                        "name": "Venue name",
                        "state": "State of venue where available",
                        "id": "Unique numeric venue id",
                        "repinned": "true if the editor of the event altered the original venues pin location, false otherwise",
                        "lat": "Approximate latitude"
                    }
                ],
                "featured": "Boolean indicator of whether or not a given event is featured, returned when fields request parameter value includes 'featured'",
                "survey_questions": [
                    "List of organizer-defined survey questions intended to be asked of RSVPing members. Returned when the \"fields\"' request parameter contains \"answers\"",
                    {
                        "question": "Question text",
                        "id": "Numeric question identifier"
                    }
                ],
                "venue_visibility": "Represents who can see the venue with a potential value of \"members\" or \"public\", returned when fields request parameter value includes \"venue_visibility\" and the authenticated member is a member of the group hosting the event",
                "manual_attendance_count": "Manually entered total attendee headcount, if any exists",
                "fee": [
                    "Ticketing fee information for events that support payments",
                    {
                        "amount": "Amount of the fee",
                        "accepts": "Acceptable methods of payments may be one of \"paypal\", \"amazon\", \"wepay\", or \"cash\"",
                        "description": "Fee description, typically \"per-person\"",
                        "currency": "Currency accepted for fee",
                        "label": "Label for fee, typically \"Price\"",
                        "required": "Boolean flag indicating if this fee is required to RSVP"
                    }
                ],
                "link": "Link to event on meetup.com",
                "why": "We should do this because...",
                "description": "Description of the event in HTML. Email addresses and phone numbers will be masked for non-members",
                "short_link": "A shortened link for the event on meetup.com, returned when fields request parameter value includes \"short_link\"",
                "yes_rsvp_count": "Number of yes RSVPs including guests",
                "duration": "Scheduled event duration in milliseconds, if an end time is specified by the organizer. When not present, a default of 3 hours may be assumed by applications",
                "event_hosts": [
                    "List of members hosting the event, returned when fields request parameter value includes 'event_hosts'",
                    {
                        "name": "Host member's name",
                        "photo": [
                            "Member photo if one exists",
                            {
                                "highres_link": "Link for full sized photo",
                                "base_url": "A base url that can be use to construct a photo url from its components",
                                "id": "Numeric photo ID",
                                "photo_link": "Link for standard sized photo",
                                "type": "Type of photo. One of \"event\" or \"member\"",
                                "thumb_link": "Link for thumbnail sized photo"
                            }
                        ],
                        "id": "Host member's id"
                    }
                ],
                "simple_html_description": "Description of the event, in simple HTML source format. If this event's description was saved in simple HTML format, the description field will be an HTML translation of this source. Returned when the \"fields\"' request parameter contains \"simple_html_description\"",
                "id": "A unique alphanumeric identifier for event",
                "group": [
                    "Information about group hosting the event",
                    {
                        "photo_gradient": [
                            "Color combination used to generate group duotone, returned when fields request parameter value includes 'group_photo_gradient'",
                            {
                                "dark_color": "Dark color in hexidecimal format",
                                "id": "Unique numeric identifier",
                                "composite_color": "Composite color in hexidecimal format",
                                "light_color": "Light color in hexidecimal format",
                                "swagger_type": "Duotone"
                            }
                        ],
                        "join_info": [
                            "Lists any questions requested when joining and required fields. Returned with \"fields\" request parameter value includes \"group_join_info\"",
                            {
                                "photo_req": "true if required, false otherwise",
                                "questions": [
                                    "List of profile questions organizer would like new members to answer prior to joining",
                                    {
                                        "question": "The text of the question",
                                        "id": "Unique numeric identifier for the question"
                                    }
                                ],
                                "questions_req": "true if required, false otherwise",
                                "swagger_type": "GroupJoinInfo"
                            }
                        ],
                        "visibility": "Group visibility, returned when fields request parameter value includes 'group_visibility'. Value may be \"public\", \"public_limited\", or \"members\".",
                        "topics": [
                            "Topics related to the group, returned when fields request parameter value includes 'group_topics'",
                            {
                                "name": "Display name of the topic",
                                "urlkey": "The unique keyword used to identify this topic",
                                "id": "Numeric topic id",
                                "lang": "Language topic originates from",
                                "swagger_type": "TopicSummary"
                            }
                        ],
                        "key_photo": [
                            "Group primary photo, returned when fields request parameter value includes 'group_key_photo'",
                            {
                                "highres_link": "Link for full sized photo",
                                "base_url": "A base url that can be use to construct a photo url from its components",
                                "id": "Numeric photo ID",
                                "photo_link": "Link for standard sized photo",
                                "type": "Type of photo. One of \"event\" or \"member\"",
                                "thumb_link": "Link for thumbnail sized photo"
                            }
                        ],
                        "photo": [
                            "Photo associated with group, returned when fields request parameter value includes 'group_photo'",
                            {
                                "highres_link": "Link for full sized photo",
                                "base_url": "A base url that can be use to construct a photo url from its components",
                                "id": "Numeric photo ID",
                                "photo_link": "Link for standard sized photo",
                                "type": "Type of photo. One of \"event\" or \"member\"",
                                "thumb_link": "Link for thumbnail sized photo"
                            }
                        ],
                        "lon": "Approximate group longitude",
                        "join_mode": "Indicator of how new members may be able to join. be one of \"open\", \"approval\" or \"closed\"",
                        "name": "Name of the group",
                        "self": [
                            "Information pertaining to the authenticated member with respect to the group, returned when fields request parameter value includes 'group_self_actions', 'group_self_membership_dues', or 'group_self_status'",
                            {
                                "actions": "list of actions the authenticated member may perform, potentially \"event_create\": the ability to create new events, \"event_draft\": the ability to save new events as drafts, \"role_assign\": the ability to assign member roles, \"edit\": the ability to edit group settings, \"member_approval\": the ability to approve or decline member requests to join, or \"subscription_upgrade\": the ability to upgrade this group's subscription plan",
                                "membership_dues": "Membership dues information associated with hosting group, returned when \"fields\" request parameter value includes \"group_membership_dues\" and group has dues",
                                "status": "Indicates the authorized user's membership with this group.\n\nValue may be one of \"none\", \"pending\", \"pending_payment\", \"active\", or \"blocked\""
                            }
                        ],
                        "id": "Numeric identifier for the group",
                        "urlname": "Alphanumeric urlname identifier for the group",
                        "category": [
                            "Category group belongs to, returned when fields request parameter value includes 'group_category'",
                            {
                                "name": "Display name of the category",
                                "sort_name": "Name used for sorting",
                                "id": "Numeric category id",
                                "shortname": "String identifier of the category",
                                "swagger_type": "GroupCategory"
                            }
                        ],
                        "membership_dues": [
                            "Membership dues information associated with hosting group, returned when fields request parameter value includes 'group_membership_dues'",
                            {
                                "refund_policy": [
                                    "Conditions for refunds",
                                    {
                                        "group_closes": "refund applies when the group closes",
                                        "member_leaves": "refund applies when member leaves the group",
                                        "none": "indicates there is no refund policy",
                                        "member_banned": "refund applies when the member is banned",
                                        "custom": "Boolean indicator of a custom refund policy"
                                    }
                                ],
                                "reasons": "Array of reasons containing one or more of the following values compensate_organizer, cover_costs, encourage_engagement, improve_meetups, other, provide_supplies, reserve_fund",
                                "methods": [
                                    "Methods of payments",
                                    {
                                        "credit_card": "Boolean indicator that credit cards are accepted",
                                        "other": "Boolean indicator that other forms of payment are accepted",
                                        "paypal": "Boolean indicator that Paypal payments are accepted",
                                        "amazon_payments": "Boolean indicator that Amazon Payments are accepted"
                                    }
                                ],
                                "fee": "Numeric fee value",
                                "trial_days": "When present, returns the number of days the group is offering a free trial period for to new members. When not present, this indicates that the group does not offer a trial membership period",
                                "self_payment_required": "Returns true if the authorized user is prevented from participating in the group until a payment is made",
                                "required": "true if dues are required",
                                "swagger_type": "MembershipDues",
                                "fee_desc": "The interval at which dues must be paid. Possible values may include: \"month\", \"year\", \"day\", or \"every other day\"",
                                "currency": "Currency in which the fee is declared",
                                "reasons_other": "An additional reason if specified.",
                                "required_to": "If the dues are required this indicates what they are required for. May be one of 'join' or 'rsvp'"
                            }
                        ],
                        "lat": "Approximate group latitude",
                        "who": "What the group calls its members"
                    }
                ],
                "rsvpable_after_join": "Boolean value indicating whether or not the authenticated member can RSVP\nafter joining the hosting group.\nReturned when the \"fields\" request parameter\nincludes \"rsvpable_after_join\"\nand the authenticated member is _not_ a member of the\ngroup hosting this event",
                "rsvp_rules": [
                    "Information about conditions that allow for member RSVPs, returned when fields request parameter value include 'rsvp_rules'",
                    {
                        "refund_policy": [
                            "The organizer-defined terms for refunds. If this is defined, you must provide the authenticated member a way to access this information before they can RSVP. They will need to agree to these terms before they RSVP",
                            {
                                "policies": "list of one or more of the following. 'no_refunds' if the organizer will not issue refunds', 'member_cancellation' if the organizer offers a refund for member cancellation, 'event_cancellation' if the organizer offers a refund if the event is canceled, 'event_rescheduled' if the organizer offers a refund when the event is rescheduled",
                                "days": "if member_cancellation is present, it's relative to this many days before the event",
                                "notes": "additional refund policy notes"
                            }
                        ],
                        "closed": "Boolean value indicating whether or not RSVPing was explicitly closed for the event.",
                        "open_time": "UTC time that members may begin to RSVP",
                        "waitlisting": "Wait list handling when RSVP limit is reached. Value may be one of 'auto', 'manual' or 'off'",
                        "guest_limit": "Number of guests members may include in their RSVP, 0 or more",
                        "close_time": "UTC time that RSVPs will no longer be accepted, though organizers may close RSVPs earlier"
                    }
                ],
                "visibility": "Event visibility: \"public\", \"public_limited\", or \"members\". Events in private groups that do not expose limited information are visible only to that group's members and should not be made public.",
                "waitlist_count": "Number of members on the waitlist, if one exists",
                "created": "Creation time of the event, in milliseconds since the epoch",
                "plain_text_description": "Plain text version of the event description. Email addresses and photo numbers will be masked for non-members. Returned when \"fields\" request parameter value contains \"plain_text_description\"",
                "how_to_find_us": "Additional information on how to find members at a venue when provided by an organizer, returned when fields request parameter value includes 'how_to_find_us'",
                "swagger_type": "EventSummary",
                "photo_album": [
                    "Information about photo uploads for this event, returned when fields request parameter value includes 'photo_album'",
                    {
                        "photo_count": "Number of photos uploaded",
                        "photo_sample": [
                            "A small collection of photos uploaded for this event",
                            {
                                "highres_link": "Link for full sized photo",
                                "base_url": "A base url that can be use to construct a photo url from its components",
                                "id": "Numeric photo ID",
                                "photo_link": "Link for standard sized photo",
                                "type": "Type of photo. One of \"event\" or \"member\"",
                                "thumb_link": "Link for thumbnail sized photo"
                            }
                        ],
                        "id": "Unique numeric identifier for photo album",
                        "event": [
                            "Event photo album belongs to. This will be absent if the album\nis not associated with an event",
                            {
                                "utc_offset": "The local offset from UTC time, in milliseconds",
                                "name": "Name of event",
                                "id": "Alphanumeric event ID",
                                "time": "UTC start time of the event, in milliseconds since the epoch",
                                "swagger_type": "BasicEvent",
                                "yes_rsvp_count": "Number of yes RSVPs"
                            }
                        ],
                        "title": "Album title",
                        "swagger_type": "PhotoAlbumSummary"
                    }
                ],
                "rsvpable": "Boolean value indicating whether or not the authenticated member can RSVP or join the waitlist when the event is full.\nReturned when the \"fields\" request parameter value\nincludes \"rsvpable\"",
                "rsvp_sample": [
                    "A small collection RSVPs for members attending this event, returned when fields request parameter value includes 'rsvp_sample'",
                    {
                        "member": [
                            "Member who RSVP'd",
                            {
                                "role": "The leadership role of this member within the group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
                                "name": "Name of member",
                                "photo": [
                                    "Member photo, if available.\nMembers who registered via Facebook may not have highres photos",
                                    {
                                        "highres_link": "Link for full sized photo",
                                        "base_url": "A base url that can be use to construct a photo url from its components",
                                        "id": "Numeric photo ID",
                                        "photo_link": "Link for standard sized photo",
                                        "type": "Type of photo. One of \"event\" or \"member\"",
                                        "thumb_link": "Link for thumbnail sized photo"
                                    }
                                ],
                                "self": [
                                    "Represents the authenticated member's relation to member.\nReturned with the \"fields\" request parameter includes \"self\" and\nthe target member is not the authenticated member",
                                    {
                                        "common": [
                                            "Information the authenticated member has in common with this member",
                                            {
                                                "groups": [
                                                    "List of common groups",
                                                    {
                                                        "join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
                                                        "photo_gradient": [
                                                            "Color combination used generate group duotone",
                                                            {
                                                                "dark_color": "Dark color in hexidecimal format",
                                                                "id": "Unique numeric identifier",
                                                                "composite_color": "Composite color in hexidecimal format",
                                                                "light_color": "Light color in hexidecimal format",
                                                                "swagger_type": "Duotone"
                                                            }
                                                        ],
                                                        "name": "Name of the group",
                                                        "key_photo": [
                                                            "Group primary photo",
                                                            {
                                                                "highres_link": "Link for full sized photo",
                                                                "base_url": "A base url that can be use to construct a photo url from its components",
                                                                "id": "Numeric photo ID",
                                                                "photo_link": "Link for standard sized photo",
                                                                "type": "Type of photo. One of \"event\" or \"member\"",
                                                                "thumb_link": "Link for thumbnail sized photo"
                                                            }
                                                        ],
                                                        "id": "Numeric group ID",
                                                        "urlname": "Urlname used to identify the group on meetup.com",
                                                        "group_photo": [
                                                            "Group photo",
                                                            {
                                                                "highres_link": "Link for full sized photo",
                                                                "base_url": "A base url that can be use to construct a photo url from its components",
                                                                "id": "Numeric photo ID",
                                                                "photo_link": "Link for standard sized photo",
                                                                "type": "Type of photo. One of \"event\" or \"member\"",
                                                                "thumb_link": "Link for thumbnail sized photo"
                                                            }
                                                        ],
                                                        "swagger_type": "GroupSummary",
                                                        "who": "What the group calls its members"
                                                    }
                                                ]
                                            }
                                        ],
                                        "actions": "List of actions available for the authenticated member to perform.\nCurrently only \"message\" is supported",
                                        "blocks": "Boolean indication of whether or not the authenticated member blocks this member",
                                        "friends": "Boolean indication of whether or not the authenticated member is a friend of the member",
                                        "swagger_type": "MemberSelf"
                                    }
                                ],
                                "bio": "Intro of member",
                                "id": "Numeric member ID",
                                "title": "Organizer defined title of member. May be absent if not defined",
                                "event_context": [
                                    "Member's context within the event. Only returned in the context of an event",
                                    {
                                        "host": "Boolean indicator for whether this member is a host for the event"
                                    }
                                ],
                                "swagger_type": "AttendanceSummary"
                            }
                        ],
                        "id": "Unique numeric identifier for the RSVP. May be -1 for events scheduled in the future",
                        "updated": "Last modified time of the RSVP, in milliseconds since the epoch",
                        "swagger_type": "RSVPSummary",
                        "created": "Creation time of the RSVP, in milliseconds since the epoch"
                    }
                ],
                "series": [
                    "Returned when the \"fields\" request parameter value includes \"series\" for events that are part of a series of events",
                    {
                        "end_date": "Date when this series ends/ended, in milliseconds since the epoch",
                        "description": "Human displayable description of how often events in this series occur",
                        "id": "Unique numeric identifier for the series",
                        "swagger_type": "RecurrenceSchedule",
                        "weekly": [
                            "Returned for events that are part of a weekly recurring series of events",
                            {
                                "days_of_week": "List of integers 1-7 (Monday-Sunday) of days of week recurrence occurs upon",
                                "end_date": "Date when series ends/ended, in LocalDate (yyyy-MM-dd) format",
                                "interval": "Integer number of weeks between each recurrence"
                            }
                        ],
                        "start_date": "Date when this series begins/began, in milliseconds since the epoch"
                    }
                ],
                "name": "Name of the event",
                "self": [
                    "represents details particular to the authorized user, only present if requested and authenticated member is a member of the hosting group, returned when fields request parameter value includes 'self'",
                    {
                        "pay_status": "The authenticated member's payment status. This may be one of 'none', 'paid', 'partially_paid', 'payment_pending', 'echeck_pending', 'refund_pending', 'partially_refunded', 'refunded'",
                        "role": "The authenticated member's role in within the group, if any. This may be one of: Organizer, Assistant Organizer, Event Organizer, etc.",
                        "actions": "List of actions the authenticated member may perform, potentially one or more of the following\n\n\"announce\" to announce the event to the group's members\n\n\"attendance\" to view or take attendance for the event\n\n\"comment\" the ability to post a comment or reply\n\n\"payments\" the ability to mark members as paid if the event is ticketed\n\n\"publish\" to publish a draft event\n\n\"edit\" to edit the event information\n\n\"edit_hosts\" to edit the hosts for the event\n\n\"delete\" to delete the event\n\n\"rsvp\" to RSVP yes or no to the event\n\n\"wait\" to get on the waiting list (using the same RSVP methods).\n\n\"dues\" if an organizer requires membership dues to RSVP and the authorized\n member has not paid theirs\n\n\"upload_photo\" the ability to upload a photo for an event",
                        "rsvp": [
                            "Member's RSVP, if any",
                            {
                                "answers": [
                                    "List of answers to event survey questions asked when the member RSVP'd in the order asked, only available to organizers and assistant organizers",
                                    {
                                        "question": "Question text",
                                        "answer": "Answer text for question",
                                        "updated": "The last time this answer was updated",
                                        "question_id": "Unique number identifier for question",
                                        "swagger_type": "SurveyQuestionAnswer"
                                    }
                                ],
                                "guests": "Number of guests the RSVP'd member will be bringing",
                                "response": "May be \"yes\" or \"no\".\n\nIn cases where an event is over capacity and the member has shown an intent to attend,\nresponse may be \"waitlist\" if the event has a waitlist.\n\nIn cases of ticketed events, this may be \"yes_pending_payment\"\nfor a \"yes\" response for a ticketed event with an unprocessed payment"
                            }
                        ],
                        "swagger_type": "EventSelf"
                    }
                ],
                "time": "UTC start time of the event, in milliseconds since the epoch",
                "updated": "Last modified time for the event in milliseconds since the epoch",
                "status": "\"cancelled\", \"upcoming\", \"past\", \"proposed\", \"suggested\", or \"draft\""
            },
            "tag": "list",
            "responseModel": "GetSelfCalendar"
        },
        "GetSelfEvents": {
            "version": "3",
            "name": "GetSelfEvents",
            "httpMethod": "GET",
            "parameters": {
                "scroll": {
                    "location": "query",
                    "required": false,
                    "description": "A string representing an alias for a point on a timeline.\n\nSupported values are as follows.\n\n__recent_past__: Scroll to the last RSVP'd Meetup Event that has passed.\n If there is no recent RSVP, this defaults to __next_upcoming__\n\n__next_upcoming__: Scroll to the next upcoming Meetup Event the authenticated member\nRSVP'd to.\n\nAlternatively the server may generate a scroll value used for pagination Link headers.\nClients should treat the contents of those as a transparent string. Its\ncontents are subject to change in the future"
                },
                "page": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "fields": {
                    "location": "query",
                    "required": false,
                    "description": "A comma-delimited list of optional fields names which may be appended to the response"
                },
                "rsvp": {
                    "location": "query",
                    "required": false,
                    "description": "Comma-delimited list of RSVP responses.\nValid values are \"waitlist\" or \"yes\". The default is \"yes\""
                },
                "desc": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "status": {
                    "location": "query",
                    "required": false,
                    "description": "Comma-delimited list of event statuses.\nValid values are \"past\" or \"upcoming\""
                },
                "offset": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "order": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "only": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "omit": {
                    "location": "query",
                    "required": false,
                    "description": null
                }
            },
            "summary": "Gets a listing of all scheduled Meetup Events the authenticated member has RSVP'd to\nthat have been announced to the group.\nThis listing is ordered from oldest to most recent by default",
            "uri": "/self/events",
            "notes": "This endpoint uses HTTP [Link header based pagination](/meetup_api/docs/#v3_json). Clients may\nuse the scroll request parameter to jump to a target scroll location.\nValid values for scroll targets are defined below.\nA 'page' parameter may be provided to control the number of results returned.",
            "response": {
                "utc_offset": "The local offset from UTC time, in milliseconds",
                "comment_count": "An aggregate count of all comments and replies for a given event, returned when fields request parameter value includes 'comment_count'",
                "rsvp_limit": "The number of \"yes\" RSVPS an event has capacity for",
                "venue": [
                    "The event venue, present only if selected and not hidden by an organizer",
                    {
                        "zip": "ZIP code if, venue is in US or Canada",
                        "country": "Country code of venue",
                        "localized_country_name": "The localized name of the venue's country",
                        "city": "City of venue",
                        "address_1": "Line 1 of venue address",
                        "address_2": "Line 2 of venue address",
                        "address_3": "Line 3 of venue address",
                        "lon": "Approximate longitude",
                        "phone": "Phone number of venue",
                        "name": "Venue name",
                        "state": "State of venue where available",
                        "id": "Unique numeric venue id",
                        "repinned": "true if the editor of the event altered the original venues pin location, false otherwise",
                        "lat": "Approximate latitude"
                    }
                ],
                "featured": "Boolean indicator of whether or not a given event is featured, returned when fields request parameter value includes 'featured'",
                "survey_questions": [
                    "List of organizer-defined survey questions intended to be asked of RSVPing members. Returned when the \"fields\"' request parameter contains \"answers\"",
                    {
                        "question": "Question text",
                        "id": "Numeric question identifier"
                    }
                ],
                "venue_visibility": "Represents who can see the venue with a potential value of \"members\" or \"public\", returned when fields request parameter value includes \"venue_visibility\" and the authenticated member is a member of the group hosting the event",
                "manual_attendance_count": "Manually entered total attendee headcount, if any exists",
                "fee": [
                    "Ticketing fee information for events that support payments",
                    {
                        "amount": "Amount of the fee",
                        "accepts": "Acceptable methods of payments may be one of \"paypal\", \"amazon\", \"wepay\", or \"cash\"",
                        "description": "Fee description, typically \"per-person\"",
                        "currency": "Currency accepted for fee",
                        "label": "Label for fee, typically \"Price\"",
                        "required": "Boolean flag indicating if this fee is required to RSVP"
                    }
                ],
                "link": "Link to event on meetup.com",
                "why": "We should do this because...",
                "description": "Description of the event in HTML. Email addresses and phone numbers will be masked for non-members",
                "short_link": "A shortened link for the event on meetup.com, returned when fields request parameter value includes \"short_link\"",
                "yes_rsvp_count": "Number of yes RSVPs including guests",
                "duration": "Scheduled event duration in milliseconds, if an end time is specified by the organizer. When not present, a default of 3 hours may be assumed by applications",
                "event_hosts": [
                    "List of members hosting the event, returned when fields request parameter value includes 'event_hosts'",
                    {
                        "name": "Host member's name",
                        "photo": [
                            "Member photo if one exists",
                            {
                                "highres_link": "Link for full sized photo",
                                "base_url": "A base url that can be use to construct a photo url from its components",
                                "id": "Numeric photo ID",
                                "photo_link": "Link for standard sized photo",
                                "type": "Type of photo. One of \"event\" or \"member\"",
                                "thumb_link": "Link for thumbnail sized photo"
                            }
                        ],
                        "id": "Host member's id"
                    }
                ],
                "simple_html_description": "Description of the event, in simple HTML source format. If this event's description was saved in simple HTML format, the description field will be an HTML translation of this source. Returned when the \"fields\"' request parameter contains \"simple_html_description\"",
                "id": "A unique alphanumeric identifier for event",
                "group": [
                    "Information about group hosting the event",
                    {
                        "photo_gradient": [
                            "Color combination used to generate group duotone, returned when fields request parameter value includes 'group_photo_gradient'",
                            {
                                "dark_color": "Dark color in hexidecimal format",
                                "id": "Unique numeric identifier",
                                "composite_color": "Composite color in hexidecimal format",
                                "light_color": "Light color in hexidecimal format",
                                "swagger_type": "Duotone"
                            }
                        ],
                        "join_info": [
                            "Lists any questions requested when joining and required fields. Returned with \"fields\" request parameter value includes \"group_join_info\"",
                            {
                                "photo_req": "true if required, false otherwise",
                                "questions": [
                                    "List of profile questions organizer would like new members to answer prior to joining",
                                    {
                                        "question": "The text of the question",
                                        "id": "Unique numeric identifier for the question"
                                    }
                                ],
                                "questions_req": "true if required, false otherwise",
                                "swagger_type": "GroupJoinInfo"
                            }
                        ],
                        "visibility": "Group visibility, returned when fields request parameter value includes 'group_visibility'. Value may be \"public\", \"public_limited\", or \"members\".",
                        "topics": [
                            "Topics related to the group, returned when fields request parameter value includes 'group_topics'",
                            {
                                "name": "Display name of the topic",
                                "urlkey": "The unique keyword used to identify this topic",
                                "id": "Numeric topic id",
                                "lang": "Language topic originates from",
                                "swagger_type": "TopicSummary"
                            }
                        ],
                        "key_photo": [
                            "Group primary photo, returned when fields request parameter value includes 'group_key_photo'",
                            {
                                "highres_link": "Link for full sized photo",
                                "base_url": "A base url that can be use to construct a photo url from its components",
                                "id": "Numeric photo ID",
                                "photo_link": "Link for standard sized photo",
                                "type": "Type of photo. One of \"event\" or \"member\"",
                                "thumb_link": "Link for thumbnail sized photo"
                            }
                        ],
                        "photo": [
                            "Photo associated with group, returned when fields request parameter value includes 'group_photo'",
                            {
                                "highres_link": "Link for full sized photo",
                                "base_url": "A base url that can be use to construct a photo url from its components",
                                "id": "Numeric photo ID",
                                "photo_link": "Link for standard sized photo",
                                "type": "Type of photo. One of \"event\" or \"member\"",
                                "thumb_link": "Link for thumbnail sized photo"
                            }
                        ],
                        "lon": "Approximate group longitude",
                        "join_mode": "Indicator of how new members may be able to join. be one of \"open\", \"approval\" or \"closed\"",
                        "name": "Name of the group",
                        "self": [
                            "Information pertaining to the authenticated member with respect to the group, returned when fields request parameter value includes 'group_self_actions', 'group_self_membership_dues', or 'group_self_status'",
                            {
                                "actions": "list of actions the authenticated member may perform, potentially \"event_create\": the ability to create new events, \"event_draft\": the ability to save new events as drafts, \"role_assign\": the ability to assign member roles, \"edit\": the ability to edit group settings, \"member_approval\": the ability to approve or decline member requests to join, or \"subscription_upgrade\": the ability to upgrade this group's subscription plan",
                                "membership_dues": "Membership dues information associated with hosting group, returned when \"fields\" request parameter value includes \"group_membership_dues\" and group has dues",
                                "status": "Indicates the authorized user's membership with this group.\n\nValue may be one of \"none\", \"pending\", \"pending_payment\", \"active\", or \"blocked\""
                            }
                        ],
                        "id": "Numeric identifier for the group",
                        "urlname": "Alphanumeric urlname identifier for the group",
                        "category": [
                            "Category group belongs to, returned when fields request parameter value includes 'group_category'",
                            {
                                "name": "Display name of the category",
                                "sort_name": "Name used for sorting",
                                "id": "Numeric category id",
                                "shortname": "String identifier of the category",
                                "swagger_type": "GroupCategory"
                            }
                        ],
                        "membership_dues": [
                            "Membership dues information associated with hosting group, returned when fields request parameter value includes 'group_membership_dues'",
                            {
                                "refund_policy": [
                                    "Conditions for refunds",
                                    {
                                        "group_closes": "refund applies when the group closes",
                                        "member_leaves": "refund applies when member leaves the group",
                                        "none": "indicates there is no refund policy",
                                        "member_banned": "refund applies when the member is banned",
                                        "custom": "Boolean indicator of a custom refund policy"
                                    }
                                ],
                                "reasons": "Array of reasons containing one or more of the following values compensate_organizer, cover_costs, encourage_engagement, improve_meetups, other, provide_supplies, reserve_fund",
                                "methods": [
                                    "Methods of payments",
                                    {
                                        "credit_card": "Boolean indicator that credit cards are accepted",
                                        "other": "Boolean indicator that other forms of payment are accepted",
                                        "paypal": "Boolean indicator that Paypal payments are accepted",
                                        "amazon_payments": "Boolean indicator that Amazon Payments are accepted"
                                    }
                                ],
                                "fee": "Numeric fee value",
                                "trial_days": "When present, returns the number of days the group is offering a free trial period for to new members. When not present, this indicates that the group does not offer a trial membership period",
                                "self_payment_required": "Returns true if the authorized user is prevented from participating in the group until a payment is made",
                                "required": "true if dues are required",
                                "swagger_type": "MembershipDues",
                                "fee_desc": "The interval at which dues must be paid. Possible values may include: \"month\", \"year\", \"day\", or \"every other day\"",
                                "currency": "Currency in which the fee is declared",
                                "reasons_other": "An additional reason if specified.",
                                "required_to": "If the dues are required this indicates what they are required for. May be one of 'join' or 'rsvp'"
                            }
                        ],
                        "lat": "Approximate group latitude",
                        "who": "What the group calls its members"
                    }
                ],
                "rsvpable_after_join": "Boolean value indicating whether or not the authenticated member can RSVP\nafter joining the hosting group.\nReturned when the \"fields\" request parameter\nincludes \"rsvpable_after_join\"\nand the authenticated member is _not_ a member of the\ngroup hosting this event",
                "rsvp_rules": [
                    "Information about conditions that allow for member RSVPs, returned when fields request parameter value include 'rsvp_rules'",
                    {
                        "refund_policy": [
                            "The organizer-defined terms for refunds. If this is defined, you must provide the authenticated member a way to access this information before they can RSVP. They will need to agree to these terms before they RSVP",
                            {
                                "policies": "list of one or more of the following. 'no_refunds' if the organizer will not issue refunds', 'member_cancellation' if the organizer offers a refund for member cancellation, 'event_cancellation' if the organizer offers a refund if the event is canceled, 'event_rescheduled' if the organizer offers a refund when the event is rescheduled",
                                "days": "if member_cancellation is present, it's relative to this many days before the event",
                                "notes": "additional refund policy notes"
                            }
                        ],
                        "closed": "Boolean value indicating whether or not RSVPing was explicitly closed for the event.",
                        "open_time": "UTC time that members may begin to RSVP",
                        "waitlisting": "Wait list handling when RSVP limit is reached. Value may be one of 'auto', 'manual' or 'off'",
                        "guest_limit": "Number of guests members may include in their RSVP, 0 or more",
                        "close_time": "UTC time that RSVPs will no longer be accepted, though organizers may close RSVPs earlier"
                    }
                ],
                "visibility": "Event visibility: \"public\", \"public_limited\", or \"members\". Events in private groups that do not expose limited information are visible only to that group's members and should not be made public.",
                "waitlist_count": "Number of members on the waitlist, if one exists",
                "created": "Creation time of the event, in milliseconds since the epoch",
                "plain_text_description": "Plain text version of the event description. Email addresses and photo numbers will be masked for non-members. Returned when \"fields\" request parameter value contains \"plain_text_description\"",
                "how_to_find_us": "Additional information on how to find members at a venue when provided by an organizer, returned when fields request parameter value includes 'how_to_find_us'",
                "swagger_type": "EventSummary",
                "photo_album": [
                    "Information about photo uploads for this event, returned when fields request parameter value includes 'photo_album'",
                    {
                        "photo_count": "Number of photos uploaded",
                        "photo_sample": [
                            "A small collection of photos uploaded for this event",
                            {
                                "highres_link": "Link for full sized photo",
                                "base_url": "A base url that can be use to construct a photo url from its components",
                                "id": "Numeric photo ID",
                                "photo_link": "Link for standard sized photo",
                                "type": "Type of photo. One of \"event\" or \"member\"",
                                "thumb_link": "Link for thumbnail sized photo"
                            }
                        ],
                        "id": "Unique numeric identifier for photo album",
                        "event": [
                            "Event photo album belongs to. This will be absent if the album\nis not associated with an event",
                            {
                                "utc_offset": "The local offset from UTC time, in milliseconds",
                                "name": "Name of event",
                                "id": "Alphanumeric event ID",
                                "time": "UTC start time of the event, in milliseconds since the epoch",
                                "swagger_type": "BasicEvent",
                                "yes_rsvp_count": "Number of yes RSVPs"
                            }
                        ],
                        "title": "Album title",
                        "swagger_type": "PhotoAlbumSummary"
                    }
                ],
                "rsvpable": "Boolean value indicating whether or not the authenticated member can RSVP or join the waitlist when the event is full.\nReturned when the \"fields\" request parameter value\nincludes \"rsvpable\"",
                "rsvp_sample": [
                    "A small collection RSVPs for members attending this event, returned when fields request parameter value includes 'rsvp_sample'",
                    {
                        "member": [
                            "Member who RSVP'd",
                            {
                                "role": "The leadership role of this member within the group, if any.\nValue may be one of assistant_organizer, coorganizer, event_organizer, organizer",
                                "name": "Name of member",
                                "photo": [
                                    "Member photo, if available.\nMembers who registered via Facebook may not have highres photos",
                                    {
                                        "highres_link": "Link for full sized photo",
                                        "base_url": "A base url that can be use to construct a photo url from its components",
                                        "id": "Numeric photo ID",
                                        "photo_link": "Link for standard sized photo",
                                        "type": "Type of photo. One of \"event\" or \"member\"",
                                        "thumb_link": "Link for thumbnail sized photo"
                                    }
                                ],
                                "self": [
                                    "Represents the authenticated member's relation to member.\nReturned with the \"fields\" request parameter includes \"self\" and\nthe target member is not the authenticated member",
                                    {
                                        "common": [
                                            "Information the authenticated member has in common with this member",
                                            {
                                                "groups": [
                                                    "List of common groups",
                                                    {
                                                        "join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
                                                        "photo_gradient": [
                                                            "Color combination used generate group duotone",
                                                            {
                                                                "dark_color": "Dark color in hexidecimal format",
                                                                "id": "Unique numeric identifier",
                                                                "composite_color": "Composite color in hexidecimal format",
                                                                "light_color": "Light color in hexidecimal format",
                                                                "swagger_type": "Duotone"
                                                            }
                                                        ],
                                                        "name": "Name of the group",
                                                        "key_photo": [
                                                            "Group primary photo",
                                                            {
                                                                "highres_link": "Link for full sized photo",
                                                                "base_url": "A base url that can be use to construct a photo url from its components",
                                                                "id": "Numeric photo ID",
                                                                "photo_link": "Link for standard sized photo",
                                                                "type": "Type of photo. One of \"event\" or \"member\"",
                                                                "thumb_link": "Link for thumbnail sized photo"
                                                            }
                                                        ],
                                                        "id": "Numeric group ID",
                                                        "urlname": "Urlname used to identify the group on meetup.com",
                                                        "group_photo": [
                                                            "Group photo",
                                                            {
                                                                "highres_link": "Link for full sized photo",
                                                                "base_url": "A base url that can be use to construct a photo url from its components",
                                                                "id": "Numeric photo ID",
                                                                "photo_link": "Link for standard sized photo",
                                                                "type": "Type of photo. One of \"event\" or \"member\"",
                                                                "thumb_link": "Link for thumbnail sized photo"
                                                            }
                                                        ],
                                                        "swagger_type": "GroupSummary",
                                                        "who": "What the group calls its members"
                                                    }
                                                ]
                                            }
                                        ],
                                        "actions": "List of actions available for the authenticated member to perform.\nCurrently only \"message\" is supported",
                                        "blocks": "Boolean indication of whether or not the authenticated member blocks this member",
                                        "friends": "Boolean indication of whether or not the authenticated member is a friend of the member",
                                        "swagger_type": "MemberSelf"
                                    }
                                ],
                                "bio": "Intro of member",
                                "id": "Numeric member ID",
                                "title": "Organizer defined title of member. May be absent if not defined",
                                "event_context": [
                                    "Member's context within the event. Only returned in the context of an event",
                                    {
                                        "host": "Boolean indicator for whether this member is a host for the event"
                                    }
                                ],
                                "swagger_type": "AttendanceSummary"
                            }
                        ],
                        "id": "Unique numeric identifier for the RSVP. May be -1 for events scheduled in the future",
                        "updated": "Last modified time of the RSVP, in milliseconds since the epoch",
                        "swagger_type": "RSVPSummary",
                        "created": "Creation time of the RSVP, in milliseconds since the epoch"
                    }
                ],
                "series": [
                    "Returned when the \"fields\" request parameter value includes \"series\" for events that are part of a series of events",
                    {
                        "end_date": "Date when this series ends/ended, in milliseconds since the epoch",
                        "description": "Human displayable description of how often events in this series occur",
                        "id": "Unique numeric identifier for the series",
                        "swagger_type": "RecurrenceSchedule",
                        "weekly": [
                            "Returned for events that are part of a weekly recurring series of events",
                            {
                                "days_of_week": "List of integers 1-7 (Monday-Sunday) of days of week recurrence occurs upon",
                                "end_date": "Date when series ends/ended, in LocalDate (yyyy-MM-dd) format",
                                "interval": "Integer number of weeks between each recurrence"
                            }
                        ],
                        "start_date": "Date when this series begins/began, in milliseconds since the epoch"
                    }
                ],
                "name": "Name of the event",
                "self": [
                    "represents details particular to the authorized user, only present if requested and authenticated member is a member of the hosting group, returned when fields request parameter value includes 'self'",
                    {
                        "pay_status": "The authenticated member's payment status. This may be one of 'none', 'paid', 'partially_paid', 'payment_pending', 'echeck_pending', 'refund_pending', 'partially_refunded', 'refunded'",
                        "role": "The authenticated member's role in within the group, if any. This may be one of: Organizer, Assistant Organizer, Event Organizer, etc.",
                        "actions": "List of actions the authenticated member may perform, potentially one or more of the following\n\n\"announce\" to announce the event to the group's members\n\n\"attendance\" to view or take attendance for the event\n\n\"comment\" the ability to post a comment or reply\n\n\"payments\" the ability to mark members as paid if the event is ticketed\n\n\"publish\" to publish a draft event\n\n\"edit\" to edit the event information\n\n\"edit_hosts\" to edit the hosts for the event\n\n\"delete\" to delete the event\n\n\"rsvp\" to RSVP yes or no to the event\n\n\"wait\" to get on the waiting list (using the same RSVP methods).\n\n\"dues\" if an organizer requires membership dues to RSVP and the authorized\n member has not paid theirs\n\n\"upload_photo\" the ability to upload a photo for an event",
                        "rsvp": [
                            "Member's RSVP, if any",
                            {
                                "answers": [
                                    "List of answers to event survey questions asked when the member RSVP'd in the order asked, only available to organizers and assistant organizers",
                                    {
                                        "question": "Question text",
                                        "answer": "Answer text for question",
                                        "updated": "The last time this answer was updated",
                                        "question_id": "Unique number identifier for question",
                                        "swagger_type": "SurveyQuestionAnswer"
                                    }
                                ],
                                "guests": "Number of guests the RSVP'd member will be bringing",
                                "response": "May be \"yes\" or \"no\".\n\nIn cases where an event is over capacity and the member has shown an intent to attend,\nresponse may be \"waitlist\" if the event has a waitlist.\n\nIn cases of ticketed events, this may be \"yes_pending_payment\"\nfor a \"yes\" response for a ticketed event with an unprocessed payment"
                            }
                        ],
                        "swagger_type": "EventSelf"
                    }
                ],
                "time": "UTC start time of the event, in milliseconds since the epoch",
                "updated": "Last modified time for the event in milliseconds since the epoch",
                "status": "Status of the event. May be one of\n\"upcoming\" or \"past\""
            },
            "tag": null,
            "responseModel": "GetSelfEvents"
        },
        "GetSelfGroups": {
            "version": "3",
            "name": "GetSelfGroups",
            "httpMethod": "GET",
            "parameters": {
                "fields": {
                    "location": "query",
                    "required": false,
                    "description": "A comma-delimited list of optional fields to append to the response"
                },
                "page": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "offset": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "desc": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "order": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "only": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "omit": {
                    "location": "query",
                    "required": false,
                    "description": null
                }
            },
            "summary": "Lists the authenticated member's groups in the order of leadership,\nnext upcoming event, then alphabetical order by name",
            "uri": "/self/groups",
            "notes": "This endpoint uses HTTP [Link header based pagination](/meetup_api/docs/#v3_json).",
            "response": {
                "country": "Country of the group",
                "pending_members": "Number representing the count of members pending organizer approval to join. Returned only when requested in the fields request parameter and the authenticated member has permission to approve members",
                "city": "City of the group",
                "similar_groups": [
                    "Optional fields parameter. Returns up to 5 groups similar to this groups, best suited for the authenticated member when a single group is queried for. Note: this field is being deprecated in favor of making a separate request to /:urlname/similar_groups",
                    {
                        "join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
                        "name": "Name of the group",
                        "lon": "Longitude",
                        "id": "Id of the group",
                        "urlname": "Urlname used to identify the group on meetup.com",
                        "photos": [
                            "Optional fields parameter. A small set of photos from the group",
                            {
                                "highres_link": "Link for full sized photo",
                                "base_url": "A base url that can be use to construct a photo url from its components",
                                "id": "Numeric photo ID",
                                "photo_link": "Link for standard sized photo",
                                "type": "Type of photo. One of \"event\" or \"member\"",
                                "thumb_link": "Link for thumbnail sized photo"
                            }
                        ],
                        "lat": "Latitude",
                        "who": "What this group calls it's members"
                    }
                ],
                "timezone": "This represents the universal timezone identifier for the group",
                "link": "Link to group on meetup.com",
                "description": "Short description of group",
                "lon": "Longitude",
                "welcome_message": "Optional fields parameter. Returns the Group's default welcome message if the authenticated member is the organizer of the group",
                "is_simplehtml": "Optional field, 'true' when the group description has been saved in a simplified HTML format, 'false' otherwise.",
                "group_photo": [
                    "Group photo",
                    {
                        "highres_link": "Link for full sized photo",
                        "base_url": "A base url that can be use to construct a photo url from its components",
                        "id": "Numeric photo ID",
                        "photo_link": "Link for standard sized photo",
                        "type": "Type of photo. One of \"event\" or \"member\"",
                        "thumb_link": "Link for thumbnail sized photo"
                    }
                ],
                "photos": [
                    "A small set of photos from the group",
                    {
                        "highres_link": "Link for full sized photo",
                        "base_url": "A base url that can be use to construct a photo url from its components",
                        "id": "Numeric photo ID",
                        "photo_link": "Link for standard sized photo",
                        "type": "Type of photo. One of \"event\" or \"member\"",
                        "thumb_link": "Link for thumbnail sized photo"
                    }
                ],
                "short_link": "Optional field, a shorted URL for the group",
                "event_sample": [
                    "A small sampling of upcoming events.\nReturned when the \"fields\" request parameter\nvalue contains \"event_sample\"",
                    {
                        "utc_offset": "The local offset from UTC time, in milliseconds",
                        "photo_album": [
                            "Information about photo uploads for this event",
                            {
                                "photo_count": "Number of photos uploaded",
                                "photo_sample": [
                                    "A small collection of photos uploaded for this event",
                                    {
                                        "highres_link": "Link for full sized photo",
                                        "base_url": "A base url that can be use to construct a photo url from its components",
                                        "id": "Numeric photo ID",
                                        "photo_link": "Link for standard sized photo",
                                        "type": "Type of photo. One of \"event\" or \"member\"",
                                        "thumb_link": "Link for thumbnail sized photo"
                                    }
                                ],
                                "id": "Unique numeric identifier for photo album",
                                "event": [
                                    "Event photo album belongs to. This will be absent if the album\nis not associated with an event",
                                    {
                                        "utc_offset": "The local offset from UTC time, in milliseconds",
                                        "name": "Name of event",
                                        "id": "Alphanumeric event ID",
                                        "time": "UTC start time of the event, in milliseconds since the epoch",
                                        "swagger_type": "BasicEvent",
                                        "yes_rsvp_count": "Number of yes RSVPs"
                                    }
                                ],
                                "title": "Album title",
                                "swagger_type": "PhotoAlbumSummary"
                            }
                        ],
                        "survey_questions": [
                            "Contains a list of organizer-defined survey questions intended to be asked of RSVPing members.\nReturned when the \"fields\" request parameter",
                            {
                                "question": "Question text",
                                "id": "Numeric question identifier"
                            }
                        ],
                        "series": [
                            "Returned when the \"fields\" request parameter value includes \n\"series\" for events that are part of a series of events",
                            {
                                "end_date": "Date when this series ends/ended, in milliseconds since the epoch",
                                "description": "Human displayable description of how often events in this series occur",
                                "id": "Unique numeric identifier for the series",
                                "swagger_type": "RecurrenceSchedule",
                                "weekly": [
                                    "Returned for events that are part of a weekly recurring series of events",
                                    {
                                        "days_of_week": "List of integers 1-7 (Monday-Sunday) of days of week recurrence occurs upon",
                                        "end_date": "Date when series ends/ended, in LocalDate (yyyy-MM-dd) format",
                                        "interval": "Integer number of weeks between each recurrence"
                                    }
                                ],
                                "start_date": "Date when this series begins/began, in milliseconds since the epoch"
                            }
                        ],
                        "name": "Name of event",
                        "self": [
                            "Represents details particular to the authorized user, only present\nif requested and authenticated member is a member of the hosting group,\nreturned when \"fields\" request parameter value\nincludes \"self\"",
                            {
                                "pay_status": "The authenticated member's payment status. This may be one of 'none', 'paid', 'partially_paid', 'payment_pending', 'echeck_pending', 'refund_pending', 'partially_refunded', 'refunded'",
                                "role": "The authenticated member's role in within the group, if any. This may be one of: Organizer, Assistant Organizer, Event Organizer, etc.",
                                "actions": "List of actions the authenticated member may perform, potentially one or more of the following\n\n\"announce\" to announce the event to the group's members\n\n\"attendance\" to view or take attendance for the event\n\n\"comment\" the ability to post a comment or reply\n\n\"payments\" the ability to mark members as paid if the event is ticketed\n\n\"publish\" to publish a draft event\n\n\"edit\" to edit the event information\n\n\"edit_hosts\" to edit the hosts for the event\n\n\"delete\" to delete the event\n\n\"rsvp\" to RSVP yes or no to the event\n\n\"wait\" to get on the waiting list (using the same RSVP methods).\n\n\"dues\" if an organizer requires membership dues to RSVP and the authorized\n member has not paid theirs\n\n\"upload_photo\" the ability to upload a photo for an event",
                                "rsvp": [
                                    "Member's RSVP, if any",
                                    {
                                        "answers": [
                                            "List of answers to event survey questions asked when the member RSVP'd in the order asked, only available to organizers and assistant organizers",
                                            {
                                                "question": "Question text",
                                                "answer": "Answer text for question",
                                                "updated": "The last time this answer was updated",
                                                "question_id": "Unique number identifier for question",
                                                "swagger_type": "SurveyQuestionAnswer"
                                            }
                                        ],
                                        "guests": "Number of guests the RSVP'd member will be bringing",
                                        "response": "May be \"yes\" or \"no\".\n\nIn cases where an event is over capacity and the member has shown an intent to attend,\nresponse may be \"waitlist\" if the event has a waitlist.\n\nIn cases of ticketed events, this may be \"yes_pending_payment\"\nfor a \"yes\" response for a ticketed event with an unprocessed payment"
                                    }
                                ],
                                "swagger_type": "EventSelf"
                            }
                        ],
                        "id": "Alphanumeric event ID",
                        "time": "UTC start time of the event, in milliseconds since the epoch",
                        "swagger_type": "BasicEvent",
                        "yes_rsvp_count": "Number of yes RSVPs"
                    }
                ],
                "join_mode": "Who can join this group and how. One of \"approval\", \"closed\", or \"open\"",
                "approved": "Boolean indicator for whether this Group has been approved or not.\nNew Groups are generally approved (or removed)\nsoon after creation.\nReturned when the \"fields\" request parameter value includes\n\"approved\"",
                "contributions": [
                    "Optional field containing the contribution details of the group",
                    {
                        "thanks": "The 'thank you' message to be given when a contribution is made",
                        "reason": "The reason a member might consider contributing",
                        "potential": "Boolean stating that potential contributions are enabled for the group",
                        "enabled": "Boolean stating if contributions are enabled for the group"
                    }
                ],
                "members": "Number of Meetup members in this group",
                "state": "State of the group, if in US or Canada",
                "simple_html_description": "Description of the group, in simple HTML source format. If this group's description was saved in simple HTML format, the description field will be an HTML translation of this source. Returned when the \"fields\" request parameter value contains \"simple_html_description\"",
                "id": "Numeric group ID",
                "urlname": "Urlname used to identify the group on meetup.com",
                "membership_dues": [
                    "Optional field, returns membership dues for group if any",
                    {
                        "refund_policy": [
                            "Conditions for refunds",
                            {
                                "group_closes": "refund applies when the group closes",
                                "member_leaves": "refund applies when member leaves the group",
                                "none": "indicates there is no refund policy",
                                "member_banned": "refund applies when the member is banned",
                                "custom": "Boolean indicator of a custom refund policy"
                            }
                        ],
                        "reasons": "Array of reasons containing one or more of the following values compensate_organizer, cover_costs, encourage_engagement, improve_meetups, other, provide_supplies, reserve_fund",
                        "methods": [
                            "Methods of payments",
                            {
                                "credit_card": "Boolean indicator that credit cards are accepted",
                                "other": "Boolean indicator that other forms of payment are accepted",
                                "paypal": "Boolean indicator that Paypal payments are accepted",
                                "amazon_payments": "Boolean indicator that Amazon Payments are accepted"
                            }
                        ],
                        "fee": "Numeric fee value",
                        "trial_days": "When present, returns the number of days the group is offering a free trial period for to new members. When not present, this indicates that the group does not offer a trial membership period",
                        "self_payment_required": "Returns true if the authorized user is prevented from participating in the group until a payment is made",
                        "required": "true if dues are required",
                        "swagger_type": "MembershipDues",
                        "fee_desc": "The interval at which dues must be paid. Possible values may include: \"month\", \"year\", \"day\", or \"every other day\"",
                        "currency": "Currency in which the fee is declared",
                        "reasons_other": "An additional reason if specified.",
                        "required_to": "If the dues are required this indicates what they are required for. May be one of 'join' or 'rsvp'"
                    }
                ],
                "lat": "Latitude",
                "next_event": [
                    "The current ongoing or next upcoming event, if one is scheduled",
                    {
                        "utc_offset": "The local offset from UTC time, in milliseconds",
                        "name": "Name of event",
                        "id": "Alphanumeric event ID",
                        "time": "UTC start time of the event, in milliseconds since the epoch",
                        "swagger_type": "BasicEvent",
                        "yes_rsvp_count": "Number of yes RSVPs"
                    }
                ],
                "list_mode": "Optional field representing the policy for who can post the group mailing list. Returned when the \"fields\" request parameter value contains \"list_mode\". Value may be one of \"moderated\", \"off\", \"open\", or \"orgs_only\"",
                "photo_gradient": [
                    "Color combination used generate group duotone",
                    {
                        "dark_color": "Dark color in hexidecimal format",
                        "id": "Unique numeric identifier",
                        "composite_color": "Composite color in hexidecimal format",
                        "light_color": "Light color in hexidecimal format",
                        "swagger_type": "Duotone"
                    }
                ],
                "ga_code": "Optional field return the Google Analytics code for the group. Only members that can edit group settings can see this",
                "localized_country_name": "Name of country of the group",
                "join_info": [
                    "Optional field, lists any questions requested when joining and required fields",
                    {
                        "photo_req": "true if required, false otherwise",
                        "questions": [
                            "List of profile questions organizer would like new members to answer prior to joining",
                            {
                                "question": "The text of the question",
                                "id": "Unique numeric identifier for the question"
                            }
                        ],
                        "questions_req": "true if required, false otherwise",
                        "swagger_type": "GroupJoinInfo"
                    }
                ],
                "visibility": "Who can see this group. One of members, public or public_limited",
                "topics": [
                    "Optional fields parameter. Returns the group's topics",
                    {
                        "name": "Display name of the topic",
                        "urlkey": "The unique keyword used to identify this topic",
                        "id": "Numeric topic id",
                        "lang": "Language topic originates from",
                        "swagger_type": "TopicSummary"
                    }
                ],
                "created": "Time the group was created in milliseconds since the epoch",
                "key_photo": [
                    "Group primary photo",
                    {
                        "highres_link": "Link for full sized photo",
                        "base_url": "A base url that can be use to construct a photo url from its components",
                        "id": "Numeric photo ID",
                        "photo_link": "Link for standard sized photo",
                        "type": "Type of photo. One of \"event\" or \"member\"",
                        "thumb_link": "Link for thumbnail sized photo"
                    }
                ],
                "plain_text_description": "Description of the group, in plain text format. Returned when then \"fields\" request parameter value contains \"plain_text_description\"",
                "list_addr": "Optional field returning list address prefix. List mail will be {list_addr}-list@meetup.com. Announce email will be {list_addr}-announce@meetup.com. You must be a member of the group to see this",
                "organizer": [
                    "Group's primary organizer",
                    {
                        "name": "Name of member",
                        "photo": [
                            "Organizer photo, where defined",
                            {
                                "highres_link": "Link for full sized photo",
                                "base_url": "A base url that can be use to construct a photo url from its components",
                                "id": "Numeric photo ID",
                                "photo_link": "Link for standard sized photo",
                                "type": "Type of photo. One of \"event\" or \"member\"",
                                "thumb_link": "Link for thumbnail sized photo"
                            }
                        ],
                        "bio": "Bio of member",
                        "id": "Numeric member ID",
                        "swagger_type": "SimpleMember"
                    }
                ],
                "leads": "Optional field representing the number of members on this group's leadership team. Returned when the \"fields\" request parameter value contains \"leads\"",
                "last_event": [
                    "Optional field representing the last hosted event, if the group has one. Returned when the \"fields\" request parameter value contains \"last_event\"",
                    {
                        "utc_offset": "The local offset from UTC time, in milliseconds",
                        "name": "Name of event",
                        "id": "Alphanumeric event ID",
                        "time": "UTC start time of the event, in milliseconds since the epoch",
                        "swagger_type": "BasicEvent",
                        "yes_rsvp_count": "Number of yes RSVPs"
                    }
                ],
                "name": "Name of the group",
                "member_cap": "Number representing the maximum number of active members this group can have if capped. Returned only when requested in the fields request parameter and the authenticated member has permission to approve members",
                "self": [
                    "Optional field, contains details specific to the authorized user in this Meetup Group",
                    {
                        "visited": "Member's last visit to the group site, in milliseconds since the epoch",
                        "role": "Member's role in group, if any: Organizer, Assistant Organizer, Event Organizer, etc.",
                        "membership_dues": [
                            "Member's membership dues if the group has membership dues",
                            {
                                "paid_until": "For groups with recurring billing periods, this returns the time in milliseconds since the epoch that the member's next payment is due",
                                "total_amount": "Total amount paid",
                                "cancelled": "For groups with recurring billing periods, this Boolean field indicates that membership dues were cancelled",
                                "transaction_time": "Time the transaction was made in milliseconds since the epoch",
                                "exempt": "For groups with recurring billing periods, this Boolean field indicates that the member is exempt from payment.",
                                "trial": [
                                    "If the group offers a trial membership, this indicates information for unpaid members.",
                                    {
                                        "days": "The total number of trial days offered by the group",
                                        "days_remaining": "The number of days remaining in the member's trial period",
                                        "expired": "Boolean indicator of whether or not the unpaid subscription has expired or not"
                                    }
                                ],
                                "period_status": "For groups with recurring billing periods, this returns one of the following values grace paid pending unpaid"
                            }
                        ],
                        "actions": "List of actions the authenticated member may perform, potentially \"broadcast_message\": the ability to broadcast messages to group members via the \"announce\" mailing list, \"event_create\": the ability to create new events, \"event_draft\": the ability to save new events as drafts, \"role_assign\": the ability to assign member roles, \"edit\": the ability to edit group settings, \"member_approval\": the ability to approve or decline member requests to join, or \"subscription_upgrade\": the ability to upgrade this group's subscription plan",
                        "status": "Indicates the authorized user's membership with this group. Value may be one of \"none\", \"pending\", \"pending_payment\", \"active\", or \"blocked\""
                    }
                ],
                "category": [
                    "The primary category of the group, if the group has one",
                    {
                        "name": "Display name of the category",
                        "sort_name": "Name used for sorting",
                        "id": "Numeric category id",
                        "shortname": "String identifier of the category",
                        "swagger_type": "GroupCategory"
                    }
                ],
                "who": "What the group calls its members"
            },
            "tag": null,
            "responseModel": "GetSelfGroups"
        },
        "GetStatus": {
            "version": "3",
            "name": "GetStatus",
            "httpMethod": "GET",
            "parameters": {
                "page": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "offset": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "desc": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "order": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "only": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "omit": {
                    "location": "query",
                    "required": false,
                    "description": null
                }
            },
            "summary": "Returns the current API service status",
            "uri": "/status",
            "notes": "No parameters are needed",
            "response": {
                "title": "Optional title for display. May be absent",
                "message": "Optional message for display. May be absent",
                "swagger_type": "ServiceStatus",
                "status": "May be one of \"ok\", \"notice\", or \"unavailable\""
            },
            "tag": null,
            "responseModel": "GetStatus"
        }
    },
    "models": {
        "CreateBatch": {
            "type": "object",
            "properties": {
                "status": {
                    "location": "statusCode",
                    "type": "integer"
                }
            }
        },
        "CreateGroupAbuseReports": {
            "type": "object",
            "properties": {
                "status": {
                    "location": "statusCode",
                    "type": "integer"
                }
            }
        },
        "CreateGroupEvents": {
            "type": "object",
            "properties": {
                "utc_offset": {
                    "location": "json",
                    "type": null
                },
                "comment_count": {
                    "location": "json",
                    "type": null
                },
                "rsvp_limit": {
                    "location": "json",
                    "type": null
                },
                "venue": {
                    "location": "json",
                    "type": "object"
                },
                "featured": {
                    "location": "json",
                    "type": null
                },
                "survey_questions": {
                    "location": "json",
                    "type": "object"
                },
                "venue_visibility": {
                    "location": "json",
                    "type": null
                },
                "manual_attendance_count": {
                    "location": "json",
                    "type": null
                },
                "fee": {
                    "location": "json",
                    "type": "object"
                },
                "link": {
                    "location": "json",
                    "type": null
                },
                "why": {
                    "location": "json",
                    "type": null
                },
                "description": {
                    "location": "json",
                    "type": null
                },
                "short_link": {
                    "location": "json",
                    "type": null
                },
                "yes_rsvp_count": {
                    "location": "json",
                    "type": null
                },
                "duration": {
                    "location": "json",
                    "type": null
                },
                "event_hosts": {
                    "location": "json",
                    "type": "object"
                },
                "simple_html_description": {
                    "location": "json",
                    "type": null
                },
                "id": {
                    "location": "json",
                    "type": null
                },
                "group": {
                    "location": "json",
                    "type": "object"
                },
                "rsvpable_after_join": {
                    "location": "json",
                    "type": null
                },
                "rsvp_rules": {
                    "location": "json",
                    "type": "object"
                },
                "visibility": {
                    "location": "json",
                    "type": null
                },
                "waitlist_count": {
                    "location": "json",
                    "type": null
                },
                "created": {
                    "location": "json",
                    "type": null
                },
                "plain_text_description": {
                    "location": "json",
                    "type": null
                },
                "how_to_find_us": {
                    "location": "json",
                    "type": null
                },
                "swagger_type": {
                    "location": "json",
                    "type": null
                },
                "photo_album": {
                    "location": "json",
                    "type": "object"
                },
                "rsvpable": {
                    "location": "json",
                    "type": null
                },
                "rsvp_sample": {
                    "location": "json",
                    "type": "object"
                },
                "series": {
                    "location": "json",
                    "type": "object"
                },
                "name": {
                    "location": "json",
                    "type": null
                },
                "self": {
                    "location": "json",
                    "type": "object"
                },
                "time": {
                    "location": "json",
                    "type": null
                },
                "updated": {
                    "location": "json",
                    "type": null
                },
                "status": {
                    "location": "statusCode",
                    "type": "integer"
                }
            },
            "location": null,
            "items": null
        },
        "CreateGroupEventsComments": {
            "type": "object",
            "properties": {
                "like_count": {
                    "location": "json",
                    "type": null
                },
                "replies": {
                    "location": "json",
                    "type": null
                },
                "created": {
                    "location": "json",
                    "type": null
                },
                "member": {
                    "location": "json",
                    "type": "object"
                },
                "self": {
                    "location": "json",
                    "type": "object"
                },
                "comment": {
                    "location": "json",
                    "type": null
                },
                "id": {
                    "location": "json",
                    "type": null
                },
                "swagger_type": {
                    "location": "json",
                    "type": null
                },
                "in_reply_to": {
                    "location": "json",
                    "type": null
                },
                "status": {
                    "location": "statusCode",
                    "type": "integer"
                }
            },
            "location": null,
            "items": null
        },
        "CreateGroupEventsCommentsLikes": {
            "type": "object",
            "properties": {
                "status": {
                    "location": "statusCode",
                    "type": "integer"
                }
            }
        },
        "CreateGroupEventsPhotos": {
            "type": "object",
            "properties": {
                "utc_offset": {
                    "location": "json",
                    "type": null
                },
                "comment_count": {
                    "location": "json",
                    "type": null
                },
                "highres_link": {
                    "location": "json",
                    "type": null
                },
                "created": {
                    "location": "json",
                    "type": null
                },
                "base_url": {
                    "location": "json",
                    "type": null
                },
                "link": {
                    "location": "json",
                    "type": null
                },
                "caption": {
                    "location": "json",
                    "type": null
                },
                "type": {
                    "location": "json",
                    "type": null
                },
                "thumb_link": {
                    "location": "json",
                    "type": null
                },
                "short_link": {
                    "location": "json",
                    "type": null
                },
                "swagger_type": {
                    "location": "json",
                    "type": null
                },
                "photo_album": {
                    "location": "json",
                    "type": "object"
                },
                "member": {
                    "location": "json",
                    "type": "object"
                },
                "self": {
                    "location": "json",
                    "type": "object"
                },
                "id": {
                    "location": "json",
                    "type": null
                },
                "photo_link": {
                    "location": "json",
                    "type": null
                },
                "updated": {
                    "location": "json",
                    "type": null
                },
                "group": {
                    "location": "json",
                    "type": "object"
                },
                "status": {
                    "location": "statusCode",
                    "type": "integer"
                }
            },
            "location": null,
            "items": null
        },
        "CreateGroupEventsPhotosComments": {
            "type": "object",
            "properties": {
                "member": {
                    "location": "json",
                    "type": "object"
                },
                "self": {
                    "location": "json",
                    "type": "object"
                },
                "comment": {
                    "location": "json",
                    "type": null
                },
                "id": {
                    "location": "json",
                    "type": null
                },
                "created": {
                    "location": "json",
                    "type": null
                },
                "status": {
                    "location": "statusCode",
                    "type": "integer"
                }
            },
            "location": null,
            "items": null
        },
        "CreateGroupEventsRsvps": {
            "type": "object",
            "properties": {
                "venue": {
                    "location": "json",
                    "type": "object"
                },
                "created": {
                    "location": "json",
                    "type": null
                },
                "answers": {
                    "location": "json",
                    "type": "object"
                },
                "swagger_type": {
                    "location": "json",
                    "type": null
                },
                "pay_status": {
                    "location": "json",
                    "type": null
                },
                "response": {
                    "location": "json",
                    "type": null
                },
                "guests": {
                    "location": "json",
                    "type": null
                },
                "member": {
                    "location": "json",
                    "type": "object"
                },
                "event": {
                    "location": "json",
                    "type": "object"
                },
                "attendance_status": {
                    "location": "json",
                    "type": null
                },
                "updated": {
                    "location": "json",
                    "type": null
                },
                "group": {
                    "location": "json",
                    "type": "object"
                },
                "status": {
                    "location": "statusCode",
                    "type": "integer"
                }
            },
            "location": null,
            "items": null
        },
        "CreateGroupMemberApprovals": {
            "type": "object",
            "properties": {
                "status": {
                    "location": "statusCode",
                    "type": "integer"
                }
            }
        },
        "CreateGroupMembers": {
            "type": "object",
            "properties": {
                "birthday": {
                    "location": "json",
                    "type": "object"
                },
                "country": {
                    "location": "json",
                    "type": null
                },
                "gender": {
                    "location": "json",
                    "type": null
                },
                "city": {
                    "location": "json",
                    "type": null
                },
                "bio": {
                    "location": "json",
                    "type": null
                },
                "privacy": {
                    "location": "json",
                    "type": "object"
                },
                "lon": {
                    "location": "json",
                    "type": null
                },
                "memberships": {
                    "location": "json",
                    "type": "object"
                },
                "other_services": {
                    "location": "json",
                    "type": "object"
                },
                "stats": {
                    "location": "json",
                    "type": "object"
                },
                "state": {
                    "location": "json",
                    "type": null
                },
                "id": {
                    "location": "json",
                    "type": null
                },
                "lat": {
                    "location": "json",
                    "type": null
                },
                "next_event": {
                    "location": "json",
                    "type": "object"
                },
                "localized_country_name": {
                    "location": "json",
                    "type": null
                },
                "topics": {
                    "location": "json",
                    "type": "object"
                },
                "joined": {
                    "location": "json",
                    "type": null
                },
                "photo": {
                    "location": "json",
                    "type": "object"
                },
                "swagger_type": {
                    "location": "json",
                    "type": null
                },
                "group_profile": {
                    "location": "json",
                    "type": "object"
                },
                "last_event": {
                    "location": "json",
                    "type": "object"
                },
                "name": {
                    "location": "json",
                    "type": null
                },
                "self": {
                    "location": "json",
                    "type": "object"
                },
                "messaging_pref": {
                    "location": "json",
                    "type": null
                },
                "status": {
                    "location": "statusCode",
                    "type": "integer"
                }
            },
            "location": null,
            "items": null
        },
        "CreateGroupPhotoAlbumsPhotos": {
            "type": "object",
            "properties": {
                "utc_offset": {
                    "location": "json",
                    "type": null
                },
                "comment_count": {
                    "location": "json",
                    "type": null
                },
                "highres_link": {
                    "location": "json",
                    "type": null
                },
                "created": {
                    "location": "json",
                    "type": null
                },
                "base_url": {
                    "location": "json",
                    "type": null
                },
                "link": {
                    "location": "json",
                    "type": null
                },
                "caption": {
                    "location": "json",
                    "type": null
                },
                "type": {
                    "location": "json",
                    "type": null
                },
                "thumb_link": {
                    "location": "json",
                    "type": null
                },
                "short_link": {
                    "location": "json",
                    "type": null
                },
                "swagger_type": {
                    "location": "json",
                    "type": null
                },
                "photo_album": {
                    "location": "json",
                    "type": "object"
                },
                "member": {
                    "location": "json",
                    "type": "object"
                },
                "self": {
                    "location": "json",
                    "type": "object"
                },
                "id": {
                    "location": "json",
                    "type": null
                },
                "photo_link": {
                    "location": "json",
                    "type": null
                },
                "updated": {
                    "location": "json",
                    "type": null
                },
                "group": {
                    "location": "json",
                    "type": "object"
                },
                "status": {
                    "location": "statusCode",
                    "type": "integer"
                }
            },
            "location": null,
            "items": null
        },
        "CreateGroupTopics": {
            "type": "object",
            "properties": {
                "country": {
                    "location": "json",
                    "type": null
                },
                "pending_members": {
                    "location": "json",
                    "type": null
                },
                "city": {
                    "location": "json",
                    "type": null
                },
                "similar_groups": {
                    "location": "json",
                    "type": "object"
                },
                "timezone": {
                    "location": "json",
                    "type": null
                },
                "link": {
                    "location": "json",
                    "type": null
                },
                "description": {
                    "location": "json",
                    "type": null
                },
                "lon": {
                    "location": "json",
                    "type": null
                },
                "welcome_message": {
                    "location": "json",
                    "type": null
                },
                "is_simplehtml": {
                    "location": "json",
                    "type": null
                },
                "group_photo": {
                    "location": "json",
                    "type": "object"
                },
                "photos": {
                    "location": "json",
                    "type": "object"
                },
                "short_link": {
                    "location": "json",
                    "type": null
                },
                "join_mode": {
                    "location": "json",
                    "type": null
                },
                "approved": {
                    "location": "json",
                    "type": null
                },
                "contributions": {
                    "location": "json",
                    "type": "object"
                },
                "members": {
                    "location": "json",
                    "type": null
                },
                "state": {
                    "location": "json",
                    "type": null
                },
                "simple_html_description": {
                    "location": "json",
                    "type": null
                },
                "id": {
                    "location": "json",
                    "type": null
                },
                "urlname": {
                    "location": "json",
                    "type": null
                },
                "membership_dues": {
                    "location": "json",
                    "type": "object"
                },
                "lat": {
                    "location": "json",
                    "type": null
                },
                "next_event": {
                    "location": "json",
                    "type": "object"
                },
                "list_mode": {
                    "location": "json",
                    "type": null
                },
                "photo_gradient": {
                    "location": "json",
                    "type": "object"
                },
                "ga_code": {
                    "location": "json",
                    "type": null
                },
                "localized_country_name": {
                    "location": "json",
                    "type": null
                },
                "join_info": {
                    "location": "json",
                    "type": "object"
                },
                "visibility": {
                    "location": "json",
                    "type": null
                },
                "topics": {
                    "location": "json",
                    "type": "object"
                },
                "created": {
                    "location": "json",
                    "type": null
                },
                "key_photo": {
                    "location": "json",
                    "type": "object"
                },
                "plain_text_description": {
                    "location": "json",
                    "type": null
                },
                "list_addr": {
                    "location": "json",
                    "type": null
                },
                "organizer": {
                    "location": "json",
                    "type": "object"
                },
                "leads": {
                    "location": "json",
                    "type": null
                },
                "last_event": {
                    "location": "json",
                    "type": "object"
                },
                "name": {
                    "location": "json",
                    "type": null
                },
                "member_cap": {
                    "location": "json",
                    "type": null
                },
                "self": {
                    "location": "json",
                    "type": "object"
                },
                "category": {
                    "location": "json",
                    "type": "object"
                },
                "who": {
                    "location": "json",
                    "type": null
                },
                "status": {
                    "location": "statusCode",
                    "type": "integer"
                }
            },
            "location": null,
            "items": null
        },
        "CreateGroupVenues": {
            "type": "object",
            "properties": {
                "zip": {
                    "location": "json",
                    "type": null
                },
                "country": {
                    "location": "json",
                    "type": null
                },
                "localized_country_name": {
                    "location": "json",
                    "type": null
                },
                "visibility": {
                    "location": "json",
                    "type": null
                },
                "city": {
                    "location": "json",
                    "type": null
                },
                "address_1": {
                    "location": "json",
                    "type": null
                },
                "address_2": {
                    "location": "json",
                    "type": null
                },
                "address_3": {
                    "location": "json",
                    "type": null
                },
                "rating": {
                    "location": "json",
                    "type": null
                },
                "lon": {
                    "location": "json",
                    "type": null
                },
                "rating_count": {
                    "location": "json",
                    "type": null
                },
                "taglist": {
                    "location": "json",
                    "type": null
                },
                "phone": {
                    "location": "json",
                    "type": null
                },
                "name": {
                    "location": "json",
                    "type": null
                },
                "state": {
                    "location": "json",
                    "type": null
                },
                "id": {
                    "location": "json",
                    "type": null
                },
                "lat": {
                    "location": "json",
                    "type": null
                },
                "status": {
                    "location": "statusCode",
                    "type": "integer"
                }
            },
            "location": null,
            "items": null
        },
        "CreateMembersPhotos": {
            "type": "object",
            "properties": {
                "highres_link": {
                    "location": "json",
                    "type": null
                },
                "base_url": {
                    "location": "json",
                    "type": null
                },
                "id": {
                    "location": "json",
                    "type": null
                },
                "photo_link": {
                    "location": "json",
                    "type": null
                },
                "type": {
                    "location": "json",
                    "type": null
                },
                "thumb_link": {
                    "location": "json",
                    "type": null
                },
                "status": {
                    "location": "statusCode",
                    "type": "integer"
                }
            },
            "location": null,
            "items": null
        },
        "CreateNotificationsRead": {
            "type": "object",
            "properties": {
                "read": {
                    "location": "json",
                    "type": null
                },
                "kind": {
                    "location": "json",
                    "type": null
                },
                "link": {
                    "location": "json",
                    "type": null
                },
                "photo": {
                    "location": "json",
                    "type": "object"
                },
                "setting": {
                    "location": "json",
                    "type": "object"
                },
                "target": {
                    "location": "json",
                    "type": "object"
                },
                "important": {
                    "location": "json",
                    "type": null
                },
                "photo_type": {
                    "location": "json",
                    "type": null
                },
                "self": {
                    "location": "json",
                    "type": "object"
                },
                "text": {
                    "location": "json",
                    "type": null
                },
                "id": {
                    "location": "json",
                    "type": null
                },
                "category": {
                    "location": "json",
                    "type": null
                },
                "updated": {
                    "location": "json",
                    "type": null
                },
                "status": {
                    "location": "statusCode",
                    "type": "integer"
                }
            },
            "location": null,
            "items": null
        },
        "CreateRecommendedGroupsIgnores": {
            "type": "object",
            "properties": {
                "status": {
                    "location": "statusCode",
                    "type": "integer"
                }
            }
        },
        "CreateSelfAbuseReports": {
            "type": "object",
            "properties": {
                "status": {
                    "location": "statusCode",
                    "type": "integer"
                }
            }
        },
        "CreateSelfBlocks": {
            "type": "object",
            "properties": {
                "status": {
                    "location": "statusCode",
                    "type": "integer"
                }
            }
        },
        "DeleteGroupEvents": {
            "type": "object",
            "properties": {
                "status": {
                    "location": "statusCode",
                    "type": "integer"
                }
            }
        },
        "DeleteGroupEventsComments": {
            "type": "object",
            "properties": {
                "status": {
                    "location": "statusCode",
                    "type": "integer"
                }
            }
        },
        "DeleteGroupEventsCommentsLikes": {
            "type": "object",
            "properties": {
                "status": {
                    "location": "statusCode",
                    "type": "integer"
                }
            }
        },
        "DeleteGroupEventsPhotos": {
            "type": "object",
            "properties": {
                "status": {
                    "location": "statusCode",
                    "type": "integer"
                }
            }
        },
        "DeleteGroupEventsPhotosComments": {
            "type": "object",
            "properties": {
                "status": {
                    "location": "statusCode",
                    "type": "integer"
                }
            }
        },
        "DeleteGroupMemberApprovals": {
            "type": "object",
            "properties": {
                "status": {
                    "location": "statusCode",
                    "type": "integer"
                }
            }
        },
        "DeleteGroupMembers": {
            "type": "object",
            "properties": {
                "status": {
                    "location": "statusCode",
                    "type": "integer"
                }
            }
        },
        "DeleteGroupTopics": {
            "type": "object",
            "properties": {
                "country": {
                    "location": "json",
                    "type": null
                },
                "pending_members": {
                    "location": "json",
                    "type": null
                },
                "city": {
                    "location": "json",
                    "type": null
                },
                "similar_groups": {
                    "location": "json",
                    "type": "object"
                },
                "timezone": {
                    "location": "json",
                    "type": null
                },
                "link": {
                    "location": "json",
                    "type": null
                },
                "description": {
                    "location": "json",
                    "type": null
                },
                "lon": {
                    "location": "json",
                    "type": null
                },
                "welcome_message": {
                    "location": "json",
                    "type": null
                },
                "is_simplehtml": {
                    "location": "json",
                    "type": null
                },
                "group_photo": {
                    "location": "json",
                    "type": "object"
                },
                "photos": {
                    "location": "json",
                    "type": "object"
                },
                "short_link": {
                    "location": "json",
                    "type": null
                },
                "join_mode": {
                    "location": "json",
                    "type": null
                },
                "approved": {
                    "location": "json",
                    "type": null
                },
                "contributions": {
                    "location": "json",
                    "type": "object"
                },
                "members": {
                    "location": "json",
                    "type": null
                },
                "state": {
                    "location": "json",
                    "type": null
                },
                "simple_html_description": {
                    "location": "json",
                    "type": null
                },
                "id": {
                    "location": "json",
                    "type": null
                },
                "urlname": {
                    "location": "json",
                    "type": null
                },
                "membership_dues": {
                    "location": "json",
                    "type": "object"
                },
                "lat": {
                    "location": "json",
                    "type": null
                },
                "next_event": {
                    "location": "json",
                    "type": "object"
                },
                "list_mode": {
                    "location": "json",
                    "type": null
                },
                "photo_gradient": {
                    "location": "json",
                    "type": "object"
                },
                "ga_code": {
                    "location": "json",
                    "type": null
                },
                "localized_country_name": {
                    "location": "json",
                    "type": null
                },
                "join_info": {
                    "location": "json",
                    "type": "object"
                },
                "visibility": {
                    "location": "json",
                    "type": null
                },
                "topics": {
                    "location": "json",
                    "type": "object"
                },
                "created": {
                    "location": "json",
                    "type": null
                },
                "key_photo": {
                    "location": "json",
                    "type": "object"
                },
                "plain_text_description": {
                    "location": "json",
                    "type": null
                },
                "list_addr": {
                    "location": "json",
                    "type": null
                },
                "organizer": {
                    "location": "json",
                    "type": "object"
                },
                "leads": {
                    "location": "json",
                    "type": null
                },
                "last_event": {
                    "location": "json",
                    "type": "object"
                },
                "name": {
                    "location": "json",
                    "type": null
                },
                "member_cap": {
                    "location": "json",
                    "type": null
                },
                "self": {
                    "location": "json",
                    "type": "object"
                },
                "category": {
                    "location": "json",
                    "type": "object"
                },
                "who": {
                    "location": "json",
                    "type": null
                },
                "status": {
                    "location": "statusCode",
                    "type": "integer"
                }
            },
            "location": null,
            "items": null
        },
        "DeleteMembersPhotos": {
            "type": "object",
            "properties": {
                "status": {
                    "location": "statusCode",
                    "type": "integer"
                }
            }
        },
        "DeleteSelfBlocks": {
            "type": "object",
            "properties": {
                "status": {
                    "location": "statusCode",
                    "type": "integer"
                }
            }
        },
        "EditGroup": {
            "type": "object",
            "properties": {
                "country": {
                    "location": "json",
                    "type": null
                },
                "pending_members": {
                    "location": "json",
                    "type": null
                },
                "city": {
                    "location": "json",
                    "type": null
                },
                "similar_groups": {
                    "location": "json",
                    "type": "object"
                },
                "timezone": {
                    "location": "json",
                    "type": null
                },
                "link": {
                    "location": "json",
                    "type": null
                },
                "description": {
                    "location": "json",
                    "type": null
                },
                "lon": {
                    "location": "json",
                    "type": null
                },
                "welcome_message": {
                    "location": "json",
                    "type": null
                },
                "is_simplehtml": {
                    "location": "json",
                    "type": null
                },
                "group_photo": {
                    "location": "json",
                    "type": "object"
                },
                "photos": {
                    "location": "json",
                    "type": "object"
                },
                "short_link": {
                    "location": "json",
                    "type": null
                },
                "join_mode": {
                    "location": "json",
                    "type": null
                },
                "approved": {
                    "location": "json",
                    "type": null
                },
                "contributions": {
                    "location": "json",
                    "type": "object"
                },
                "members": {
                    "location": "json",
                    "type": null
                },
                "state": {
                    "location": "json",
                    "type": null
                },
                "simple_html_description": {
                    "location": "json",
                    "type": null
                },
                "id": {
                    "location": "json",
                    "type": null
                },
                "urlname": {
                    "location": "json",
                    "type": null
                },
                "membership_dues": {
                    "location": "json",
                    "type": "object"
                },
                "lat": {
                    "location": "json",
                    "type": null
                },
                "next_event": {
                    "location": "json",
                    "type": "object"
                },
                "list_mode": {
                    "location": "json",
                    "type": null
                },
                "photo_gradient": {
                    "location": "json",
                    "type": "object"
                },
                "ga_code": {
                    "location": "json",
                    "type": null
                },
                "localized_country_name": {
                    "location": "json",
                    "type": null
                },
                "join_info": {
                    "location": "json",
                    "type": "object"
                },
                "visibility": {
                    "location": "json",
                    "type": null
                },
                "topics": {
                    "location": "json",
                    "type": "object"
                },
                "created": {
                    "location": "json",
                    "type": null
                },
                "key_photo": {
                    "location": "json",
                    "type": "object"
                },
                "plain_text_description": {
                    "location": "json",
                    "type": null
                },
                "list_addr": {
                    "location": "json",
                    "type": null
                },
                "organizer": {
                    "location": "json",
                    "type": "object"
                },
                "leads": {
                    "location": "json",
                    "type": null
                },
                "last_event": {
                    "location": "json",
                    "type": "object"
                },
                "name": {
                    "location": "json",
                    "type": null
                },
                "member_cap": {
                    "location": "json",
                    "type": null
                },
                "self": {
                    "location": "json",
                    "type": "object"
                },
                "category": {
                    "location": "json",
                    "type": "object"
                },
                "who": {
                    "location": "json",
                    "type": null
                },
                "status": {
                    "location": "statusCode",
                    "type": "integer"
                }
            },
            "location": null,
            "items": null
        },
        "EditGroupEvents": {
            "type": "object",
            "properties": {
                "utc_offset": {
                    "location": "json",
                    "type": null
                },
                "comment_count": {
                    "location": "json",
                    "type": null
                },
                "rsvp_limit": {
                    "location": "json",
                    "type": null
                },
                "venue": {
                    "location": "json",
                    "type": "object"
                },
                "featured": {
                    "location": "json",
                    "type": null
                },
                "survey_questions": {
                    "location": "json",
                    "type": "object"
                },
                "venue_visibility": {
                    "location": "json",
                    "type": null
                },
                "manual_attendance_count": {
                    "location": "json",
                    "type": null
                },
                "fee": {
                    "location": "json",
                    "type": "object"
                },
                "link": {
                    "location": "json",
                    "type": null
                },
                "why": {
                    "location": "json",
                    "type": null
                },
                "description": {
                    "location": "json",
                    "type": null
                },
                "short_link": {
                    "location": "json",
                    "type": null
                },
                "yes_rsvp_count": {
                    "location": "json",
                    "type": null
                },
                "duration": {
                    "location": "json",
                    "type": null
                },
                "event_hosts": {
                    "location": "json",
                    "type": "object"
                },
                "simple_html_description": {
                    "location": "json",
                    "type": null
                },
                "id": {
                    "location": "json",
                    "type": null
                },
                "group": {
                    "location": "json",
                    "type": "object"
                },
                "rsvpable_after_join": {
                    "location": "json",
                    "type": null
                },
                "rsvp_rules": {
                    "location": "json",
                    "type": "object"
                },
                "visibility": {
                    "location": "json",
                    "type": null
                },
                "waitlist_count": {
                    "location": "json",
                    "type": null
                },
                "created": {
                    "location": "json",
                    "type": null
                },
                "plain_text_description": {
                    "location": "json",
                    "type": null
                },
                "how_to_find_us": {
                    "location": "json",
                    "type": null
                },
                "swagger_type": {
                    "location": "json",
                    "type": null
                },
                "photo_album": {
                    "location": "json",
                    "type": "object"
                },
                "rsvpable": {
                    "location": "json",
                    "type": null
                },
                "rsvp_sample": {
                    "location": "json",
                    "type": "object"
                },
                "series": {
                    "location": "json",
                    "type": "object"
                },
                "name": {
                    "location": "json",
                    "type": null
                },
                "self": {
                    "location": "json",
                    "type": "object"
                },
                "time": {
                    "location": "json",
                    "type": null
                },
                "updated": {
                    "location": "json",
                    "type": null
                },
                "status": {
                    "location": "statusCode",
                    "type": "integer"
                }
            },
            "location": null,
            "items": null
        },
        "EditGroupEventsAttendance": {
            "type": "object",
            "properties": {
                "status": {
                    "location": "statusCode",
                    "type": "integer"
                }
            }
        },
        "EditGroupEventsPayments": {
            "type": "object",
            "properties": {
                "confirm_code": {
                    "location": "json",
                    "type": null
                },
                "id": {
                    "location": "json",
                    "type": null
                },
                "status": {
                    "location": "statusCode",
                    "type": "integer"
                }
            },
            "location": null,
            "items": null
        },
        "EditGroupEventsPhotos": {
            "type": "object",
            "properties": {
                "utc_offset": {
                    "location": "json",
                    "type": null
                },
                "comment_count": {
                    "location": "json",
                    "type": null
                },
                "highres_link": {
                    "location": "json",
                    "type": null
                },
                "created": {
                    "location": "json",
                    "type": null
                },
                "base_url": {
                    "location": "json",
                    "type": null
                },
                "link": {
                    "location": "json",
                    "type": null
                },
                "caption": {
                    "location": "json",
                    "type": null
                },
                "type": {
                    "location": "json",
                    "type": null
                },
                "thumb_link": {
                    "location": "json",
                    "type": null
                },
                "short_link": {
                    "location": "json",
                    "type": null
                },
                "swagger_type": {
                    "location": "json",
                    "type": null
                },
                "photo_album": {
                    "location": "json",
                    "type": "object"
                },
                "member": {
                    "location": "json",
                    "type": "object"
                },
                "self": {
                    "location": "json",
                    "type": "object"
                },
                "id": {
                    "location": "json",
                    "type": null
                },
                "photo_link": {
                    "location": "json",
                    "type": null
                },
                "updated": {
                    "location": "json",
                    "type": null
                },
                "group": {
                    "location": "json",
                    "type": "object"
                },
                "status": {
                    "location": "statusCode",
                    "type": "integer"
                }
            },
            "location": null,
            "items": null
        },
        "EditGroupMembers": {
            "type": "object",
            "properties": {
                "birthday": {
                    "location": "json",
                    "type": "object"
                },
                "country": {
                    "location": "json",
                    "type": null
                },
                "gender": {
                    "location": "json",
                    "type": null
                },
                "city": {
                    "location": "json",
                    "type": null
                },
                "bio": {
                    "location": "json",
                    "type": null
                },
                "privacy": {
                    "location": "json",
                    "type": "object"
                },
                "lon": {
                    "location": "json",
                    "type": null
                },
                "memberships": {
                    "location": "json",
                    "type": "object"
                },
                "other_services": {
                    "location": "json",
                    "type": "object"
                },
                "stats": {
                    "location": "json",
                    "type": "object"
                },
                "state": {
                    "location": "json",
                    "type": null
                },
                "id": {
                    "location": "json",
                    "type": null
                },
                "lat": {
                    "location": "json",
                    "type": null
                },
                "next_event": {
                    "location": "json",
                    "type": "object"
                },
                "localized_country_name": {
                    "location": "json",
                    "type": null
                },
                "topics": {
                    "location": "json",
                    "type": "object"
                },
                "joined": {
                    "location": "json",
                    "type": null
                },
                "photo": {
                    "location": "json",
                    "type": "object"
                },
                "swagger_type": {
                    "location": "json",
                    "type": null
                },
                "group_profile": {
                    "location": "json",
                    "type": "object"
                },
                "last_event": {
                    "location": "json",
                    "type": "object"
                },
                "name": {
                    "location": "json",
                    "type": null
                },
                "self": {
                    "location": "json",
                    "type": "object"
                },
                "messaging_pref": {
                    "location": "json",
                    "type": null
                },
                "status": {
                    "location": "statusCode",
                    "type": "integer"
                }
            },
            "location": null,
            "items": null
        },
        "EditMembers": {
            "type": "object",
            "properties": {
                "birthday": {
                    "location": "json",
                    "type": "object"
                },
                "country": {
                    "location": "json",
                    "type": null
                },
                "localized_country_name": {
                    "location": "json",
                    "type": null
                },
                "gender": {
                    "location": "json",
                    "type": null
                },
                "city": {
                    "location": "json",
                    "type": null
                },
                "topics": {
                    "location": "json",
                    "type": "object"
                },
                "joined": {
                    "location": "json",
                    "type": null
                },
                "photo": {
                    "location": "json",
                    "type": "object"
                },
                "bio": {
                    "location": "json",
                    "type": null
                },
                "privacy": {
                    "location": "json",
                    "type": "object"
                },
                "lon": {
                    "location": "json",
                    "type": null
                },
                "memberships": {
                    "location": "json",
                    "type": "object"
                },
                "swagger_type": {
                    "location": "json",
                    "type": null
                },
                "other_services": {
                    "location": "json",
                    "type": "object"
                },
                "stats": {
                    "location": "json",
                    "type": "object"
                },
                "last_event": {
                    "location": "json",
                    "type": "object"
                },
                "name": {
                    "location": "json",
                    "type": null
                },
                "self": {
                    "location": "json",
                    "type": "object"
                },
                "state": {
                    "location": "json",
                    "type": null
                },
                "id": {
                    "location": "json",
                    "type": null
                },
                "lat": {
                    "location": "json",
                    "type": null
                },
                "next_event": {
                    "location": "json",
                    "type": "object"
                },
                "messaging_pref": {
                    "location": "json",
                    "type": null
                },
                "status": {
                    "location": "statusCode",
                    "type": "integer"
                }
            },
            "location": null,
            "items": null
        },
        "GetFindEvents": {
            "type": "array",
            "properties": [],
            "location": "json",
            "items": {
                "type": "object",
                "properties": {
                    "utc_offset": {
                        "location": "json",
                        "type": null
                    },
                    "comment_count": {
                        "location": "json",
                        "type": null
                    },
                    "rsvp_limit": {
                        "location": "json",
                        "type": null
                    },
                    "venue": {
                        "location": "json",
                        "type": "object"
                    },
                    "featured": {
                        "location": "json",
                        "type": null
                    },
                    "survey_questions": {
                        "location": "json",
                        "type": "object"
                    },
                    "venue_visibility": {
                        "location": "json",
                        "type": null
                    },
                    "manual_attendance_count": {
                        "location": "json",
                        "type": null
                    },
                    "fee": {
                        "location": "json",
                        "type": "object"
                    },
                    "link": {
                        "location": "json",
                        "type": null
                    },
                    "why": {
                        "location": "json",
                        "type": null
                    },
                    "description": {
                        "location": "json",
                        "type": null
                    },
                    "short_link": {
                        "location": "json",
                        "type": null
                    },
                    "yes_rsvp_count": {
                        "location": "json",
                        "type": null
                    },
                    "duration": {
                        "location": "json",
                        "type": null
                    },
                    "event_hosts": {
                        "location": "json",
                        "type": "object"
                    },
                    "simple_html_description": {
                        "location": "json",
                        "type": null
                    },
                    "id": {
                        "location": "json",
                        "type": null
                    },
                    "group": {
                        "location": "json",
                        "type": "object"
                    },
                    "rsvpable_after_join": {
                        "location": "json",
                        "type": null
                    },
                    "rsvp_rules": {
                        "location": "json",
                        "type": "object"
                    },
                    "visibility": {
                        "location": "json",
                        "type": null
                    },
                    "waitlist_count": {
                        "location": "json",
                        "type": null
                    },
                    "created": {
                        "location": "json",
                        "type": null
                    },
                    "plain_text_description": {
                        "location": "json",
                        "type": null
                    },
                    "how_to_find_us": {
                        "location": "json",
                        "type": null
                    },
                    "swagger_type": {
                        "location": "json",
                        "type": null
                    },
                    "photo_album": {
                        "location": "json",
                        "type": "object"
                    },
                    "rsvpable": {
                        "location": "json",
                        "type": null
                    },
                    "rsvp_sample": {
                        "location": "json",
                        "type": "object"
                    },
                    "series": {
                        "location": "json",
                        "type": "object"
                    },
                    "name": {
                        "location": "json",
                        "type": null
                    },
                    "self": {
                        "location": "json",
                        "type": "object"
                    },
                    "time": {
                        "location": "json",
                        "type": null
                    },
                    "updated": {
                        "location": "json",
                        "type": null
                    },
                    "status": {
                        "location": "statusCode",
                        "type": "integer"
                    }
                },
                "location": null,
                "items": null
            }
        },
        "GetFindGroups": {
            "type": "array",
            "properties": [],
            "location": "json",
            "items": {
                "type": "object",
                "properties": {
                    "country": {
                        "location": "json",
                        "type": null
                    },
                    "pending_members": {
                        "location": "json",
                        "type": null
                    },
                    "city": {
                        "location": "json",
                        "type": null
                    },
                    "similar_groups": {
                        "location": "json",
                        "type": "object"
                    },
                    "timezone": {
                        "location": "json",
                        "type": null
                    },
                    "link": {
                        "location": "json",
                        "type": null
                    },
                    "description": {
                        "location": "json",
                        "type": null
                    },
                    "lon": {
                        "location": "json",
                        "type": null
                    },
                    "welcome_message": {
                        "location": "json",
                        "type": null
                    },
                    "is_simplehtml": {
                        "location": "json",
                        "type": null
                    },
                    "group_photo": {
                        "location": "json",
                        "type": "object"
                    },
                    "photos": {
                        "location": "json",
                        "type": "object"
                    },
                    "short_link": {
                        "location": "json",
                        "type": null
                    },
                    "score": {
                        "location": "json",
                        "type": null
                    },
                    "join_mode": {
                        "location": "json",
                        "type": null
                    },
                    "approved": {
                        "location": "json",
                        "type": null
                    },
                    "contributions": {
                        "location": "json",
                        "type": "object"
                    },
                    "members": {
                        "location": "json",
                        "type": null
                    },
                    "state": {
                        "location": "json",
                        "type": null
                    },
                    "simple_html_description": {
                        "location": "json",
                        "type": null
                    },
                    "id": {
                        "location": "json",
                        "type": null
                    },
                    "urlname": {
                        "location": "json",
                        "type": null
                    },
                    "membership_dues": {
                        "location": "json",
                        "type": "object"
                    },
                    "lat": {
                        "location": "json",
                        "type": null
                    },
                    "next_event": {
                        "location": "json",
                        "type": "object"
                    },
                    "list_mode": {
                        "location": "json",
                        "type": null
                    },
                    "photo_gradient": {
                        "location": "json",
                        "type": "object"
                    },
                    "ga_code": {
                        "location": "json",
                        "type": null
                    },
                    "localized_country_name": {
                        "location": "json",
                        "type": null
                    },
                    "join_info": {
                        "location": "json",
                        "type": "object"
                    },
                    "visibility": {
                        "location": "json",
                        "type": null
                    },
                    "topics": {
                        "location": "json",
                        "type": "object"
                    },
                    "created": {
                        "location": "json",
                        "type": null
                    },
                    "key_photo": {
                        "location": "json",
                        "type": "object"
                    },
                    "plain_text_description": {
                        "location": "json",
                        "type": null
                    },
                    "list_addr": {
                        "location": "json",
                        "type": null
                    },
                    "organizer": {
                        "location": "json",
                        "type": "object"
                    },
                    "leads": {
                        "location": "json",
                        "type": null
                    },
                    "last_event": {
                        "location": "json",
                        "type": "object"
                    },
                    "name": {
                        "location": "json",
                        "type": null
                    },
                    "member_cap": {
                        "location": "json",
                        "type": null
                    },
                    "self": {
                        "location": "json",
                        "type": "object"
                    },
                    "category": {
                        "location": "json",
                        "type": "object"
                    },
                    "who": {
                        "location": "json",
                        "type": null
                    },
                    "status": {
                        "location": "statusCode",
                        "type": "integer"
                    }
                },
                "location": null,
                "items": null
            }
        },
        "GetFindLocations": {
            "type": "array",
            "properties": [],
            "location": "json",
            "items": {
                "type": "object",
                "properties": {
                    "zip": {
                        "location": "json",
                        "type": null
                    },
                    "country": {
                        "location": "json",
                        "type": null
                    },
                    "localized_country_name": {
                        "location": "json",
                        "type": null
                    },
                    "city": {
                        "location": "json",
                        "type": null
                    },
                    "lon": {
                        "location": "json",
                        "type": null
                    },
                    "state": {
                        "location": "json",
                        "type": null
                    },
                    "name_string": {
                        "location": "json",
                        "type": null
                    },
                    "swagger_type": {
                        "location": "json",
                        "type": null
                    },
                    "lat": {
                        "location": "json",
                        "type": null
                    },
                    "status": {
                        "location": "statusCode",
                        "type": "integer"
                    }
                },
                "location": null,
                "items": null
            }
        },
        "GetFindMembers": {
            "type": "array",
            "properties": [],
            "location": "json",
            "items": {
                "type": "object",
                "properties": {
                    "birthday": {
                        "location": "json",
                        "type": "object"
                    },
                    "country": {
                        "location": "json",
                        "type": null
                    },
                    "localized_country_name": {
                        "location": "json",
                        "type": null
                    },
                    "gender": {
                        "location": "json",
                        "type": null
                    },
                    "city": {
                        "location": "json",
                        "type": null
                    },
                    "joined": {
                        "location": "json",
                        "type": null
                    },
                    "photo": {
                        "location": "json",
                        "type": "object"
                    },
                    "bio": {
                        "location": "json",
                        "type": null
                    },
                    "privacy": {
                        "location": "json",
                        "type": "object"
                    },
                    "lon": {
                        "location": "json",
                        "type": null
                    },
                    "swagger_type": {
                        "location": "json",
                        "type": null
                    },
                    "other_services": {
                        "location": "json",
                        "type": "object"
                    },
                    "group_profile": {
                        "location": "json",
                        "type": "object"
                    },
                    "name": {
                        "location": "json",
                        "type": null
                    },
                    "self": {
                        "location": "json",
                        "type": "object"
                    },
                    "state": {
                        "location": "json",
                        "type": null
                    },
                    "id": {
                        "location": "json",
                        "type": null
                    },
                    "lat": {
                        "location": "json",
                        "type": null
                    },
                    "messaging_pref": {
                        "location": "json",
                        "type": null
                    },
                    "status": {
                        "location": "statusCode",
                        "type": "integer"
                    }
                },
                "location": null,
                "items": null
            }
        },
        "GetFindTopicCategories": {
            "type": "array",
            "properties": [],
            "location": "json",
            "items": {
                "type": "object",
                "properties": {
                    "best_topics": {
                        "location": "json",
                        "type": "object"
                    },
                    "name": {
                        "location": "json",
                        "type": null
                    },
                    "photo": {
                        "location": "json",
                        "type": "object"
                    },
                    "sort_name": {
                        "location": "json",
                        "type": null
                    },
                    "category_ids": {
                        "location": "json",
                        "type": null
                    },
                    "id": {
                        "location": "json",
                        "type": null
                    },
                    "shortname": {
                        "location": "json",
                        "type": null
                    },
                    "swagger_type": {
                        "location": "json",
                        "type": null
                    },
                    "status": {
                        "location": "statusCode",
                        "type": "integer"
                    }
                },
                "location": null,
                "items": null
            }
        },
        "GetFindTopics": {
            "type": "array",
            "properties": [],
            "location": "json",
            "items": {
                "type": "object",
                "properties": {
                    "urlkey": {
                        "location": "json",
                        "type": null
                    },
                    "group_count": {
                        "location": "json",
                        "type": null
                    },
                    "name": {
                        "location": "json",
                        "type": null
                    },
                    "description": {
                        "location": "json",
                        "type": null
                    },
                    "id": {
                        "location": "json",
                        "type": null
                    },
                    "member_count": {
                        "location": "json",
                        "type": null
                    },
                    "lang": {
                        "location": "json",
                        "type": null
                    },
                    "swagger_type": {
                        "location": "json",
                        "type": null
                    },
                    "status": {
                        "location": "statusCode",
                        "type": "integer"
                    }
                },
                "location": null,
                "items": null
            }
        },
        "GetFindVenues": {
            "type": "array",
            "properties": [],
            "location": "json",
            "items": {
                "type": "object",
                "properties": {
                    "zip": {
                        "location": "json",
                        "type": null
                    },
                    "country": {
                        "location": "json",
                        "type": null
                    },
                    "localized_country_name": {
                        "location": "json",
                        "type": null
                    },
                    "visibility": {
                        "location": "json",
                        "type": null
                    },
                    "city": {
                        "location": "json",
                        "type": null
                    },
                    "address_1": {
                        "location": "json",
                        "type": null
                    },
                    "address_2": {
                        "location": "json",
                        "type": null
                    },
                    "address_3": {
                        "location": "json",
                        "type": null
                    },
                    "rating": {
                        "location": "json",
                        "type": null
                    },
                    "lon": {
                        "location": "json",
                        "type": null
                    },
                    "rating_count": {
                        "location": "json",
                        "type": null
                    },
                    "taglist": {
                        "location": "json",
                        "type": null
                    },
                    "phone": {
                        "location": "json",
                        "type": null
                    },
                    "name": {
                        "location": "json",
                        "type": null
                    },
                    "state": {
                        "location": "json",
                        "type": null
                    },
                    "id": {
                        "location": "json",
                        "type": null
                    },
                    "lat": {
                        "location": "json",
                        "type": null
                    },
                    "status": {
                        "location": "statusCode",
                        "type": "integer"
                    }
                },
                "location": null,
                "items": null
            }
        },
        "GetGroup": {
            "type": "object",
            "properties": {
                "country": {
                    "location": "json",
                    "type": null
                },
                "pending_members": {
                    "location": "json",
                    "type": null
                },
                "city": {
                    "location": "json",
                    "type": null
                },
                "similar_groups": {
                    "location": "json",
                    "type": "object"
                },
                "timezone": {
                    "location": "json",
                    "type": null
                },
                "link": {
                    "location": "json",
                    "type": null
                },
                "description": {
                    "location": "json",
                    "type": null
                },
                "lon": {
                    "location": "json",
                    "type": null
                },
                "welcome_message": {
                    "location": "json",
                    "type": null
                },
                "is_simplehtml": {
                    "location": "json",
                    "type": null
                },
                "group_photo": {
                    "location": "json",
                    "type": "object"
                },
                "photos": {
                    "location": "json",
                    "type": "object"
                },
                "short_link": {
                    "location": "json",
                    "type": null
                },
                "event_sample": {
                    "location": "json",
                    "type": "object"
                },
                "join_mode": {
                    "location": "json",
                    "type": null
                },
                "approved": {
                    "location": "json",
                    "type": null
                },
                "contributions": {
                    "location": "json",
                    "type": "object"
                },
                "members": {
                    "location": "json",
                    "type": null
                },
                "state": {
                    "location": "json",
                    "type": null
                },
                "simple_html_description": {
                    "location": "json",
                    "type": null
                },
                "id": {
                    "location": "json",
                    "type": null
                },
                "urlname": {
                    "location": "json",
                    "type": null
                },
                "membership_dues": {
                    "location": "json",
                    "type": "object"
                },
                "lat": {
                    "location": "json",
                    "type": null
                },
                "next_event": {
                    "location": "json",
                    "type": "object"
                },
                "list_mode": {
                    "location": "json",
                    "type": null
                },
                "photo_gradient": {
                    "location": "json",
                    "type": "object"
                },
                "ga_code": {
                    "location": "json",
                    "type": null
                },
                "localized_country_name": {
                    "location": "json",
                    "type": null
                },
                "join_info": {
                    "location": "json",
                    "type": "object"
                },
                "visibility": {
                    "location": "json",
                    "type": null
                },
                "topics": {
                    "location": "json",
                    "type": "object"
                },
                "created": {
                    "location": "json",
                    "type": null
                },
                "key_photo": {
                    "location": "json",
                    "type": "object"
                },
                "plain_text_description": {
                    "location": "json",
                    "type": null
                },
                "list_addr": {
                    "location": "json",
                    "type": null
                },
                "member_sample": {
                    "location": "json",
                    "type": "object"
                },
                "organizer": {
                    "location": "json",
                    "type": "object"
                },
                "leads": {
                    "location": "json",
                    "type": null
                },
                "last_event": {
                    "location": "json",
                    "type": "object"
                },
                "name": {
                    "location": "json",
                    "type": null
                },
                "member_cap": {
                    "location": "json",
                    "type": null
                },
                "self": {
                    "location": "json",
                    "type": "object"
                },
                "category": {
                    "location": "json",
                    "type": "object"
                },
                "who": {
                    "location": "json",
                    "type": null
                },
                "status": {
                    "location": "statusCode",
                    "type": "integer"
                }
            },
            "location": null,
            "items": null
        },
        "GetGroupBoards": {
            "type": "array",
            "properties": [],
            "location": "json",
            "items": {
                "type": "object",
                "properties": {
                    "created": {
                        "location": "json",
                        "type": null
                    },
                    "name": {
                        "location": "json",
                        "type": null
                    },
                    "post_count": {
                        "location": "json",
                        "type": null
                    },
                    "id": {
                        "location": "json",
                        "type": null
                    },
                    "updated": {
                        "location": "json",
                        "type": null
                    },
                    "discussion_count": {
                        "location": "json",
                        "type": null
                    },
                    "latest_reply": {
                        "location": "json",
                        "type": "object"
                    },
                    "group": {
                        "location": "json",
                        "type": "object"
                    },
                    "status": {
                        "location": "statusCode",
                        "type": "integer"
                    }
                },
                "location": null,
                "items": null
            }
        },
        "GetGroupBoardsDiscussions": {
            "type": "array",
            "properties": [],
            "location": "json",
            "items": {
                "type": "object",
                "properties": {
                    "subject": {
                        "location": "json",
                        "type": null
                    },
                    "created": {
                        "location": "json",
                        "type": null
                    },
                    "member": {
                        "location": "json",
                        "type": "object"
                    },
                    "id": {
                        "location": "json",
                        "type": null
                    },
                    "discussion": {
                        "location": "json",
                        "type": "object"
                    },
                    "body": {
                        "location": "json",
                        "type": null
                    },
                    "updated": {
                        "location": "json",
                        "type": null
                    },
                    "in_reply_to": {
                        "location": "json",
                        "type": null
                    },
                    "status": {
                        "location": "statusCode",
                        "type": "integer"
                    }
                },
                "location": null,
                "items": null
            }
        },
        "GetGroupEvents": {
            "type": "array",
            "properties": [],
            "location": "json",
            "items": {
                "type": "object",
                "properties": {
                    "utc_offset": {
                        "location": "json",
                        "type": null
                    },
                    "comment_count": {
                        "location": "json",
                        "type": null
                    },
                    "rsvp_limit": {
                        "location": "json",
                        "type": null
                    },
                    "venue": {
                        "location": "json",
                        "type": "object"
                    },
                    "featured": {
                        "location": "json",
                        "type": null
                    },
                    "survey_questions": {
                        "location": "json",
                        "type": "object"
                    },
                    "venue_visibility": {
                        "location": "json",
                        "type": null
                    },
                    "manual_attendance_count": {
                        "location": "json",
                        "type": null
                    },
                    "fee": {
                        "location": "json",
                        "type": "object"
                    },
                    "link": {
                        "location": "json",
                        "type": null
                    },
                    "why": {
                        "location": "json",
                        "type": null
                    },
                    "description": {
                        "location": "json",
                        "type": null
                    },
                    "short_link": {
                        "location": "json",
                        "type": null
                    },
                    "yes_rsvp_count": {
                        "location": "json",
                        "type": null
                    },
                    "duration": {
                        "location": "json",
                        "type": null
                    },
                    "event_hosts": {
                        "location": "json",
                        "type": "object"
                    },
                    "simple_html_description": {
                        "location": "json",
                        "type": null
                    },
                    "id": {
                        "location": "json",
                        "type": null
                    },
                    "group": {
                        "location": "json",
                        "type": "object"
                    },
                    "rsvpable_after_join": {
                        "location": "json",
                        "type": null
                    },
                    "rsvp_rules": {
                        "location": "json",
                        "type": "object"
                    },
                    "visibility": {
                        "location": "json",
                        "type": null
                    },
                    "waitlist_count": {
                        "location": "json",
                        "type": null
                    },
                    "created": {
                        "location": "json",
                        "type": null
                    },
                    "plain_text_description": {
                        "location": "json",
                        "type": null
                    },
                    "how_to_find_us": {
                        "location": "json",
                        "type": null
                    },
                    "swagger_type": {
                        "location": "json",
                        "type": null
                    },
                    "photo_album": {
                        "location": "json",
                        "type": "object"
                    },
                    "rsvpable": {
                        "location": "json",
                        "type": null
                    },
                    "rsvp_sample": {
                        "location": "json",
                        "type": "object"
                    },
                    "series": {
                        "location": "json",
                        "type": "object"
                    },
                    "name": {
                        "location": "json",
                        "type": null
                    },
                    "self": {
                        "location": "json",
                        "type": "object"
                    },
                    "time": {
                        "location": "json",
                        "type": null
                    },
                    "updated": {
                        "location": "json",
                        "type": null
                    },
                    "status": {
                        "location": "statusCode",
                        "type": "integer"
                    }
                },
                "location": null,
                "items": null
            }
        },
        "GetGroupEventsAttendance": {
            "type": "array",
            "properties": [],
            "location": "json",
            "items": {
                "type": "object",
                "properties": {
                    "member": {
                        "location": "json",
                        "type": "object"
                    },
                    "rsvp": {
                        "location": "json",
                        "type": "object"
                    },
                    "status": {
                        "location": "statusCode",
                        "type": "integer"
                    }
                },
                "location": null,
                "items": null
            }
        },
        "GetGroupEventsComments": {
            "type": "array",
            "properties": [],
            "location": "json",
            "items": {
                "type": "object",
                "properties": {
                    "like_count": {
                        "location": "json",
                        "type": null
                    },
                    "replies": {
                        "location": "json",
                        "type": null
                    },
                    "created": {
                        "location": "json",
                        "type": null
                    },
                    "member": {
                        "location": "json",
                        "type": "object"
                    },
                    "self": {
                        "location": "json",
                        "type": "object"
                    },
                    "comment": {
                        "location": "json",
                        "type": null
                    },
                    "id": {
                        "location": "json",
                        "type": null
                    },
                    "swagger_type": {
                        "location": "json",
                        "type": null
                    },
                    "in_reply_to": {
                        "location": "json",
                        "type": null
                    },
                    "status": {
                        "location": "statusCode",
                        "type": "integer"
                    }
                },
                "location": null,
                "items": null
            }
        },
        "GetGroupEventsCommentsLikes": {
            "type": "array",
            "properties": [],
            "location": "json",
            "items": {
                "type": "object",
                "properties": {
                    "member": {
                        "location": "json",
                        "type": "object"
                    },
                    "updated": {
                        "location": "json",
                        "type": null
                    },
                    "swagger_type": {
                        "location": "json",
                        "type": null
                    },
                    "created": {
                        "location": "json",
                        "type": null
                    },
                    "status": {
                        "location": "statusCode",
                        "type": "integer"
                    }
                },
                "location": null,
                "items": null
            }
        },
        "GetGroupEventsHosts": {
            "type": "array",
            "properties": [],
            "location": "json",
            "items": {
                "type": "object",
                "properties": {
                    "birthday": {
                        "location": "json",
                        "type": "object"
                    },
                    "country": {
                        "location": "json",
                        "type": null
                    },
                    "localized_country_name": {
                        "location": "json",
                        "type": null
                    },
                    "gender": {
                        "location": "json",
                        "type": null
                    },
                    "city": {
                        "location": "json",
                        "type": null
                    },
                    "joined": {
                        "location": "json",
                        "type": null
                    },
                    "photo": {
                        "location": "json",
                        "type": "object"
                    },
                    "bio": {
                        "location": "json",
                        "type": null
                    },
                    "privacy": {
                        "location": "json",
                        "type": "object"
                    },
                    "lon": {
                        "location": "json",
                        "type": null
                    },
                    "swagger_type": {
                        "location": "json",
                        "type": null
                    },
                    "other_services": {
                        "location": "json",
                        "type": "object"
                    },
                    "group_profile": {
                        "location": "json",
                        "type": "object"
                    },
                    "name": {
                        "location": "json",
                        "type": null
                    },
                    "self": {
                        "location": "json",
                        "type": "object"
                    },
                    "state": {
                        "location": "json",
                        "type": null
                    },
                    "id": {
                        "location": "json",
                        "type": null
                    },
                    "lat": {
                        "location": "json",
                        "type": null
                    },
                    "messaging_pref": {
                        "location": "json",
                        "type": null
                    },
                    "status": {
                        "location": "statusCode",
                        "type": "integer"
                    }
                },
                "location": null,
                "items": null
            }
        },
        "GetGroupEventsPhotos": {
            "type": "object",
            "properties": {
                "utc_offset": {
                    "location": "json",
                    "type": null
                },
                "comment_count": {
                    "location": "json",
                    "type": null
                },
                "highres_link": {
                    "location": "json",
                    "type": null
                },
                "created": {
                    "location": "json",
                    "type": null
                },
                "base_url": {
                    "location": "json",
                    "type": null
                },
                "link": {
                    "location": "json",
                    "type": null
                },
                "caption": {
                    "location": "json",
                    "type": null
                },
                "type": {
                    "location": "json",
                    "type": null
                },
                "thumb_link": {
                    "location": "json",
                    "type": null
                },
                "short_link": {
                    "location": "json",
                    "type": null
                },
                "swagger_type": {
                    "location": "json",
                    "type": null
                },
                "photo_album": {
                    "location": "json",
                    "type": "object"
                },
                "member": {
                    "location": "json",
                    "type": "object"
                },
                "self": {
                    "location": "json",
                    "type": "object"
                },
                "id": {
                    "location": "json",
                    "type": null
                },
                "photo_link": {
                    "location": "json",
                    "type": null
                },
                "updated": {
                    "location": "json",
                    "type": null
                },
                "group": {
                    "location": "json",
                    "type": "object"
                },
                "status": {
                    "location": "statusCode",
                    "type": "integer"
                }
            },
            "location": null,
            "items": null
        },
        "GetGroupEventsPhotosComments": {
            "type": "object",
            "properties": {
                "member": {
                    "location": "json",
                    "type": "object"
                },
                "self": {
                    "location": "json",
                    "type": "object"
                },
                "comment": {
                    "location": "json",
                    "type": null
                },
                "id": {
                    "location": "json",
                    "type": null
                },
                "created": {
                    "location": "json",
                    "type": null
                },
                "status": {
                    "location": "statusCode",
                    "type": "integer"
                }
            },
            "location": null,
            "items": null
        },
        "GetGroupEventsRsvps": {
            "type": "array",
            "properties": [],
            "location": "json",
            "items": {
                "type": "object",
                "properties": {
                    "venue": {
                        "location": "json",
                        "type": "object"
                    },
                    "created": {
                        "location": "json",
                        "type": null
                    },
                    "answers": {
                        "location": "json",
                        "type": "object"
                    },
                    "swagger_type": {
                        "location": "json",
                        "type": null
                    },
                    "pay_status": {
                        "location": "json",
                        "type": null
                    },
                    "response": {
                        "location": "json",
                        "type": null
                    },
                    "guests": {
                        "location": "json",
                        "type": null
                    },
                    "member": {
                        "location": "json",
                        "type": "object"
                    },
                    "event": {
                        "location": "json",
                        "type": "object"
                    },
                    "attendance_status": {
                        "location": "json",
                        "type": null
                    },
                    "updated": {
                        "location": "json",
                        "type": null
                    },
                    "group": {
                        "location": "json",
                        "type": "object"
                    },
                    "status": {
                        "location": "statusCode",
                        "type": "integer"
                    }
                },
                "location": null,
                "items": null
            }
        },
        "GetGroupMembers": {
            "type": "object",
            "properties": {
                "birthday": {
                    "location": "json",
                    "type": "object"
                },
                "country": {
                    "location": "json",
                    "type": null
                },
                "gender": {
                    "location": "json",
                    "type": null
                },
                "city": {
                    "location": "json",
                    "type": null
                },
                "bio": {
                    "location": "json",
                    "type": null
                },
                "privacy": {
                    "location": "json",
                    "type": "object"
                },
                "lon": {
                    "location": "json",
                    "type": null
                },
                "memberships": {
                    "location": "json",
                    "type": "object"
                },
                "other_services": {
                    "location": "json",
                    "type": "object"
                },
                "stats": {
                    "location": "json",
                    "type": "object"
                },
                "state": {
                    "location": "json",
                    "type": null
                },
                "id": {
                    "location": "json",
                    "type": null
                },
                "lat": {
                    "location": "json",
                    "type": null
                },
                "next_event": {
                    "location": "json",
                    "type": "object"
                },
                "localized_country_name": {
                    "location": "json",
                    "type": null
                },
                "topics": {
                    "location": "json",
                    "type": "object"
                },
                "joined": {
                    "location": "json",
                    "type": null
                },
                "photo": {
                    "location": "json",
                    "type": "object"
                },
                "swagger_type": {
                    "location": "json",
                    "type": null
                },
                "group_profile": {
                    "location": "json",
                    "type": "object"
                },
                "last_event": {
                    "location": "json",
                    "type": "object"
                },
                "name": {
                    "location": "json",
                    "type": null
                },
                "self": {
                    "location": "json",
                    "type": "object"
                },
                "messaging_pref": {
                    "location": "json",
                    "type": null
                },
                "status": {
                    "location": "statusCode",
                    "type": "integer"
                }
            },
            "location": null,
            "items": null
        },
        "GetGroupPhotoAlbums": {
            "type": "array",
            "properties": [],
            "location": "json",
            "items": {
                "type": "object",
                "properties": {
                    "photo_sample": {
                        "location": "json",
                        "type": "object"
                    },
                    "created": {
                        "location": "json",
                        "type": null
                    },
                    "link": {
                        "location": "json",
                        "type": null
                    },
                    "title": {
                        "location": "json",
                        "type": null
                    },
                    "short_link": {
                        "location": "json",
                        "type": null
                    },
                    "swagger_type": {
                        "location": "json",
                        "type": null
                    },
                    "photo_count": {
                        "location": "json",
                        "type": null
                    },
                    "self": {
                        "location": "json",
                        "type": "object"
                    },
                    "id": {
                        "location": "json",
                        "type": null
                    },
                    "event": {
                        "location": "json",
                        "type": "object"
                    },
                    "album_photo": {
                        "location": "json",
                        "type": "object"
                    },
                    "updated": {
                        "location": "json",
                        "type": null
                    },
                    "group": {
                        "location": "json",
                        "type": "object"
                    },
                    "status": {
                        "location": "statusCode",
                        "type": "integer"
                    }
                },
                "location": null,
                "items": null
            }
        },
        "GetGroupPhotoAlbumsPhotos": {
            "type": "array",
            "properties": [],
            "location": "json",
            "items": {
                "type": "object",
                "properties": {
                    "utc_offset": {
                        "location": "json",
                        "type": null
                    },
                    "comment_count": {
                        "location": "json",
                        "type": null
                    },
                    "highres_link": {
                        "location": "json",
                        "type": null
                    },
                    "created": {
                        "location": "json",
                        "type": null
                    },
                    "base_url": {
                        "location": "json",
                        "type": null
                    },
                    "link": {
                        "location": "json",
                        "type": null
                    },
                    "caption": {
                        "location": "json",
                        "type": null
                    },
                    "type": {
                        "location": "json",
                        "type": null
                    },
                    "thumb_link": {
                        "location": "json",
                        "type": null
                    },
                    "short_link": {
                        "location": "json",
                        "type": null
                    },
                    "swagger_type": {
                        "location": "json",
                        "type": null
                    },
                    "photo_album": {
                        "location": "json",
                        "type": "object"
                    },
                    "member": {
                        "location": "json",
                        "type": "object"
                    },
                    "self": {
                        "location": "json",
                        "type": "object"
                    },
                    "id": {
                        "location": "json",
                        "type": null
                    },
                    "photo_link": {
                        "location": "json",
                        "type": null
                    },
                    "updated": {
                        "location": "json",
                        "type": null
                    },
                    "group": {
                        "location": "json",
                        "type": "object"
                    },
                    "status": {
                        "location": "statusCode",
                        "type": "integer"
                    }
                },
                "location": null,
                "items": null
            }
        },
        "GetGroupPhotos": {
            "type": "array",
            "properties": [],
            "location": "json",
            "items": {
                "type": "object",
                "properties": {
                    "utc_offset": {
                        "location": "json",
                        "type": null
                    },
                    "comment_count": {
                        "location": "json",
                        "type": null
                    },
                    "highres_link": {
                        "location": "json",
                        "type": null
                    },
                    "created": {
                        "location": "json",
                        "type": null
                    },
                    "base_url": {
                        "location": "json",
                        "type": null
                    },
                    "link": {
                        "location": "json",
                        "type": null
                    },
                    "caption": {
                        "location": "json",
                        "type": null
                    },
                    "type": {
                        "location": "json",
                        "type": null
                    },
                    "thumb_link": {
                        "location": "json",
                        "type": null
                    },
                    "short_link": {
                        "location": "json",
                        "type": null
                    },
                    "swagger_type": {
                        "location": "json",
                        "type": null
                    },
                    "photo_album": {
                        "location": "json",
                        "type": "object"
                    },
                    "member": {
                        "location": "json",
                        "type": "object"
                    },
                    "self": {
                        "location": "json",
                        "type": "object"
                    },
                    "id": {
                        "location": "json",
                        "type": null
                    },
                    "photo_link": {
                        "location": "json",
                        "type": null
                    },
                    "updated": {
                        "location": "json",
                        "type": null
                    },
                    "group": {
                        "location": "json",
                        "type": "object"
                    },
                    "status": {
                        "location": "statusCode",
                        "type": "integer"
                    }
                },
                "location": null,
                "items": null
            }
        },
        "GetGroupSimilarGroups": {
            "type": "array",
            "properties": [],
            "location": "json",
            "items": {
                "type": "object",
                "properties": {
                    "country": {
                        "location": "json",
                        "type": null
                    },
                    "pending_members": {
                        "location": "json",
                        "type": null
                    },
                    "city": {
                        "location": "json",
                        "type": null
                    },
                    "similar_groups": {
                        "location": "json",
                        "type": "object"
                    },
                    "timezone": {
                        "location": "json",
                        "type": null
                    },
                    "link": {
                        "location": "json",
                        "type": null
                    },
                    "description": {
                        "location": "json",
                        "type": null
                    },
                    "lon": {
                        "location": "json",
                        "type": null
                    },
                    "welcome_message": {
                        "location": "json",
                        "type": null
                    },
                    "is_simplehtml": {
                        "location": "json",
                        "type": null
                    },
                    "group_photo": {
                        "location": "json",
                        "type": "object"
                    },
                    "photos": {
                        "location": "json",
                        "type": "object"
                    },
                    "short_link": {
                        "location": "json",
                        "type": null
                    },
                    "join_mode": {
                        "location": "json",
                        "type": null
                    },
                    "approved": {
                        "location": "json",
                        "type": null
                    },
                    "contributions": {
                        "location": "json",
                        "type": "object"
                    },
                    "members": {
                        "location": "json",
                        "type": null
                    },
                    "state": {
                        "location": "json",
                        "type": null
                    },
                    "simple_html_description": {
                        "location": "json",
                        "type": null
                    },
                    "id": {
                        "location": "json",
                        "type": null
                    },
                    "urlname": {
                        "location": "json",
                        "type": null
                    },
                    "membership_dues": {
                        "location": "json",
                        "type": "object"
                    },
                    "lat": {
                        "location": "json",
                        "type": null
                    },
                    "next_event": {
                        "location": "json",
                        "type": "object"
                    },
                    "list_mode": {
                        "location": "json",
                        "type": null
                    },
                    "photo_gradient": {
                        "location": "json",
                        "type": "object"
                    },
                    "ga_code": {
                        "location": "json",
                        "type": null
                    },
                    "localized_country_name": {
                        "location": "json",
                        "type": null
                    },
                    "join_info": {
                        "location": "json",
                        "type": "object"
                    },
                    "visibility": {
                        "location": "json",
                        "type": null
                    },
                    "topics": {
                        "location": "json",
                        "type": "object"
                    },
                    "created": {
                        "location": "json",
                        "type": null
                    },
                    "key_photo": {
                        "location": "json",
                        "type": "object"
                    },
                    "plain_text_description": {
                        "location": "json",
                        "type": null
                    },
                    "list_addr": {
                        "location": "json",
                        "type": null
                    },
                    "organizer": {
                        "location": "json",
                        "type": "object"
                    },
                    "leads": {
                        "location": "json",
                        "type": null
                    },
                    "last_event": {
                        "location": "json",
                        "type": "object"
                    },
                    "name": {
                        "location": "json",
                        "type": null
                    },
                    "member_cap": {
                        "location": "json",
                        "type": null
                    },
                    "self": {
                        "location": "json",
                        "type": "object"
                    },
                    "category": {
                        "location": "json",
                        "type": "object"
                    },
                    "who": {
                        "location": "json",
                        "type": null
                    },
                    "status": {
                        "location": "statusCode",
                        "type": "integer"
                    }
                },
                "location": null,
                "items": null
            }
        },
        "GetGroupVenues": {
            "type": "array",
            "properties": [],
            "location": "json",
            "items": {
                "type": "object",
                "properties": {
                    "zip": {
                        "location": "json",
                        "type": null
                    },
                    "country": {
                        "location": "json",
                        "type": null
                    },
                    "localized_country_name": {
                        "location": "json",
                        "type": null
                    },
                    "visibility": {
                        "location": "json",
                        "type": null
                    },
                    "city": {
                        "location": "json",
                        "type": null
                    },
                    "address_1": {
                        "location": "json",
                        "type": null
                    },
                    "address_2": {
                        "location": "json",
                        "type": null
                    },
                    "address_3": {
                        "location": "json",
                        "type": null
                    },
                    "rating": {
                        "location": "json",
                        "type": null
                    },
                    "lon": {
                        "location": "json",
                        "type": null
                    },
                    "rating_count": {
                        "location": "json",
                        "type": null
                    },
                    "taglist": {
                        "location": "json",
                        "type": null
                    },
                    "phone": {
                        "location": "json",
                        "type": null
                    },
                    "name": {
                        "location": "json",
                        "type": null
                    },
                    "state": {
                        "location": "json",
                        "type": null
                    },
                    "id": {
                        "location": "json",
                        "type": null
                    },
                    "lat": {
                        "location": "json",
                        "type": null
                    },
                    "status": {
                        "location": "statusCode",
                        "type": "integer"
                    }
                },
                "location": null,
                "items": null
            }
        },
        "GetMembers": {
            "type": "object",
            "properties": {
                "birthday": {
                    "location": "json",
                    "type": "object"
                },
                "country": {
                    "location": "json",
                    "type": null
                },
                "localized_country_name": {
                    "location": "json",
                    "type": null
                },
                "gender": {
                    "location": "json",
                    "type": null
                },
                "city": {
                    "location": "json",
                    "type": null
                },
                "topics": {
                    "location": "json",
                    "type": "object"
                },
                "joined": {
                    "location": "json",
                    "type": null
                },
                "photo": {
                    "location": "json",
                    "type": "object"
                },
                "bio": {
                    "location": "json",
                    "type": null
                },
                "privacy": {
                    "location": "json",
                    "type": "object"
                },
                "lon": {
                    "location": "json",
                    "type": null
                },
                "memberships": {
                    "location": "json",
                    "type": "object"
                },
                "swagger_type": {
                    "location": "json",
                    "type": null
                },
                "other_services": {
                    "location": "json",
                    "type": "object"
                },
                "stats": {
                    "location": "json",
                    "type": "object"
                },
                "last_event": {
                    "location": "json",
                    "type": "object"
                },
                "name": {
                    "location": "json",
                    "type": null
                },
                "self": {
                    "location": "json",
                    "type": "object"
                },
                "state": {
                    "location": "json",
                    "type": null
                },
                "id": {
                    "location": "json",
                    "type": null
                },
                "lat": {
                    "location": "json",
                    "type": null
                },
                "next_event": {
                    "location": "json",
                    "type": "object"
                },
                "messaging_pref": {
                    "location": "json",
                    "type": null
                },
                "status": {
                    "location": "statusCode",
                    "type": "integer"
                }
            },
            "location": null,
            "items": null
        },
        "GetNotifications": {
            "type": "array",
            "properties": [],
            "location": "json",
            "items": {
                "type": "object",
                "properties": {
                    "read": {
                        "location": "json",
                        "type": null
                    },
                    "kind": {
                        "location": "json",
                        "type": null
                    },
                    "link": {
                        "location": "json",
                        "type": null
                    },
                    "photo": {
                        "location": "json",
                        "type": "object"
                    },
                    "setting": {
                        "location": "json",
                        "type": "object"
                    },
                    "target": {
                        "location": "json",
                        "type": "object"
                    },
                    "important": {
                        "location": "json",
                        "type": null
                    },
                    "photo_type": {
                        "location": "json",
                        "type": null
                    },
                    "self": {
                        "location": "json",
                        "type": "object"
                    },
                    "text": {
                        "location": "json",
                        "type": null
                    },
                    "id": {
                        "location": "json",
                        "type": null
                    },
                    "category": {
                        "location": "json",
                        "type": null
                    },
                    "updated": {
                        "location": "json",
                        "type": null
                    },
                    "status": {
                        "location": "statusCode",
                        "type": "integer"
                    }
                },
                "location": null,
                "items": null
            }
        },
        "GetProGroups": {
            "type": "array",
            "properties": [],
            "location": "json",
            "items": {
                "type": "object",
                "properties": {
                    "country": {
                        "location": "json",
                        "type": null
                    },
                    "gender_female": {
                        "location": "json",
                        "type": null
                    },
                    "city": {
                        "location": "json",
                        "type": null
                    },
                    "past_events": {
                        "location": "json",
                        "type": null
                    },
                    "description": {
                        "location": "json",
                        "type": null
                    },
                    "past_rsvps": {
                        "location": "json",
                        "type": null
                    },
                    "lon": {
                        "location": "json",
                        "type": null
                    },
                    "founded_date": {
                        "location": "json",
                        "type": null
                    },
                    "pro_join_date": {
                        "location": "json",
                        "type": null
                    },
                    "gender_other": {
                        "location": "json",
                        "type": null
                    },
                    "state": {
                        "location": "json",
                        "type": null
                    },
                    "id": {
                        "location": "json",
                        "type": null
                    },
                    "urlname": {
                        "location": "json",
                        "type": null
                    },
                    "member_count": {
                        "location": "json",
                        "type": null
                    },
                    "average_age": {
                        "location": "json",
                        "type": null
                    },
                    "lat": {
                        "location": "json",
                        "type": null
                    },
                    "next_event": {
                        "location": "json",
                        "type": null
                    },
                    "repeat_rsvpers": {
                        "location": "json",
                        "type": null
                    },
                    "topics": {
                        "location": "json",
                        "type": "object"
                    },
                    "upcoming_events": {
                        "location": "json",
                        "type": null
                    },
                    "gender_unknown": {
                        "location": "json",
                        "type": null
                    },
                    "gender_male": {
                        "location": "json",
                        "type": null
                    },
                    "rsvps_per_event": {
                        "location": "json",
                        "type": null
                    },
                    "last_event": {
                        "location": "json",
                        "type": null
                    },
                    "name": {
                        "location": "json",
                        "type": null
                    },
                    "category": {
                        "location": "json",
                        "type": "object"
                    },
                    "status": {
                        "location": "statusCode",
                        "type": "integer"
                    }
                },
                "location": null,
                "items": null
            }
        },
        "GetProMembers": {
            "type": "array",
            "properties": [],
            "location": "json",
            "items": {
                "type": "object",
                "properties": {
                    "member_id": {
                        "location": "json",
                        "type": null
                    },
                    "photo_thumb_url": {
                        "location": "json",
                        "type": null
                    },
                    "country": {
                        "location": "json",
                        "type": null
                    },
                    "city": {
                        "location": "json",
                        "type": null
                    },
                    "chapters": {
                        "location": "json",
                        "type": "object"
                    },
                    "is_organizer": {
                        "location": "json",
                        "type": null
                    },
                    "lon": {
                        "location": "json",
                        "type": null
                    },
                    "member_name": {
                        "location": "json",
                        "type": null
                    },
                    "join_time": {
                        "location": "json",
                        "type": null
                    },
                    "last_access_time": {
                        "location": "json",
                        "type": null
                    },
                    "events_attended": {
                        "location": "json",
                        "type": null
                    },
                    "state": {
                        "location": "json",
                        "type": null
                    },
                    "lat": {
                        "location": "json",
                        "type": null
                    },
                    "status": {
                        "location": "statusCode",
                        "type": "integer"
                    }
                },
                "location": null,
                "items": null
            }
        },
        "GetProTickets": {
            "type": "array",
            "properties": [],
            "location": "json",
            "items": {
                "type": "object",
                "properties": {
                    "chapter": {
                        "location": "json",
                        "type": "object"
                    },
                    "created": {
                        "location": "json",
                        "type": null
                    },
                    "member": {
                        "location": "json",
                        "type": "object"
                    },
                    "ticket_key": {
                        "location": "json",
                        "type": null
                    },
                    "updated": {
                        "location": "json",
                        "type": null
                    },
                    "status": {
                        "location": "statusCode",
                        "type": "integer"
                    }
                },
                "location": null,
                "items": null
            }
        },
        "GetRecommendedEvents": {
            "type": "array",
            "properties": [],
            "location": "json",
            "items": {
                "type": "object",
                "properties": {
                    "utc_offset": {
                        "location": "json",
                        "type": null
                    },
                    "comment_count": {
                        "location": "json",
                        "type": null
                    },
                    "rsvp_limit": {
                        "location": "json",
                        "type": null
                    },
                    "venue": {
                        "location": "json",
                        "type": "object"
                    },
                    "featured": {
                        "location": "json",
                        "type": null
                    },
                    "survey_questions": {
                        "location": "json",
                        "type": "object"
                    },
                    "venue_visibility": {
                        "location": "json",
                        "type": null
                    },
                    "manual_attendance_count": {
                        "location": "json",
                        "type": null
                    },
                    "fee": {
                        "location": "json",
                        "type": "object"
                    },
                    "link": {
                        "location": "json",
                        "type": null
                    },
                    "why": {
                        "location": "json",
                        "type": null
                    },
                    "description": {
                        "location": "json",
                        "type": null
                    },
                    "short_link": {
                        "location": "json",
                        "type": null
                    },
                    "yes_rsvp_count": {
                        "location": "json",
                        "type": null
                    },
                    "duration": {
                        "location": "json",
                        "type": null
                    },
                    "event_hosts": {
                        "location": "json",
                        "type": "object"
                    },
                    "simple_html_description": {
                        "location": "json",
                        "type": null
                    },
                    "id": {
                        "location": "json",
                        "type": null
                    },
                    "group": {
                        "location": "json",
                        "type": "object"
                    },
                    "rsvpable_after_join": {
                        "location": "json",
                        "type": null
                    },
                    "rsvp_rules": {
                        "location": "json",
                        "type": "object"
                    },
                    "visibility": {
                        "location": "json",
                        "type": null
                    },
                    "waitlist_count": {
                        "location": "json",
                        "type": null
                    },
                    "created": {
                        "location": "json",
                        "type": null
                    },
                    "plain_text_description": {
                        "location": "json",
                        "type": null
                    },
                    "how_to_find_us": {
                        "location": "json",
                        "type": null
                    },
                    "swagger_type": {
                        "location": "json",
                        "type": null
                    },
                    "photo_album": {
                        "location": "json",
                        "type": "object"
                    },
                    "rsvpable": {
                        "location": "json",
                        "type": null
                    },
                    "rsvp_sample": {
                        "location": "json",
                        "type": "object"
                    },
                    "series": {
                        "location": "json",
                        "type": "object"
                    },
                    "name": {
                        "location": "json",
                        "type": null
                    },
                    "self": {
                        "location": "json",
                        "type": "object"
                    },
                    "time": {
                        "location": "json",
                        "type": null
                    },
                    "updated": {
                        "location": "json",
                        "type": null
                    },
                    "status": {
                        "location": "statusCode",
                        "type": "integer"
                    }
                },
                "location": null,
                "items": null
            }
        },
        "GetRecommendedGroupTopics": {
            "type": "array",
            "properties": [],
            "location": "json",
            "items": {
                "type": "object",
                "properties": {
                    "urlkey": {
                        "location": "json",
                        "type": null
                    },
                    "group_count": {
                        "location": "json",
                        "type": null
                    },
                    "name": {
                        "location": "json",
                        "type": null
                    },
                    "description": {
                        "location": "json",
                        "type": null
                    },
                    "id": {
                        "location": "json",
                        "type": null
                    },
                    "member_count": {
                        "location": "json",
                        "type": null
                    },
                    "lang": {
                        "location": "json",
                        "type": null
                    },
                    "swagger_type": {
                        "location": "json",
                        "type": null
                    },
                    "status": {
                        "location": "statusCode",
                        "type": "integer"
                    }
                },
                "location": null,
                "items": null
            }
        },
        "GetRecommendedGroups": {
            "type": "array",
            "properties": [],
            "location": "json",
            "items": {
                "type": "object",
                "properties": {
                    "country": {
                        "location": "json",
                        "type": null
                    },
                    "pending_members": {
                        "location": "json",
                        "type": null
                    },
                    "city": {
                        "location": "json",
                        "type": null
                    },
                    "similar_groups": {
                        "location": "json",
                        "type": "object"
                    },
                    "timezone": {
                        "location": "json",
                        "type": null
                    },
                    "link": {
                        "location": "json",
                        "type": null
                    },
                    "description": {
                        "location": "json",
                        "type": null
                    },
                    "lon": {
                        "location": "json",
                        "type": null
                    },
                    "welcome_message": {
                        "location": "json",
                        "type": null
                    },
                    "is_simplehtml": {
                        "location": "json",
                        "type": null
                    },
                    "group_photo": {
                        "location": "json",
                        "type": "object"
                    },
                    "photos": {
                        "location": "json",
                        "type": "object"
                    },
                    "short_link": {
                        "location": "json",
                        "type": null
                    },
                    "score": {
                        "location": "json",
                        "type": null
                    },
                    "join_mode": {
                        "location": "json",
                        "type": null
                    },
                    "approved": {
                        "location": "json",
                        "type": null
                    },
                    "contributions": {
                        "location": "json",
                        "type": "object"
                    },
                    "members": {
                        "location": "json",
                        "type": null
                    },
                    "state": {
                        "location": "json",
                        "type": null
                    },
                    "simple_html_description": {
                        "location": "json",
                        "type": null
                    },
                    "id": {
                        "location": "json",
                        "type": null
                    },
                    "urlname": {
                        "location": "json",
                        "type": null
                    },
                    "membership_dues": {
                        "location": "json",
                        "type": "object"
                    },
                    "lat": {
                        "location": "json",
                        "type": null
                    },
                    "next_event": {
                        "location": "json",
                        "type": "object"
                    },
                    "list_mode": {
                        "location": "json",
                        "type": null
                    },
                    "photo_gradient": {
                        "location": "json",
                        "type": "object"
                    },
                    "ga_code": {
                        "location": "json",
                        "type": null
                    },
                    "localized_country_name": {
                        "location": "json",
                        "type": null
                    },
                    "join_info": {
                        "location": "json",
                        "type": "object"
                    },
                    "visibility": {
                        "location": "json",
                        "type": null
                    },
                    "topics": {
                        "location": "json",
                        "type": "object"
                    },
                    "created": {
                        "location": "json",
                        "type": null
                    },
                    "key_photo": {
                        "location": "json",
                        "type": "object"
                    },
                    "plain_text_description": {
                        "location": "json",
                        "type": null
                    },
                    "list_addr": {
                        "location": "json",
                        "type": null
                    },
                    "organizer": {
                        "location": "json",
                        "type": "object"
                    },
                    "leads": {
                        "location": "json",
                        "type": null
                    },
                    "last_event": {
                        "location": "json",
                        "type": "object"
                    },
                    "name": {
                        "location": "json",
                        "type": null
                    },
                    "member_cap": {
                        "location": "json",
                        "type": null
                    },
                    "self": {
                        "location": "json",
                        "type": "object"
                    },
                    "category": {
                        "location": "json",
                        "type": "object"
                    },
                    "who": {
                        "location": "json",
                        "type": null
                    },
                    "status": {
                        "location": "statusCode",
                        "type": "integer"
                    }
                },
                "location": null,
                "items": null
            }
        },
        "GetRecommendedVenues": {
            "type": "array",
            "properties": [],
            "location": "json",
            "items": {
                "type": "object",
                "properties": {
                    "zip": {
                        "location": "json",
                        "type": null
                    },
                    "country": {
                        "location": "json",
                        "type": null
                    },
                    "localized_country_name": {
                        "location": "json",
                        "type": null
                    },
                    "visibility": {
                        "location": "json",
                        "type": null
                    },
                    "city": {
                        "location": "json",
                        "type": null
                    },
                    "address_1": {
                        "location": "json",
                        "type": null
                    },
                    "address_2": {
                        "location": "json",
                        "type": null
                    },
                    "address_3": {
                        "location": "json",
                        "type": null
                    },
                    "rating": {
                        "location": "json",
                        "type": null
                    },
                    "lon": {
                        "location": "json",
                        "type": null
                    },
                    "rating_count": {
                        "location": "json",
                        "type": null
                    },
                    "taglist": {
                        "location": "json",
                        "type": null
                    },
                    "phone": {
                        "location": "json",
                        "type": null
                    },
                    "name": {
                        "location": "json",
                        "type": null
                    },
                    "state": {
                        "location": "json",
                        "type": null
                    },
                    "id": {
                        "location": "json",
                        "type": null
                    },
                    "lat": {
                        "location": "json",
                        "type": null
                    },
                    "status": {
                        "location": "statusCode",
                        "type": "integer"
                    }
                },
                "location": null,
                "items": null
            }
        },
        "GetSelfBlocks": {
            "type": "array",
            "properties": [],
            "location": "json",
            "items": {
                "type": "object",
                "properties": {
                    "status": {
                        "location": "statusCode",
                        "type": "integer"
                    }
                },
                "location": null,
                "items": null
            }
        },
        "GetSelfCalendar": {
            "type": "array",
            "properties": [],
            "location": "json",
            "items": {
                "type": "object",
                "properties": {
                    "utc_offset": {
                        "location": "json",
                        "type": null
                    },
                    "comment_count": {
                        "location": "json",
                        "type": null
                    },
                    "rsvp_limit": {
                        "location": "json",
                        "type": null
                    },
                    "venue": {
                        "location": "json",
                        "type": "object"
                    },
                    "featured": {
                        "location": "json",
                        "type": null
                    },
                    "survey_questions": {
                        "location": "json",
                        "type": "object"
                    },
                    "venue_visibility": {
                        "location": "json",
                        "type": null
                    },
                    "manual_attendance_count": {
                        "location": "json",
                        "type": null
                    },
                    "fee": {
                        "location": "json",
                        "type": "object"
                    },
                    "link": {
                        "location": "json",
                        "type": null
                    },
                    "why": {
                        "location": "json",
                        "type": null
                    },
                    "description": {
                        "location": "json",
                        "type": null
                    },
                    "short_link": {
                        "location": "json",
                        "type": null
                    },
                    "yes_rsvp_count": {
                        "location": "json",
                        "type": null
                    },
                    "duration": {
                        "location": "json",
                        "type": null
                    },
                    "event_hosts": {
                        "location": "json",
                        "type": "object"
                    },
                    "simple_html_description": {
                        "location": "json",
                        "type": null
                    },
                    "id": {
                        "location": "json",
                        "type": null
                    },
                    "group": {
                        "location": "json",
                        "type": "object"
                    },
                    "rsvpable_after_join": {
                        "location": "json",
                        "type": null
                    },
                    "rsvp_rules": {
                        "location": "json",
                        "type": "object"
                    },
                    "visibility": {
                        "location": "json",
                        "type": null
                    },
                    "waitlist_count": {
                        "location": "json",
                        "type": null
                    },
                    "created": {
                        "location": "json",
                        "type": null
                    },
                    "plain_text_description": {
                        "location": "json",
                        "type": null
                    },
                    "how_to_find_us": {
                        "location": "json",
                        "type": null
                    },
                    "swagger_type": {
                        "location": "json",
                        "type": null
                    },
                    "photo_album": {
                        "location": "json",
                        "type": "object"
                    },
                    "rsvpable": {
                        "location": "json",
                        "type": null
                    },
                    "rsvp_sample": {
                        "location": "json",
                        "type": "object"
                    },
                    "series": {
                        "location": "json",
                        "type": "object"
                    },
                    "name": {
                        "location": "json",
                        "type": null
                    },
                    "self": {
                        "location": "json",
                        "type": "object"
                    },
                    "time": {
                        "location": "json",
                        "type": null
                    },
                    "updated": {
                        "location": "json",
                        "type": null
                    },
                    "status": {
                        "location": "statusCode",
                        "type": "integer"
                    }
                },
                "location": null,
                "items": null
            }
        },
        "GetSelfEvents": {
            "type": "array",
            "properties": [],
            "location": "json",
            "items": {
                "type": "object",
                "properties": {
                    "utc_offset": {
                        "location": "json",
                        "type": null
                    },
                    "comment_count": {
                        "location": "json",
                        "type": null
                    },
                    "rsvp_limit": {
                        "location": "json",
                        "type": null
                    },
                    "venue": {
                        "location": "json",
                        "type": "object"
                    },
                    "featured": {
                        "location": "json",
                        "type": null
                    },
                    "survey_questions": {
                        "location": "json",
                        "type": "object"
                    },
                    "venue_visibility": {
                        "location": "json",
                        "type": null
                    },
                    "manual_attendance_count": {
                        "location": "json",
                        "type": null
                    },
                    "fee": {
                        "location": "json",
                        "type": "object"
                    },
                    "link": {
                        "location": "json",
                        "type": null
                    },
                    "why": {
                        "location": "json",
                        "type": null
                    },
                    "description": {
                        "location": "json",
                        "type": null
                    },
                    "short_link": {
                        "location": "json",
                        "type": null
                    },
                    "yes_rsvp_count": {
                        "location": "json",
                        "type": null
                    },
                    "duration": {
                        "location": "json",
                        "type": null
                    },
                    "event_hosts": {
                        "location": "json",
                        "type": "object"
                    },
                    "simple_html_description": {
                        "location": "json",
                        "type": null
                    },
                    "id": {
                        "location": "json",
                        "type": null
                    },
                    "group": {
                        "location": "json",
                        "type": "object"
                    },
                    "rsvpable_after_join": {
                        "location": "json",
                        "type": null
                    },
                    "rsvp_rules": {
                        "location": "json",
                        "type": "object"
                    },
                    "visibility": {
                        "location": "json",
                        "type": null
                    },
                    "waitlist_count": {
                        "location": "json",
                        "type": null
                    },
                    "created": {
                        "location": "json",
                        "type": null
                    },
                    "plain_text_description": {
                        "location": "json",
                        "type": null
                    },
                    "how_to_find_us": {
                        "location": "json",
                        "type": null
                    },
                    "swagger_type": {
                        "location": "json",
                        "type": null
                    },
                    "photo_album": {
                        "location": "json",
                        "type": "object"
                    },
                    "rsvpable": {
                        "location": "json",
                        "type": null
                    },
                    "rsvp_sample": {
                        "location": "json",
                        "type": "object"
                    },
                    "series": {
                        "location": "json",
                        "type": "object"
                    },
                    "name": {
                        "location": "json",
                        "type": null
                    },
                    "self": {
                        "location": "json",
                        "type": "object"
                    },
                    "time": {
                        "location": "json",
                        "type": null
                    },
                    "updated": {
                        "location": "json",
                        "type": null
                    },
                    "status": {
                        "location": "statusCode",
                        "type": "integer"
                    }
                },
                "location": null,
                "items": null
            }
        },
        "GetSelfGroups": {
            "type": "array",
            "properties": [],
            "location": "json",
            "items": {
                "type": "object",
                "properties": {
                    "country": {
                        "location": "json",
                        "type": null
                    },
                    "pending_members": {
                        "location": "json",
                        "type": null
                    },
                    "city": {
                        "location": "json",
                        "type": null
                    },
                    "similar_groups": {
                        "location": "json",
                        "type": "object"
                    },
                    "timezone": {
                        "location": "json",
                        "type": null
                    },
                    "link": {
                        "location": "json",
                        "type": null
                    },
                    "description": {
                        "location": "json",
                        "type": null
                    },
                    "lon": {
                        "location": "json",
                        "type": null
                    },
                    "welcome_message": {
                        "location": "json",
                        "type": null
                    },
                    "is_simplehtml": {
                        "location": "json",
                        "type": null
                    },
                    "group_photo": {
                        "location": "json",
                        "type": "object"
                    },
                    "photos": {
                        "location": "json",
                        "type": "object"
                    },
                    "short_link": {
                        "location": "json",
                        "type": null
                    },
                    "event_sample": {
                        "location": "json",
                        "type": "object"
                    },
                    "join_mode": {
                        "location": "json",
                        "type": null
                    },
                    "approved": {
                        "location": "json",
                        "type": null
                    },
                    "contributions": {
                        "location": "json",
                        "type": "object"
                    },
                    "members": {
                        "location": "json",
                        "type": null
                    },
                    "state": {
                        "location": "json",
                        "type": null
                    },
                    "simple_html_description": {
                        "location": "json",
                        "type": null
                    },
                    "id": {
                        "location": "json",
                        "type": null
                    },
                    "urlname": {
                        "location": "json",
                        "type": null
                    },
                    "membership_dues": {
                        "location": "json",
                        "type": "object"
                    },
                    "lat": {
                        "location": "json",
                        "type": null
                    },
                    "next_event": {
                        "location": "json",
                        "type": "object"
                    },
                    "list_mode": {
                        "location": "json",
                        "type": null
                    },
                    "photo_gradient": {
                        "location": "json",
                        "type": "object"
                    },
                    "ga_code": {
                        "location": "json",
                        "type": null
                    },
                    "localized_country_name": {
                        "location": "json",
                        "type": null
                    },
                    "join_info": {
                        "location": "json",
                        "type": "object"
                    },
                    "visibility": {
                        "location": "json",
                        "type": null
                    },
                    "topics": {
                        "location": "json",
                        "type": "object"
                    },
                    "created": {
                        "location": "json",
                        "type": null
                    },
                    "key_photo": {
                        "location": "json",
                        "type": "object"
                    },
                    "plain_text_description": {
                        "location": "json",
                        "type": null
                    },
                    "list_addr": {
                        "location": "json",
                        "type": null
                    },
                    "organizer": {
                        "location": "json",
                        "type": "object"
                    },
                    "leads": {
                        "location": "json",
                        "type": null
                    },
                    "last_event": {
                        "location": "json",
                        "type": "object"
                    },
                    "name": {
                        "location": "json",
                        "type": null
                    },
                    "member_cap": {
                        "location": "json",
                        "type": null
                    },
                    "self": {
                        "location": "json",
                        "type": "object"
                    },
                    "category": {
                        "location": "json",
                        "type": "object"
                    },
                    "who": {
                        "location": "json",
                        "type": null
                    },
                    "status": {
                        "location": "statusCode",
                        "type": "integer"
                    }
                },
                "location": null,
                "items": null
            }
        },
        "GetStatus": {
            "type": "array",
            "properties": [],
            "location": "json",
            "items": {
                "type": "object",
                "properties": {
                    "title": {
                        "location": "json",
                        "type": null
                    },
                    "message": {
                        "location": "json",
                        "type": null
                    },
                    "swagger_type": {
                        "location": "json",
                        "type": null
                    },
                    "status": {
                        "location": "statusCode",
                        "type": "integer"
                    }
                },
                "location": null,
                "items": null
            }
        }
    }
}
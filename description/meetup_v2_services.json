{
    "name": "Meetup",
    "apiVersion": 2,
    "description": "Meetup API v2 methods",
    "operations": {
        "CreateEvent": {
            "version": "2",
            "name": "CreateEvent",
            "httpMethod": "POST",
            "parameters": {
                "rsvp_limit": {
                    "location": "query",
                    "required": false,
                    "description": "Total number of RSVPs available for the event"
                },
                "rsvp_open": {
                    "location": "query",
                    "required": false,
                    "description": "Users with permission may set the RSVP open time for the event. The time may be specified in milliseconds since the epoch, or relative to the current time in the d/w/m format."
                },
                "venue_visibility": {
                    "location": "query",
                    "required": false,
                    "description": "Controls the visibility of the event venue for non members of the hosting group. May be one of \"public\" or \"members\""
                },
                "hosts": {
                    "location": "query",
                    "required": false,
                    "description": "Up to 5 comma-separated valid member ids to be hosts for the event. If hosts is not provided, the authorized member is the default host"
                },
                "question_{index}": {
                    "location": "query",
                    "required": false,
                    "description": "Those with permission may include up to 6 survey questions for the event with each being up to 250 characters. See the parameter notes section for more information"
                },
                "group_urlname": {
                    "location": "query",
                    "required": false,
                    "description": "URL name of the Group hosting the event"
                },
                "why": {
                    "location": "query",
                    "required": false,
                    "description": "We should do this because... May not be longer than 250 characters."
                },
                "description": {
                    "location": "query",
                    "required": false,
                    "description": "Longer description of the event, in HTML. May not be longer than 50000 characters."
                },
                "how_to_find_us": {
                    "location": "query",
                    "required": false,
                    "description": "The information provided by the event host for \"How will members find you there?\". Visible when location is visible to the authenticated member"
                },
                "group_id": {
                    "location": "query",
                    "required": false,
                    "description": "Group hosting the event"
                },
                "rsvp_close": {
                    "location": "query",
                    "required": false,
                    "description": "Users with permission may set the RSVP close time for the event. The time may be specified in milliseconds since the epoch, or relative to the current time in the d/w/m format."
                },
                "duration": {
                    "location": "query",
                    "required": false,
                    "description": "Event duration in milliseconds. When not specified, a default of 3 hours may be assumed by applications. To clear event duration, set this to 0"
                },
                "name": {
                    "location": "query",
                    "required": false,
                    "description": "Name of the event. May not be longer than 80 characters."
                },
                "guest_limit": {
                    "location": "query",
                    "required": false,
                    "description": "Number of guests members may include in their RSVP, 0 or more"
                },
                "simple_html_description": {
                    "location": "query",
                    "required": false,
                    "description": "Description of the event, in simple HTML format. This value is translated to HTML to update the description. May not be longer than 50000 characters."
                },
                "time": {
                    "location": "query",
                    "required": false,
                    "description": "Event start time in milliseconds since the epoch, or relative to the current time in the d/w/m format."
                },
                "venue_id": {
                    "location": "query",
                    "required": false,
                    "description": "Numeric identifier of a venue"
                },
                "publish_status": {
                    "location": "query",
                    "required": false,
                    "description": "If you are an organizer of the group, you may set this to \"draft\" to save the event as a draft. Doing so will require a status=draft filter on /2/event queries."
                }
            },
            "summary": "",
            "uri": "/2/event",
            "notes": "All required parameters must be supplied. This method requires parameters encoded in application/x-www-form-urlencoded format as an HTTP POST.\n\nSurvey questions may be submitted in the format \"question_{index}=questiontext\" where \"index\" is an integer representing the order the questions should be presented in. e.g. question_0=question1&question_1=question2.\n\nOrganizers of the hosting group may optionally save this event as a draft by setting \"publish_status\" to \"draft\". Drafts are then discoverable using the [/2/events](/meetup_api/docs/2/events) API setting the \"status\" request parameter to \"draft\"",
            "response": null,
            "tag": "create",
            "responseModel": "CreateEvent"
        },
        "CreateEventComment": {
            "version": "2",
            "name": "CreateEventComment",
            "httpMethod": "POST",
            "parameters": {
                "comment": {
                    "location": "query",
                    "required": false,
                    "description": "The comment text"
                },
                "in_reply_to": {
                    "location": "query",
                    "required": false,
                    "description": "If this comment is a reply, the ID of the comment being replied to"
                },
                "notifications": {
                    "location": "query",
                    "required": false,
                    "description": "Notification control for authorized member on this comment thread. \"on\" will result in notifications being sent. \"off\" will opt the member out of notifications for this comment thread. Defaults to \"on\" unless the member previous opted out of notifications on the thread."
                },
                "event_id": {
                    "location": "query",
                    "required": false,
                    "description": "The event related to this comment."
                }
            },
            "summary": "This method posts messages that appear under \"Talk about this Meetup\".",
            "uri": "/2/event_comment",
            "notes": "All of the required parameters must be supplied with the request, which must be an HTTP POST. The currently authenticated user must be a member of the group hosting the event",
            "response": null,
            "tag": "create",
            "responseModel": "CreateEventComment"
        },
        "CreateEventCommentFlag": {
            "version": "2",
            "name": "CreateEventCommentFlag",
            "httpMethod": "POST",
            "parameters": {
                "comment_id": {
                    "location": "query",
                    "required": false,
                    "description": "The id of the comment"
                },
                "reason": {
                    "location": "query",
                    "required": false,
                    "description": "Reason for flagging the comment. May be one of inappropriate, spam"
                }
            },
            "summary": "This method creates a spam report for comment content",
            "uri": "/2/event_comment_flag",
            "notes": "All required parameters must be supplied.",
            "response": null,
            "tag": "create",
            "responseModel": "CreateEventCommentFlag"
        },
        "CreateEventRating": {
            "version": "2",
            "name": "CreateEventRating",
            "httpMethod": "POST",
            "parameters": {
                "attendee_count": {
                    "location": "query",
                    "required": false,
                    "description": "DEPRECATED: The number of attendees for the event (organizers/assistant organizers/co-organizers/event organizers/event hosts only)"
                },
                "rating": {
                    "location": "query",
                    "required": false,
                    "description": "The member's rating (either 1, 2, 3, 4, or 5)"
                },
                "event_id": {
                    "location": "query",
                    "required": false,
                    "description": "The ID of the event to fetch ratings data for"
                }
            },
            "summary": "This method allows members to posts rating for an event after it's occurred. Only permitted for members who rsvp'd \"yes\" or \"maybe\" to the event",
            "uri": "/2/event_rating",
            "notes": null,
            "response": {
                "rating": "The overall average rating of the event",
                "event_id": "The string ID of the event",
                "time": "The time that the event was created",
                "group_id": "The ID of the group",
                "rating_count": "The number of reviews posted for the event"
            },
            "tag": null,
            "responseModel": "CreateEventRating"
        },
        "CreateGroupPhoto": {
            "version": "2",
            "name": "CreateGroupPhoto",
            "httpMethod": "POST",
            "parameters": {
                "await": {
                    "location": "query",
                    "required": false,
                    "description": "If true, this ensures a response will not be returned until the upload is accessible"
                },
                "main": {
                    "location": "query",
                    "required": false,
                    "description": "Set to 'true' to have this photo become the group's main photo. Set it to 'false' otherwise. Defaults to true"
                },
                "group_id": {
                    "location": "query",
                    "required": false,
                    "description": "Group ID for the target group. This may be used as an alternative to group_urlname"
                },
                "photo": {
                    "location": "query",
                    "required": false,
                    "description": "The photo, encoded as multipart/form-data. The maximum file size allowed is 10MB"
                },
                "group_urlname": {
                    "location": "query",
                    "required": false,
                    "description": "Group urlname. This may be used as an alternative to group_id"
                }
            },
            "summary": "Uploads a new Meetup Group photo. To change other Group settings use the [Group Edit](/meetup_api/docs/:urlname/#edit) endpoint",
            "uri": "/2/group_photo",
            "notes": "The request must be a POST of content-type multipart/form-data. The supplied photo will be added to the provided groups general photo album. If authenticating with OAuth, no parameters in the multipart form data should be included in the signature base string. You must be an organizer of the group in order to load a photo.",
            "response": {
                "photo_url": "Link to the uploaded group photo (same as in the Location header).",
                "title": "Request Completed",
                "group_photo_id": "Unique identifier of this photo "
            },
            "tag": "create",
            "responseModel": "CreateGroupPhoto"
        },
        "CreateMemberPhoto": {
            "version": "2",
            "name": "CreateMemberPhoto",
            "httpMethod": "POST",
            "parameters": {
                "await": {
                    "location": "query",
                    "required": false,
                    "description": "If true, this ensures a response will not be returned until the upload is accessible"
                },
                "main": {
                    "location": "query",
                    "required": false,
                    "description": "Set to \"true\" to have this photo become the member's main profile photo. Otherwise, it will become the main photo only when none other is selected. If the authenticated member does not already have a main profile photo set it will remain so."
                },
                "sync_matching_photo": {
                    "location": "query",
                    "required": false,
                    "description": "When set to true and main is set to true, this will replace all group profile photos matching the current photo with the provided replacement"
                },
                "photo": {
                    "location": "query",
                    "required": false,
                    "description": "The photo, encoded as multipart/form-data. The maximum file size allowed is 10MB"
                },
                "sync_photo": {
                    "location": "query",
                    "required": false,
                    "description": "When set to true, this parameter will sync all of the group profile photos for the member with the provided photo_id"
                }
            },
            "summary": "Uploads a photo to be associated with a Member",
            "uri": "/2/member_photo",
            "notes": "The request must be a POST of content-type multipart/form-data. The supplied photo will be added to the currently authenticated user's member profile. If authenticating with OAuth, no parameters in the multipart form data should be included in the signature base string.",
            "response": {
                "photo_url": "Link to the uploaded member photo (same as in the Location header).",
                "title": "Request Completed",
                "member_photo_id": "Unique identifier of this photo "
            },
            "tag": "create",
            "responseModel": "CreateMemberPhoto"
        },
        "CreatePhoto": {
            "version": "2",
            "name": "CreatePhoto",
            "httpMethod": "POST",
            "parameters": {
                "await": {
                    "location": "query",
                    "required": false,
                    "description": "If true, this ensures a response will not be returned until the upload is accessible"
                },
                "caption": {
                    "location": "query",
                    "required": false,
                    "description": "Caption for the photo"
                },
                "photo_album_id": {
                    "location": "query",
                    "required": false,
                    "description": "Identifier of an existing photo album, which may be an event or group album"
                },
                "photo": {
                    "location": "query",
                    "required": false,
                    "description": "The photo, encoded as multipart/form-data. The maximum file size allowed is 10MB"
                },
                "event_id": {
                    "location": "query",
                    "required": false,
                    "description": "Identifier of an event. If there is no album for this event, one will be created."
                }
            },
            "summary": "Uploads a photo for a given event",
            "uri": "/2/photo",
            "notes": "A photo album or event ID must be supplied with the request, which must be a POST of content-type `multipart/form-data`. The currently authenticated user must be a member of the group that is hosting the event. Parameters other than photo may be passed in as a query string or within the posted content. If authenticating with OAuth, no parameters in the multipart form data should be included in the signature base string",
            "response": {
                "site_link": "URL for photo in photo album on meetup.com",
                "event_photo_id": "Unique identifier of this photo",
                "created": "Created time in milliseconds since the epoch",
                "member": [
                    "Member that uploaded the photo",
                    {
                        "member_id": "Identifier of member",
                        "name": "Name of member"
                    }
                ],
                "album_id": "Identifier of the photo's  album",
                "photo_url": "Link to the uploaded event photo (same as in the Location header).",
                "title": "Request Completed",
                "updated": "Last updated time in milliseconds since the epoch"
            },
            "tag": "create",
            "responseModel": "CreatePhoto"
        },
        "CreatePhotoAlbum": {
            "version": "2",
            "name": "CreatePhotoAlbum",
            "httpMethod": "POST",
            "parameters": {
                "group_id": {
                    "location": "query",
                    "required": false,
                    "description": "Group to create the album in"
                },
                "title": {
                    "location": "query",
                    "required": false,
                    "description": " Title of the new album"
                }
            },
            "summary": "This method creates photo albums within a Meetup group",
            "uri": "/2/photo_album",
            "notes": "All of the required parameters must be supplied with the request, which must be an HTTP POST. The currently authenticated user must be an organizer (main, assistant, or co-) of the specified group",
            "response": null,
            "tag": null,
            "responseModel": "CreatePhotoAlbum"
        },
        "CreatePhotoComment": {
            "version": "2",
            "name": "CreatePhotoComment",
            "httpMethod": "POST",
            "parameters": {
                "photo_id": {
                    "location": "query",
                    "required": false,
                    "description": "The photo related to this comment."
                },
                "comment": {
                    "location": "query",
                    "required": false,
                    "description": "The comment text"
                }
            },
            "summary": "This method posts comments that appear below photos",
            "uri": "/2/photo_comment",
            "notes": "All of the required parameters must be supplied with the request, which must be an HTTP POST. The currently authenticated user must be a member of the group hosting the photo",
            "response": null,
            "tag": null,
            "responseModel": "CreatePhotoComment"
        },
        "CreateProfile": {
            "version": "2",
            "name": "CreateProfile",
            "httpMethod": "POST",
            "parameters": {
                "site_name": {
                    "location": "query",
                    "required": false,
                    "description": "Name of member's site. Max length is 32"
                },
                "photo_id": {
                    "location": "query",
                    "required": false,
                    "description": "photo_id of the photo to use for this profile"
                },
                "site_url": {
                    "location": "query",
                    "required": false,
                    "description": "Link to member's site. Max length is 80"
                },
                "group_urlname": {
                    "location": "query",
                    "required": false,
                    "description": "Urlname of group to join"
                },
                "intro": {
                    "location": "query",
                    "required": false,
                    "description": "Provides a Member an opportunity to tell the group about themselves"
                },
                "new_photo": {
                    "location": "query",
                    "required": false,
                    "description": "file upload for a new member photo"
                },
                "group_id": {
                    "location": "query",
                    "required": false,
                    "description": "Id of group to join"
                },
                "answer_{qid}": {
                    "location": "query",
                    "required": false,
                    "description": "Answers to questions from groups API join_info question fields"
                }
            },
            "summary": "This method allows an authenticated member to join a group by creating a profile",
            "uri": "/2/profile",
            "notes": "This method requires an HTTP POST. All required parameters must be supplied. An intro and answers may be required based on the group the member is joining. To find out if a group requires an intro or answers to questions, query for the group through one of the [Groups methods](/meetup_api/docs/2/groups) providing setting the __fields__ parameter to __join_info__ and inspecting the __join_info__ in the results. Answers to the questions must be named using the convention __answer_{question_id}__.",
            "response": null,
            "tag": "create",
            "responseModel": "CreateProfile"
        },
        "CreateRsvp": {
            "version": "2",
            "name": "CreateRsvp",
            "httpMethod": "POST",
            "parameters": {
                "rsvp": {
                    "location": "query",
                    "required": false,
                    "description": "The RSVP setting - value must be either \"yes\", \"no\" or \"waitlist\""
                },
                "member_id": {
                    "location": "query",
                    "required": false,
                    "description": " Organizers and event hosts may RSVP on behalf of a member by specifying an ID here. As when editing RSVPs on the site, organizers may enter a \"yes\" for a member even if the event requires payment."
                },
                "comments": {
                    "location": "query",
                    "required": false,
                    "description": "A comment to post along with the RSVP"
                },
                "event_id": {
                    "location": "query",
                    "required": false,
                    "description": "The event that you are RSVP'ing to"
                },
                "guests": {
                    "location": "query",
                    "required": false,
                    "description": "Number of guests also coming to the event."
                },
                "opt_to_pay": {
                    "location": "query",
                    "required": false,
                    "description": "For events with fees, the authorized member may opt to pay as part of the RSVP request. This may be set to true or false"
                },
                "answer_{qid}": {
                    "location": "query",
                    "required": false,
                    "description": "Answers to event survey questions. Answers may not be longer than 250 characters. Organizers and hosts my not edit or create answers on behalf of members"
                },
                "agree_to_refund": {
                    "location": "query",
                    "required": false,
                    "description": "For events with fees, the authorized member must agree to the event's refund policy. This must be set to either true or false"
                }
            },
            "summary": "Creates or updates an existing RSVP",
            "uri": "/2/rsvp",
            "notes": "At least one of the required parameter(s) must be supplied with the request.\n\nThe RSVP is recorded for the currently authenticated member account, unless a member_id is supplied, in which case the authenticated member must have permissions to edit the event or a host.\n\nMember's RSVP'ing as themselves may supply answers to a Meetup event's survey questions by supplying answers as request parameters corresponding to question ids in the format `answer_{question_id}`. To discover available Meetup event survey questions, supply the [Events 2](/meetup_api/docs/2/events/) method with the 'fields' parameter set to 'survey_questions'.\n\nRepeated attempts to RSVP to the same event given the same member credentials will result in an update to previous RSVP. The state of the event may or may not allow for this update to occur depending on the organizer-defined constraints and pre-requisites for the event.\n\nNote: waitlist responses may be coerced into yes responses when there is space available and yes responses may be coerced into waitlist response when space is not.\n\nIf the event requires payment you are required to send an \"agree_to_refund\" parameter set to the true or false. This represents the authorized members agreement to understanding the event's refund policy.\n",
            "response": {
                "venue": [
                    "Venue, if selected and not hidden",
                    {
                        "zip": "ZIP code if, venue is in US or Canada",
                        "lat, lon": "Geographic coordinates of venue",
                        "localized_country_name": "Name of country the city belongs to",
                        "phone": "Phone number of venue",
                        "address_1": "Line 1 of venue address",
                        "city, state, country": "City, Country Code and if in US state of venue",
                        "address_2": "Line 2 of venue address",
                        "address_3": "Line 3 of venue address",
                        "name": "Venue name",
                        "id": "Venue id",
                        "repinned": "true if the editor of the event altered the original venues pin location, false otherwise"
                    }
                ],
                "comments": "The message that the member provided when RSVP was made",
                "payment_redirect": "If the event RSVP'd to requires online payment and a yes response was accepted, this field will contain a payment URL you should redirect the authenticated member to in order to complete the online payment",
                "created": "Creation time of the RSVP, in milliseconds since the epoch.",
                "member_photo": [
                    "Rsvping Member's photo",
                    {
                        "highres_link": "URL for the photo at its maximum size",
                        "photo_id": "Photo ID",
                        "photo_link": "URL for a standard size of the photo",
                        "thumb_link": "URL for a thumbnail of the photo"
                    }
                ],
                "answers": [
                    "List of answers to event survey questions asked when the member RSVP'd in the order asked, only available to organizers and assistant organizers. By default, this field returns a list of strings answers. You can request more structured answer info including the time the answer was updated, by setting fields=answer_info in the request",
                    {
                        "question": "The text of the question asked of the member",
                        "answer": "The members provided answer to the question",
                        "question_id": "The unique id of the question answered",
                        "updated": "The time the answer was last modified in milliseconds since the epoch"
                    }
                ],
                "rsvp_id": "The RSVP id. May be -1 for events scheduled in the future",
                "mtime": "Last modified time of the RSVP, in milliseconds since the epoch.",
                "pay_status": "The RSVPer's payment status if the event has an associated fee. Returned only for organizers when 'pay_status' is requested with the fields parameter. This may be one of 'none', 'paid', 'partially_paid', 'payment_pending', 'echeck_pending', 'refund_pending', 'partially_refunded', 'refunded', 'exempt'.",
                "response": "\"yes\", \"no\", \"waitlist\" or \"yes_pending_payment\" which is the response returned after RSVPing \"yes\" to an event that requires payment.",
                "tallies": [
                    "The current set of counts for RSVPs",
                    {
                        "no": "Number of no rsvps",
                        "maybe": "Number of maybe rsvps",
                        "yes": "Number of yes rsvps"
                    }
                ],
                "host": "Optional field, `true` if RSVP is for an event host",
                "member": [
                    "Member who RSVP'd",
                    {
                        "member_id": "Member's ID",
                        "other_services": [
                            "Third-party services associated with the member account",
                            {
                                "[service-name]": [
                                    "This element is flickr, tumblr, twitter, or linkedin",
                                    {
                                        "identifier": "identifier for the service, a username or URL"
                                    }
                                ]
                            }
                        ],
                        "member_state": "Optional field",
                        "member_city": "Optional field",
                        "name": "Name of the member",
                        "bio": "Optional field returned when appending \"member_bio\" to the \"fields\" parameter. Contains the member's group \"introduction\"",
                        "member_country": "Optional field"
                    }
                ],
                "guests": "Number of guests the RSVP'd member will be bringing",
                "event": [
                    "The event associated with the RSVP",
                    {
                        "name": "Name of the event",
                        "id": "String ID of the event",
                        "time": "UTC start time of the event, in milliseconds since the epoch",
                        "event_url": "URL of the event's page on meetup.com"
                    }
                ],
                "attendance_status": "Represents an attendance status for this RSVP, returned when 'attendance_status' is requested with the fields parameter and when the authorized member has permission to take attendance. Value may be 'attended' when marked attending, 'absent' when marked absent or 'noshow' when marked noshow",
                "group": [
                    "Group hosting the event",
                    {
                        "join_mode": "\"open\", \"approval\", or \"closed\"",
                        "created": "Date and time that the group was founded, in milliseconds since the epoch",
                        "name": "Group name",
                        "group_lon": "Approximate group longitude",
                        "id": "Group id",
                        "urlname": "Group URL name",
                        "group_lat": "Approximate group latitude",
                        "who": "What the group calls its members"
                    }
                ]
            },
            "tag": "create",
            "responseModel": "CreateRsvp"
        },
        "DeleteEvent": {
            "version": "2",
            "name": "DeleteEvent",
            "httpMethod": "DELETE",
            "parameters": {
                "id": {
                    "location": "uri",
                    "required": true,
                    "description": null
                }
            },
            "summary": "Deletes a specified meetup",
            "uri": "/2/event/{id}",
            "notes": "Only authorization parameters are needed.",
            "response": null,
            "tag": "delete",
            "responseModel": "DeleteEvent"
        },
        "DeleteEventComment": {
            "version": "2",
            "name": "DeleteEventComment",
            "httpMethod": "DELETE",
            "parameters": {
                "id": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "fields": {
                    "location": "query",
                    "required": false,
                    "description": "comma-separate list of optional fields"
                }
            },
            "summary": "Delete a single event comment or reply",
            "uri": "/2/event_comment/{id}",
            "notes": "Only authorization parameters are needed.",
            "response": null,
            "tag": "delete",
            "responseModel": "DeleteEventComment"
        },
        "DeleteEventCommentLike": {
            "version": "2",
            "name": "DeleteEventCommentLike",
            "httpMethod": "DELETE",
            "parameters": {
                "id": {
                    "location": "uri",
                    "required": true,
                    "description": null
                }
            },
            "summary": "Unlike a given Event comment",
            "uri": "/2/event_comment_like/{id}",
            "notes": "Only authorization parameters are needed. :id in the path should be the id of the comment you are unliking",
            "response": null,
            "tag": "delete",
            "responseModel": "DeleteEventCommentLike"
        },
        "DeleteEventCommentSubscribe": {
            "version": "2",
            "name": "DeleteEventCommentSubscribe",
            "httpMethod": "DELETE",
            "parameters": {
                "id": {
                    "location": "uri",
                    "required": true,
                    "description": null
                }
            },
            "summary": "Unsubscribe to notifications for updates to a given comment thread",
            "uri": "/2/event_comment_subscribe/{id}",
            "notes": "Only authorization parameters are needed. :id in the path should be the id of comment being replied to which you are unsubscribing to notifications from",
            "response": null,
            "tag": "delete",
            "responseModel": "DeleteEventCommentSubscribe"
        },
        "DeleteMemberPhoto": {
            "version": "2",
            "name": "DeleteMemberPhoto",
            "httpMethod": "DELETE",
            "parameters": {
                "id": {
                    "location": "uri",
                    "required": true,
                    "description": null
                }
            },
            "summary": "Delete the specified member photo",
            "uri": "/2/member_photo/{id}",
            "notes": "Only authorization parameters are needed. Authorized user must be the member owning the photo",
            "response": null,
            "tag": "delete",
            "responseModel": "DeleteMemberPhoto"
        },
        "DeletePhoto": {
            "version": "2",
            "name": "DeletePhoto",
            "httpMethod": "DELETE",
            "parameters": {
                "id": {
                    "location": "uri",
                    "required": true,
                    "description": null
                }
            },
            "summary": "Deletes a specified event photo",
            "uri": "/2/photo/{id}",
            "notes": "Only authorization parameters are needed. Authorized user must be the original poster of the photo or the organizer of the group the photo was posted in",
            "response": null,
            "tag": "delete",
            "responseModel": "DeletePhoto"
        },
        "DeleteProfile": {
            "version": "2",
            "name": "DeleteProfile",
            "httpMethod": "DELETE",
            "parameters": {
                "gid": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "mid": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "exit_comment": {
                    "location": "query",
                    "required": false,
                    "description": "Optional message to the organizer when leaving"
                }
            },
            "summary": "Deletes a member's group profile",
            "uri": "/2/profile/{gid}/{mid}",
            "notes": "All parameters are optional. Only the authorized member is permitted leave groups they do not organize. This method may not be used by organizers to remove members.",
            "response": null,
            "tag": "delete",
            "responseModel": "DeleteProfile"
        },
        "EditEvent": {
            "version": "2",
            "name": "EditEvent",
            "httpMethod": "POST",
            "parameters": {
                "id": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "lat": {
                    "location": "query",
                    "required": false,
                    "description": "Updates to the venue's latitude and longitude. When present, both must be provided"
                },
                "lon": {
                    "location": "query",
                    "required": false,
                    "description": "Updates to the venue's latitude and longitude. When present, both must be provided"
                },
                "rsvp_limit": {
                    "location": "query",
                    "required": false,
                    "description": "Total number of RSVPs available for the event. To remove this limit, set this to 0"
                },
                "rsvp_open": {
                    "location": "query",
                    "required": false,
                    "description": "Users with permission may set the RSVP open time for the event. The time may be specified in milliseconds since the epoch, or relative to the current time in the d/w/m format."
                },
                "venue_visibility": {
                    "location": "query",
                    "required": false,
                    "description": "Controls the visibility of venue. May be one of \"public\" or \"members\""
                },
                "hosts": {
                    "location": "query",
                    "required": false,
                    "description": "Up to 5 valid member ids to be hosts for the event."
                },
                "question_{index}": {
                    "location": "query",
                    "required": false,
                    "description": "Those with permission may include up to 6 survey questions with each being up to 250 characters, including edited questions, for the event. See the parameter notes section for more information"
                },
                "why": {
                    "location": "query",
                    "required": false,
                    "description": "We should do this because... May not be longer than 250 characters."
                },
                "description": {
                    "location": "query",
                    "required": false,
                    "description": "Longer description of the event, in HTML. May not be longer than 50000 characters."
                },
                "how_to_find_us": {
                    "location": "query",
                    "required": false,
                    "description": "The information provided by the event host for \"How will members find you there?\". Visible when location is visible to the authenticated member"
                },
                "rsvp_close": {
                    "location": "query",
                    "required": false,
                    "description": "Users with permission may set the RSVP close time for the event. The time may be specified in milliseconds since the epoch, or relative to the current time in the d/w/m format. To unset rsvp_close, set this to 0"
                },
                "announce": {
                    "location": "query",
                    "required": false,
                    "description": "Organizers and hosts may set this to true to announce a Meetup."
                },
                "duration": {
                    "location": "query",
                    "required": false,
                    "description": "Event duration in milliseconds. When not specified, a default of 3 hours may be assumed by applications. To clear event duration, set this to 0"
                },
                "group_id": {
                    "location": "query",
                    "required": false,
                    "description": "Group to hold the event"
                },
                "name": {
                    "location": "query",
                    "required": false,
                    "description": "Event name. May not be longer than 80 characters."
                },
                "guest_limit": {
                    "location": "query",
                    "required": false,
                    "description": "number of guests members may include in their RSVP, 0 or more"
                },
                "simple_html_description": {
                    "location": "query",
                    "required": false,
                    "description": "Description of the event, in simple HTML format. This value is translated to HTML to update the description. May not be longer than 50000 characters."
                },
                "time": {
                    "location": "query",
                    "required": false,
                    "description": "event start time in milliseconds since the epoch, or relative to the current time in the d/w/m format."
                },
                "question_edit_{id}": {
                    "location": "query",
                    "required": false,
                    "description": "Those with permission may include up to 6 survey questions with each being up to 250 characters, including new questions. To delete a question submit this parameter with an empty value"
                },
                "venue_id": {
                    "location": "query",
                    "required": false,
                    "description": "Numeric identifier of a venue. To unset the event's venue, set this to 0"
                },
                "publish_status": {
                    "location": "query",
                    "required": false,
                    "description": "If you are an organizer of the group, you may set this to \"draft\" or \"published\". Setting state to \"draft\" will require a status=draft filter on /2/event queries."
                }
            },
            "summary": "Update an existing Meetup",
            "uri": "/2/event/{id}",
            "notes": "All parameters are optional. This method requires an HTTP POST.\n\nIf a lat & lon are provided, the event's venue will be updated accordingly.\n\nSurvey questions may be submitted in the format \"question_{index}=questiontext\" where \"index\" is an integer representing the order the questions should be presented in. e.g. question_0=question1&question_1=question2.\n\nTo view existing survey questions supply the request parameter fields=survey_questions with the [Event Get](#get) To edit questions you may submit questions in the format \"question_edit_{id}=updatedquestion\" where id is the id of the question. To clear an existing question for the event survey, just submit question_edit_{id} with an empty value.\n\nOrganizers may publish a draft event by posting with the \"publish_status\" request parameter set to \"published\". Organizers and hosts of the event may also optionally announce an unannounced event by posting with the \"announce\" request parameter set to \"true\"",
            "response": null,
            "tag": "edit",
            "responseModel": "EditEvent"
        },
        "EditEventCommentLike": {
            "version": "2",
            "name": "EditEventCommentLike",
            "httpMethod": "POST",
            "parameters": {
                "id": {
                    "location": "uri",
                    "required": true,
                    "description": null
                }
            },
            "summary": "Like a given Event comment",
            "uri": "/2/event_comment_like/{id}",
            "notes": "Only authorization parameters are needed. :id in the path should be the id of the comment you are liking",
            "response": null,
            "tag": "create",
            "responseModel": "EditEventCommentLike"
        },
        "EditEventCommentSubscribe": {
            "version": "2",
            "name": "EditEventCommentSubscribe",
            "httpMethod": "POST",
            "parameters": {
                "id": {
                    "location": "uri",
                    "required": true,
                    "description": null
                }
            },
            "summary": "Subscribe to notifications on updates to a given comment thread",
            "uri": "/2/event_comment_subscribe/{id}",
            "notes": "Only authorization parameters are needed. :id in the path should be id of comment being replied to which you are subscribing to notifications for",
            "response": null,
            "tag": "edit",
            "responseModel": "EditEventCommentSubscribe"
        },
        "EditMember": {
            "version": "2",
            "name": "EditMember",
            "httpMethod": "POST",
            "parameters": {
                "id": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "birthday": {
                    "location": "query",
                    "required": false,
                    "description": "Day you were born. Format should be in the form of yyyy or mmddyyyy. A value of -1 indicates that birthday data should be cleared."
                },
                "zip": {
                    "location": "query",
                    "required": false,
                    "description": "Valid zip code for city"
                },
                "country": {
                    "location": "query",
                    "required": false,
                    "description": "Valid country code for your location"
                },
                "hometown": {
                    "location": "query",
                    "required": false,
                    "description": "Hometown of member. Can not be longer than 64 characters"
                },
                "remove_topics": {
                    "location": "query",
                    "required": false,
                    "description": "Comma-delimited list of topic ids to remove from your alert list"
                },
                "gender": {
                    "location": "query",
                    "required": false,
                    "description": "Your gender (used for better recommendations). Value may be one of other, none, female, male"
                },
                "photo_id": {
                    "location": "query",
                    "required": false,
                    "description": "A valid photo_id from the member's photos to set as the main profile photo. A value of 0 will unset the current photo"
                },
                "city": {
                    "location": "query",
                    "required": false,
                    "description": "City name for your location"
                },
                "topics_privacy": {
                    "location": "query",
                    "required": false,
                    "description": "Controls the visibility of the member's topics. May be one of visible, hidden"
                },
                "facebook_privacy": {
                    "location": "query",
                    "required": false,
                    "description": "Controls the visibility of the member's facebook connection. May be one of visible, hidden. If the member has not connected their Facebook account, attempts to set this preference will do nothing."
                },
                "bio": {
                    "location": "query",
                    "required": false,
                    "description": "Free form text passage about you. must be less than 250 characters"
                },
                "lon": {
                    "location": "query",
                    "required": false,
                    "description": "longitude of city"
                },
                "groups_privacy": {
                    "location": "query",
                    "required": false,
                    "description": "Controls the visibility of the member's groups. May be one of visible, hidden"
                },
                "add_topics": {
                    "location": "query",
                    "required": false,
                    "description": "Comma-delimited list of topics ids to add to your alert list"
                },
                "sync_photo": {
                    "location": "query",
                    "required": false,
                    "description": "When set to true, this parameter will sync all of the group profile photos for the member with the provided photo_id"
                },
                "name": {
                    "location": "query",
                    "required": false,
                    "description": "The name of the current member"
                },
                "bio_privacy": {
                    "location": "query",
                    "required": false,
                    "description": "Controls the visibility of the member's bio. May be one of visible, hidden"
                },
                "photos_privacy": {
                    "location": "query",
                    "required": false,
                    "description": "Controls the visibility of the member's photos. May be one of visible, hidden"
                },
                "lang": {
                    "location": "query",
                    "required": false,
                    "description": "Language preference used on the site. Valid values are en-us, en-au, de-de, es, es-es, fr-fr, it-it, pt-br, ja-jp, nl-nl, ko-kr, pl-pl, th-th, tr-tr, sv-se, en_us, en_au, de_de, es, es_es, fr_fr, it_it, pt_br, ja_jp, nl_nl, ko_kr, pl_pl, th_th, tr_tr, sv_se, en, en, de, es, es, fr, it, pt, ja, nl, ko, pl, th, tr, sv"
                },
                "radius": {
                    "location": "query",
                    "required": false,
                    "description": "radius, in miles to search for city given a lat and lon. default 25.0, max 100.0"
                },
                "lat": {
                    "location": "query",
                    "required": false,
                    "description": "latitude of city"
                },
                "messaging_pref": {
                    "location": "query",
                    "required": false,
                    "description": "This specifies the member's preference for being contacted from members on the site. Possible values are \"orgs_only\" meaning only group organizers can contact you, \"groups_only\" meaning only members of your group can contact you, or \"all_members\" meaning all members may contact you."
                },
                "city_id": {
                    "location": "query",
                    "required": false,
                    "description": "Valid city id from /2/cities method"
                }
            },
            "summary": "Edit the authorized member's attributes",
            "uri": "/2/member/{id}",
            "notes": "This method requires tls. Only the authorized user may edit their own properties. A city may be provided by either a city_id or a combination of lat and lon",
            "response": {
                "birthday": [
                    "If the authorized is the current member, the member's birthday based on provided information",
                    {
                        "month": "Month of birth",
                        "year": "Year of birth",
                        "day": "Day of birth"
                    }
                ],
                "gender": "Optional fields parameter. Members can only see their own gender. May be one of other, none, female, male",
                "link": "URL to the member's profile page on meetup.com",
                "bio": "A description of the member",
                "privacy": [
                    "Optional fields parameter. Defines preferences for visibility of certain attributes only returned for the authenticated member",
                    {
                        "groups": "may be 'hidden' or 'visible'",
                        "bio": "may be 'hidden' or 'visible'",
                        "photos": "may be 'hidden' or 'visible'",
                        "topics": "may be 'hidden' or 'visible'",
                        "facebook": "may be 'hidden' or 'visible'. If absent, the member has not connected their Facebook account to Meetup"
                    }
                ],
                "photos": "List of all the member's photos returned as an array of the representation of the photo property",
                "messagable": "Returned when the \"fields\" parameter is set to \"messaging_pref\". Returns \"true\" if the authenticated member can message them, \"false\" otherwise.",
                "other_services": [
                    "Third-party services associated with the member account",
                    {
                        "[service-name]": [
                            "This element is flickr, tumblr, twitter, or linkedin",
                            {
                                "identifier": "identifier for the service, a username or URL"
                            }
                        ]
                    }
                ],
                "id": "The member's id",
                "photo_url": "Link to the profile photo of the member",
                "lang": "The member's current language preference. Returned only when the member in the response matches the authenticated member",
                "hometown": "Hometown of member",
                "topics": [
                    "A sampling of 50 topics this member has subscribed to. Only appears if the queried user has not hidden them, or if the authenticated and queried user are the same",
                    {
                        "urlkey": "Unique keyword used to identify this topic",
                        "name": "Topic name",
                        "id": "Topic ID"
                    }
                ],
                "joined": "Date and time a member joined in milliseconds since the epoch",
                "photo": [
                    "The member's photo if available",
                    {
                        "highres_link": "URL for the photo at its maximum size",
                        "photo_id": "Photo ID",
                        "photo_link": "URL for a standard size of the photo",
                        "thumb_link": "URL for a thumbnail of the photo"
                    }
                ],
                "reachable": "Optional fields parameter. If querying by group and the authorized member is an organizer the member's group, this will return false when the member's email address is known to bounce and true otherwise",
                "lat, lon": "Latitude and longitude coordinates of the members reported city",
                "membership_count": "Optional field indicating the number of active memberships this member has. If the member has a hidden group preference, this will return 0.",
                "facebook_connection": [
                    "Optional response field. Only returned for the members matching the authenticated member if the authenticated member has connected their Facebook account to their Meetup account",
                    {
                        "status": "The current status of the member's Facebook connection. Status may be one of: 'active', if you have an active Facebook connection or 'inactive', if your previous active connection was deactivated."
                    }
                ],
                "name": "The member's name",
                "visited": "Date and time of member's last activity in milliseconds since the epoch",
                "self": [
                    "Optional field, details particular to the authorized user.",
                    {
                        "common": [
                            "What the authorized user and queried member have in common",
                            {
                                "groups": [
                                    "Groups the members both belong to",
                                    {
                                        "join_mode": "\"open\", \"approval\", or \"closed\"",
                                        "created": "Date and time that the group was founded, in milliseconds since the epoch",
                                        "name": "Group name",
                                        "group_lon": "Approximate group longitude",
                                        "id": "Group id",
                                        "urlname": "Group URL name",
                                        "group_lat": "Approximate group latitude",
                                        "who": "What the group calls its members"
                                    }
                                ],
                                "friends": [
                                    "Members who are Facebook friends with both members",
                                    {
                                        "member_id": "Member's ID",
                                        "name": "Name of the member",
                                        "member_country": "Optional field",
                                        "member_state": "Optional field",
                                        "member_city": "Optional field"
                                    }
                                ]
                            }
                        ],
                        "blocks": "Boolean indicator of whether or not the authorized member has blocked this member. Only returned if fields is set to self_blocks"
                    }
                ],
                "country, city, state": "Country, City, (and for the US, State) the member has provided",
                "messaging_pref": "Returned when the \"fields\" parameter is set to \"messaging_pref\". This specifies the members preference for being contacted from members on the site. Possible values are \"orgs_only\", \"groups_only\", \"all_members\"",
                "status": "The member's status. Currently always 'active' for registered members"
            },
            "tag": "edit",
            "responseModel": "EditMember"
        },
        "EditPhoto": {
            "version": "2",
            "name": "EditPhoto",
            "httpMethod": "POST",
            "parameters": {
                "id": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "caption": {
                    "location": "query",
                    "required": false,
                    "description": "Photo caption of up to 255 characters"
                }
            },
            "summary": "Edits a specified event photo",
            "uri": "/2/photo/{id}",
            "notes": "Only authorization parameters are needed. Authorized user must be the original poster of the photo or the organizer of the group the photo was posted in",
            "response": {
                "comment_count": "Optional fields parameter. When requested, this returns the number of comments made about this photo",
                "site_link": "URL for photo in photo album on meetup.com",
                "highres_link": "URL for the photo at its maximum size",
                "photo_id": "Unique identifier of the photo",
                "created": "Created time in milliseconds since the epoch",
                "member_photo": [
                    "Optional member photo of the uploading member",
                    {
                        "highres_link": "URL for the photo at its maximum size",
                        "photo_id": "Photo ID",
                        "photo_link": "URL for a standard size of the photo",
                        "thumb_link": "URL for a thumbnail of the photo"
                    }
                ],
                "caption": "Photo caption",
                "thumb_link": "URL for a thumbnail the photo",
                "photo_album": [
                    "-",
                    {
                        "photo_album_id": "Unique identifier of the album",
                        "event_id": "Event ID if this is an event photo album",
                        "event": [
                            "Extra event info returned when requested in the \"fields\" parameter",
                            {
                                "name": "Name of the event",
                                "id": "String ID of the event",
                                "time": "UTC start time of the event, in milliseconds since the epoch",
                                "event_url": "URL of the event's page on meetup.com"
                            }
                        ],
                        "group_id": "ID of the group that created the album"
                    }
                ],
                "member": [
                    "Member that uploaded the photo",
                    {
                        "member_id": "Member's ID",
                        "name": "Name of the member",
                        "member_country": "Optional field",
                        "member_state": "Optional field",
                        "member_city": "Optional field"
                    }
                ],
                "self": [
                    "Optional field, contains details specific to the authorized user",
                    {
                        "actions": "list of actions the current user may perform, potentially \"delete\" or \"edit\"",
                        "role": "Member's role in group, if any: Organizer, Assistant Organizer, Event Organizer, etc."
                    }
                ],
                "photo_link": "URL for a standard size of the photo",
                "updated": "Last updated time in milliseconds since the epoch"
            },
            "tag": "edit",
            "responseModel": "EditPhoto"
        },
        "EditProfile": {
            "version": "2",
            "name": "EditProfile",
            "httpMethod": "POST",
            "parameters": {
                "gid": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "mid": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "site_name": {
                    "location": "query",
                    "required": false,
                    "description": "Name of member's site. Max length is 32"
                },
                "add_role": {
                    "location": "query",
                    "required": false,
                    "description": "Allows those with permission to assign one of the following roles: coorganizer, event_organizer, assistant_organizer"
                },
                "photo_id": {
                    "location": "query",
                    "required": false,
                    "description": "photo_id of the photo to use for this profile. set to 0 to unset the current photo"
                },
                "site_url": {
                    "location": "query",
                    "required": false,
                    "description": "Link to member's site. Max length is 80"
                },
                "intro": {
                    "location": "query",
                    "required": false,
                    "description": "Provides a Member an opportunity to tell the group about themselves"
                },
                "new_photo": {
                    "location": "query",
                    "required": false,
                    "description": "file upload for a new member photo"
                },
                "title": {
                    "location": "query",
                    "required": false,
                    "description": "An organizer-defined member title."
                },
                "remove_role": {
                    "location": "query",
                    "required": false,
                    "description": "Allows those with permission to remove one of the following roles: coorganizer, event_organizer, assistant_organizer"
                },
                "answer_{qid}": {
                    "location": "query",
                    "required": false,
                    "description": "Answers to questions from groups API join_info question fields"
                }
            },
            "summary": "Update a member's group profile",
            "uri": "/2/profile/{gid}/{mid}",
            "notes": "The `gid` and `mid` in this method's path are group and member IDs, both needed to uniquely identify the member profile to be edited. An authenticated user may update their own profile by substituting \"self\" for the `mid`. All POST parameters are optional unless required by the group. Only the organizer of the group may edit the member's `title` and `role` within the group. Those are the only things the organizer may edit. When requesting to set a role with `add_role` the member's previous role will be cleared. Members may edit all other fields of their own profiles with the exception of `title`, `add_role`, and `remove_role`. This method requires an HTTP POST.",
            "response": null,
            "tag": "edit",
            "responseModel": "EditProfile"
        },
        "GetCategories": {
            "version": "2",
            "name": "GetCategories",
            "httpMethod": "GET",
            "parameters": {
                "fields": {
                    "location": "query",
                    "required": false,
                    "description": "Parameter for requesting optional response properties"
                },
                "member": {
                    "location": "query",
                    "required": false,
                    "description": "order by recommendations for authorized member (deprecated)"
                },
                "shortname": {
                    "location": "query",
                    "required": false,
                    "description": "(default order) ascending"
                },
                "page": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "offset": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "desc": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "order": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "only": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "omit": {
                    "location": "query",
                    "required": false,
                    "description": null
                }
            },
            "summary": "Returns a list of Meetup group categories",
            "uri": "/2/categories",
            "notes": "No parameters required parameters",
            "response": {
                "name": "Display name of the category",
                "id": "Numeric identifier of the category",
                "shortname": "String identifier of the category"
            },
            "tag": null,
            "responseModel": "GetCategories"
        },
        "GetCities": {
            "version": "2",
            "name": "GetCities",
            "httpMethod": "GET",
            "parameters": {
                "country": {
                    "location": "query",
                    "required": false,
                    "description": "A valid country code"
                },
                "query": {
                    "location": "query",
                    "required": false,
                    "description": "Search term and/or zip to look for (if this is specified, max result size limited to 10)"
                },
                "lon": {
                    "location": "query",
                    "required": false,
                    "description": "Longitude to search"
                },
                "state": {
                    "location": "query",
                    "required": false,
                    "description": "A valid state code for the given country, if the country has states"
                },
                "radius": {
                    "location": "query",
                    "required": false,
                    "description": "When searching by lat/lon only, specify a radius to search (default 50 miles)"
                },
                "lat": {
                    "location": "query",
                    "required": false,
                    "description": "Latitude to search"
                },
                "distance": {
                    "location": "query",
                    "required": false,
                    "description": "When lat/lon/query provided, sort matches by distance to coordinates"
                },
                "size": {
                    "location": "query",
                    "required": false,
                    "description": "(default order) number of members in the city: descending"
                },
                "smart": {
                    "location": "query",
                    "required": false,
                    "description": "Sort by size, but if a match is close to given lat/lon, float to top. Only works when query provided"
                },
                "page": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "offset": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "desc": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "order": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "only": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "omit": {
                    "location": "query",
                    "required": false,
                    "description": null
                }
            },
            "summary": "Returns Meetup cities. This method supports search by latitude/longitude/radius, by country/state, by query term/zip, or a combination of all of these. Location-only searches by lat and lon return all cities within a radius of the provided coordinates. Searches with a query return up to 10 cities matching the term, and can be sorted by size or distance to a given coordinate. 'smart' ordering can be used to return the match(es) with the highest member_count, unless a smaller size match exists nearby the given coordinates. Query searches are supported for country but not country and state",
            "uri": "/2/cities",
            "notes": "This method requires no authentication but is subject to [request limiting](/meetup_api/docs/#limits) based on client IP . This search is location based. A lat and lon must be supplied together or a query or the search will be based on your geo-located ip",
            "response": {
                "zip": "The zip code of the city. For cities in countries without ZIP codes, a placeholder will be returned",
                "country": "The ISO_3166-1 country code for the country which contains the city",
                "localized_country_name": "The name of the country which contains the city",
                "distance": "The distance away from the provided coordinates, if applicable",
                "city": "The name of the city",
                "lon": "The longitude of the city",
                "ranking": "Indicates the best-match ranking of this result",
                "id": "Numeric identifier of the city",
                "state": "The state which contains the city, if applicable",
                "member_count": "The number of Meetup members in the city",
                "name_string": "The full name of the city, as returned by query search, if applicable",
                "lat": "The latitude of the city"
            },
            "tag": null,
            "responseModel": "GetCities"
        },
        "GetConcierge": {
            "version": "2",
            "name": "GetConcierge",
            "httpMethod": "GET",
            "parameters": {
                "zip": {
                    "location": "query",
                    "required": false,
                    "description": "A valid US zip code, limits the returned groups to those within radius miles"
                },
                "country": {
                    "location": "query",
                    "required": false,
                    "description": "A valid country code"
                },
                "city": {
                    "location": "query",
                    "required": false,
                    "description": "A valid city"
                },
                "lon": {
                    "location": "query",
                    "required": false,
                    "description": "A valid longitude, limits the returned group events to those within radius miles"
                },
                "text_format": {
                    "location": "query",
                    "required": false,
                    "description": "Format of the description text, \"html\", \"plain\", or \"simplehtml\". Defaults to \"html\""
                },
                "category_id": {
                    "location": "query",
                    "required": false,
                    "description": "Comma delimited list of category ids to limit recommendations to"
                },
                "page_token": {
                    "location": "query",
                    "required": false,
                    "description": "An opaque string used to page through results. This can be found appended to the 'next' link in the meta section of the response."
                },
                "state": {
                    "location": "query",
                    "required": false,
                    "description": "If searching in a country with states, a valid 2 character state code"
                },
                "time": {
                    "location": "query",
                    "required": false,
                    "description": "ascending time is the default and only ordering"
                },
                "topic_id": {
                    "location": "query",
                    "required": false,
                    "description": "Comma delimited list of topics to help inform recommendation"
                },
                "radius": {
                    "location": "query",
                    "required": false,
                    "description": "Radius, in miles for geographic requests, defaults to the member's preferred radius or 0.5 -- maximum 100. May also be specified as \"smart\", a dynamic radius based on the number of active groups in the area"
                },
                "fields": {
                    "location": "query",
                    "required": false,
                    "description": "Request that additional fields (separated by commas) be included in the output"
                },
                "with_friends": {
                    "location": "query",
                    "required": false,
                    "description": "Boolean parameter. When set to true, events hosted by groups you have friends in will be recommended"
                },
                "self_groups": {
                    "location": "query",
                    "required": false,
                    "description": "set to \"include\" or \"exclude\" groups the authorized member belongs to. The default is \"include\". This includes groups in locations that may differ than the provided location"
                },
                "lat": {
                    "location": "query",
                    "required": false,
                    "description": "A valid latitude, limits the returned group events to those within radius miles"
                },
                "page": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "offset": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "desc": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "order": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "only": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "omit": {
                    "location": "query",
                    "required": false,
                    "description": null
                }
            },
            "summary": "Recommends upcoming meetups for the authorized member in a given location and in thier groups",
            "uri": "/2/concierge",
            "notes": "For geo-based requests, you may provide a location in one of three ways. By `lat` and `lon`, by `zip`, or by `country`, `city`, and optionally a `state`, if the provided country has states.\n\nIf the server is unable to produce recommendations in a suitable amount of time, a 503 error will be returned. If no parameters are specified, Meetups are recommended for the upcoming week in the member's default location.\n\nPagination works a little differently in this method than in others. Rather than using \"offset\" and \"page\" request parameters, this method uses an opaque \"page_token\" request parameter to determine the page of results returned. If there are more results, the \"next\" property of the [meta section](/meetup_api/docs/#meta) of the response will contain the next page's page_token. The number of results returned is not deterministic but a best-effort attempt will be made to return at least some.\n",
            "response": {
                "utc_offset": "The local offset from UTC time, in milliseconds",
                "comment_count": "Returned when fields request parameter contains \"comment_count\" and represents number of comments posted to the event",
                "rsvp_limit": "The number of \"yes\" RSVPs an event can have before members will be added to the waiting list",
                "venue": [
                    "Venue, if selected and not hidden",
                    {
                        "zip": "ZIP code if, venue is in US or Canada",
                        "lat, lon": "Geographic coordinates of venue",
                        "localized_country_name": "Name of country the city belongs to",
                        "phone": "Phone number of venue",
                        "address_1": "Line 1 of venue address",
                        "city, state, country": "City, Country Code and if in US state of venue",
                        "address_2": "Line 2 of venue address",
                        "address_3": "Line 3 of venue address",
                        "name": "Venue name",
                        "id": "Venue id",
                        "repinned": "true if the editor of the event altered the original venues pin location, false otherwise"
                    }
                ],
                "featured": "Returned when fields request parameter contains \"featured\" and returns \"true\" if the event is featured and \"false\" otherwise",
                "photo_sample": [
                    "A small collection of Photos uploaded for this event. Returned when fields request parameter contains \"photo_sample\"",
                    {
                        "highres_link": "URL for the photo at its maximum size",
                        "photo_id": "Photo ID",
                        "photo_link": "URL for a standard size of the photo",
                        "thumb_link": "URL for a thumbnail of the photo"
                    }
                ],
                "headcount": "The number of members in attendance according to the attendance taker. This may be 0 if attendance has not yet been taken",
                "survey_questions": [
                    "Returned when fields request parameter contains \"survey_questions\" for events with surveys",
                    {
                        "id": "Question identifier",
                        "question": "Question text",
                        "required": "Flag indicating if a response to this question is required to RSVP. Currently always false."
                    }
                ],
                "announced_at": "Organizers and hosts can see when the event as announced in milliseconds since the epoch",
                "distance": "Distance in miles from the search location, if one was specified",
                "venue_visibility": "Set to \"members\" or \"public\". The \"venue\" element will not be present if the visibility is \"members\" and the current authenticated user is not a member of the group hosting the event. This value is only returned if requested in the fields parameter",
                "timezone": "Returned when fields request parameter contains \"timezone\". This represents the universal timezone identifier for the host group",
                "fee": [
                    "Fee info returned when payment is defined",
                    {
                        "amount": "Amount of the fee",
                        "accepts": "Accepted method of payment. Can be one of \"paypal\", \"amazon\", \"wepay\", or \"cash\"",
                        "description": "Fee description, typically \"per person\"",
                        "currency": "Currency accepted for fee",
                        "label": "Fee label, typically \"Price\"",
                        "required": "\"1\" if payment is required to RSVP, \"0\" otherwise"
                    }
                ],
                "rating": [
                    "Only past events have this field, an aggregate of anonymous ratings",
                    {
                        "count": "Number of ratings been collected",
                        "average": "Average of collected ratings"
                    }
                ],
                "why": "We should do this because...",
                "description": "Description of the event.",
                "is_simplehtml": "Optional field, \"true\" when the event has been saved in a simplified HTML format, \"false\" otherwise.",
                "short_link": "Returned when fields request parameter contains \"short_link\"",
                "yes_rsvp_count": "Number of yes RSVPs including guests",
                "duration": "Event duration in milliseconds, if an end time is specified by the organizer. When not present, a default of 3 hours may be assumed by applications.",
                "event_hosts": [
                    "List of members hosting the event, only returned if requested in the fields parameter.",
                    {
                        "member_id": "The host's member id",
                        "photo": [
                            "Member photo if one is exists",
                            {
                                "highres_link": "URL for the photo at its maximum size",
                                "photo_id": "Photo ID",
                                "photo_link": "URL for a standard size of the photo",
                                "thumb_link": "URL for a thumbnail of the photo"
                            }
                        ],
                        "member_name": "The host's member name"
                    }
                ],
                "id": "The event id. May be numeric or alphanumeric, always served as a string",
                "simple_html_description": "Optional field, description of the event in simple HTML format.",
                "photo_url": "URL of the event photo, if one exists",
                "publish_status": "\"published\" or \"draft\" only visible to organizers",
                "group": [
                    "Group that is hosting the event",
                    {
                        "topics": [
                            "Optional field. Topics related to this group",
                            {
                                "urlkey": "Unique keyword used to identify this topic",
                                "name": "Topic name",
                                "id": "Topic ID"
                            }
                        ],
                        "created": "Date and time that the group was founded, in milliseconds since the epoch",
                        "group_lon": "Approximate group longitude",
                        "photos": [
                            "Returned when fields request parameter contains \"group_photos\". Includes a small set of photos from the group",
                            {
                                "highres_link": "URL for the photo at its maximum size",
                                "photo_id": "Unique photo id",
                                "photo_link": "URL for a standard size of the photo",
                                "thumb_link": "URL for a thumbnail of the photo"
                            }
                        ],
                        "group_photo": [
                            "Returned when fields request parameter contains \"group_photo\". Represents photo for the group hosting the event",
                            {
                                "highres_link": "URL for the photo at its maximum size",
                                "photo_id": "Unique photo id",
                                "photo_link": "URL for a standard size of the photo",
                                "thumb_link": "URL for a thumbnail of the photo"
                            }
                        ],
                        "join_mode": "\"open\", \"approval\", or \"closed\"",
                        "approved": "Returned when fields request parameter contains \"group_approved\". True if this group has been approved. New groups are generally approved (or removed) soon after creation.",
                        "name": "Group name",
                        "self": [
                            "Returned when fields request parameter contains 'self_membership_dues' or 'group_status'",
                            {
                                "membership_dues": "The authenticated member's group dues in the form returned by group endpoints",
                                "status": "The member's status. May be one of 'active' or 'pending'"
                            }
                        ],
                        "id": "Group id",
                        "category": [
                            "Optional field. Category of this group",
                            {
                                "name": "Display name of the category",
                                "id": "Numeric identifier of the category",
                                "shortname": "String identifier of the category"
                            }
                        ],
                        "urlname": "Group URL name",
                        "membership_dues": [
                            "Returned when fields request parameter contains \"group_membership_dues\"",
                            {
                                "refund_policy": "Array of payment refund policies. May be one or more of \"none\", \"member_leaves\", \"group_closes\", \"member_banned\", or \"custom\"",
                                "reasons": "Array of reasons types in the following values compensate_organizer, cover_costs, encourage_engagement, improve_meetups, other, provide_supplies, reserve_fund",
                                "methods": "Array of acceptable payment methods. May be one or more of \"amazon_payments\", \"paypal\", \"credit_card\" or \"other\"",
                                "fee": "Numeric fee value",
                                "currency": "Currency in which the fee is declared",
                                "fee_desc": "Description of fee",
                                "trial_days": "When present, returns the number of days the group is offering a free trial period for to new members. When not present, this indicates that the group does not offer a trial membership period",
                                "reasons_other": "An additional reason if specified.",
                                "required": "\"2\" if dues are required to join, \"1\" if dues are required to RSVP, \"0\" otherwise",
                                "self_payment_required": "Returns true if the authorized user is prevented from participating in the group until a payment is made"
                            }
                        ],
                        "group_lat": "Approximate group latitude",
                        "who": "What the group calls its members"
                    }
                ],
                "photo_album_id": "Returned when fields request parameter contains \"photo_album_id\" and returns the ID of the photo album for this event, if one exists",
                "rsvp_rules": [
                    "Conditions set by the organizer, only returned if requested in the fields parameter.",
                    {
                        "refund_policy": [
                            "The organizer-defined terms for refunds. If this is defined, you must provide the authenticated member a way to access this information before they can RSVP. They will need to agree to these terms before they RSVP",
                            {
                                "policies": " list of one or more of the following. 'no_refunds' if the organizer will not issue refunds', 'member_cancellation' if the organizer offers a refund for member cancellation, 'event_cancellation' if the organizer offers a refund if the event is canceled, 'event_rescheduled' if the organizer offers a refund when the event is rescheduled",
                                "days": "if member_cancellation is present, it's relative to this many days before the event",
                                "notes": "additional refund policy notes"
                            }
                        ],
                        "open_time": "UTC time that members may begin to RSVP",
                        "closed": "Flag indicating that RSVPing is closed for the event. 1 is true 0 is false",
                        "guest_limit": "Number of guests members may include in their RSVP, 0 or more",
                        "close_time": "UTC time that RSVPs will no longer be accepted, though organizers may close RSVPs earlier"
                    }
                ],
                "visibility": "Event visibility: \"public\", \"members\" or \"public_limited\". Events in private groups that do not expose limited information are visible only to that group's members and should not be made public.",
                "created": "UTC creation time of the event, in milliseconds since the epoch",
                "maybe_rsvp_count": "Number of maybe RSVPs including guests",
                "how_to_find_us": "The information provided by the event host for \"How will members find you there?\". Visible when location is visible to the authenticated member",
                "event_url": "URL of the event's page on meetup.com",
                "announced": "Organizers and hosts can see if the event was announced",
                "photo_count": "Returned when fields request parameter contains \"photo_count\" and represents number of photos posted to the event",
                "rsvpable": "Indicates if the currently authenticated member can RSVP or not, only returned if requested in the fields parameter",
                "rsvp_sample": [
                    "A small collection of RSVPs for members attending this event, returned when fields request parameter value includes 'rsvp_sample'",
                    {
                        "member": [
                            "Member who RSVP'd",
                            {
                                "member_id": "Member's ID",
                                "name": "Name of the member",
                                "self": [
                                    "A small set of data representing the authenticated member's context with this member",
                                    {
                                        "friend": "Boolean indicator for whether or not the authenticated member is friends with this member"
                                    }
                                ]
                            }
                        ],
                        "rsvp_id": "The RSVP id. May be -1 for events scheduled in the future",
                        "mtime": "Last modified time of the RSVP, in milliseconds since the epoch.",
                        "created": "Creation time of the RSVP, in milliseconds since the epoch.",
                        "member_photo": [
                            "The RSVPing member's photo if available. Members who registered via Facebook may not have highres photos",
                            {
                                "highres_link": "URL for the photo at its maximum size",
                                "photo_id": "Photo ID",
                                "photo_link": "URL for a standard size of the photo",
                                "thumb_link": "URL for a thumbnail of the photo"
                            }
                        ]
                    }
                ],
                "series": [
                    "Returned when fields request parameter contains \"series\" for events that are part of a series of events",
                    {
                        "end_date": "Date when this series ends/ended, in milliseconds since the epoch. Some series repeat forever. In those cases, this field will be absent",
                        "description": "Human displayable description of how often events in this series occur",
                        "id": "Unique numeric identifier for the series",
                        "start_date": "Date when this series begins/began, in milliseconds since the epoch"
                    }
                ],
                "name": "The name of the event",
                "self": [
                    "Returned when fields request parameter contains \"self\" and represents details particular to the authorized user, only present if requested and user is a member of the hosting group",
                    {
                        "rated": "Boolean indicator of whether the current member rated the event or not",
                        "pay_status": "The authenticated member's payment status. This may be one of 'none', 'paid', 'unpaid', 'partially_paid', 'payment_pending', 'echeck_pending', 'refund_pending', 'partially_refunded', 'refunded', 'pay_status'.",
                        "role": "The authenticated member's role in within the group, if any. This may be one of: Organizer, Assistant Organizer, Event Organizer, etc.",
                        "watching": "For events without waitlist you may check your watchlist status with this property. Values may either be true of false.",
                        "actions": "list of actions the current user may perform, potentially: \"announce\" to announce the event to the group's members, \"attendance\" to view or take attendance for the event, \"payments\" to mark members as paid if the event is a paid event, \"publish\" to publish a draft event, \"edit\" to edit the event information, \"edit_hosts\" to edit the hosts for the event, \"delete\" to delete the event, \"rsvp\" to RSVP yes or no to the event, or \"wait\" to get on the waiting list (using the same RSVP methods). For events without a waitlist, you may see either \"watch\" or \"unwatch\" to watch for opening spots for the event when the event is full. If an organizer requires membership dues to rsvp and the authorized member has not paid theirs, \"dues\" will be included",
                        "rsvp": [
                            "Member's RSVP, if any",
                            {
                                "answers": "List of answers to event survey questions asked when the member RSVP'd in the order asked, only available to organizers and assistant organizers. By default, this field returns a list of strings answers. You can request more structured answer info including the time the answer was updated, by setting fields=rsvp_answer_info in the request. The structured format for answers is defined in Rsvp API's response",
                                "guests": "number of guests",
                                "response": "\"yes\", \"no\", \"yes_pending_payment\", or \"waitlist\""
                            }
                        ]
                    }
                ],
                "time": "UTC start time of the event, in milliseconds since the epoch",
                "updated": "UTC last modified time of the event, in milliseconds since the epoch",
                "trending_rank": "Indicates the trending rank within the current result set. The best rank is zero, increasing rank values are less \"trending\". This value is only returned if requested in the fields parameter",
                "status": "\"cancelled\", \"upcoming\", \"past\", \"proposed\", \"suggested\" or \"draft\""
            },
            "tag": null,
            "responseModel": "GetConcierge"
        },
        "GetDashboard": {
            "version": "2",
            "name": "GetDashboard",
            "httpMethod": "GET",
            "parameters": {
                "fields": {
                    "location": "query",
                    "required": false,
                    "description": "Request that additional fields (separated by commas) be included in the output"
                },
                "page": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "offset": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "desc": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "order": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "only": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "omit": {
                    "location": "query",
                    "required": false,
                    "description": null
                }
            },
            "summary": "A dashboard of aggregated Meetup information for the authorized member",
            "uri": "/dashboard",
            "notes": "no parameters are required",
            "response": {
                "stats": [
                    "A map of statistics for the current member",
                    {
                        "fb_friend_events": "Number of upcoming events Facebook friends of the current member are attending returned when there are no upcoming events",
                        "upcoming_events": "Number of upcoming Meetup events in member's groups",
                        "city_top_groups": "Number of top groups in the member's city",
                        "global_top_groups": "Number of top groups globally",
                        "memberships": "Number of Meetup groups member is in",
                        "nearby_events": "Number of upcoming events in the member's local area, returned when there are no upcoming events"
                    }
                ],
                "last_event": [
                    "The last meetup the current member RSVP'd to",
                    {
                        "utc_offset": "The local offset from UTC time, in milliseconds",
                        "comment_count": "Returned when fields request parameter contains \"comment_count\" and represents number of comments posted to the event",
                        "rsvp_limit": "The number of \"yes\" RSVPs an event can have before members will be added to the waiting list",
                        "venue": [
                            "Venue, if selected and not hidden",
                            {
                                "zip": "ZIP code if, venue is in US or Canada",
                                "lat, lon": "Geographic coordinates of venue",
                                "localized_country_name": "Name of country the city belongs to",
                                "phone": "Phone number of venue",
                                "address_1": "Line 1 of venue address",
                                "city, state, country": "City, Country Code and if in US state of venue",
                                "address_2": "Line 2 of venue address",
                                "address_3": "Line 3 of venue address",
                                "name": "Venue name",
                                "id": "Venue id",
                                "repinned": "true if the editor of the event altered the original venues pin location, false otherwise"
                            }
                        ],
                        "featured": "Returned when fields request parameter contains \"featured\" and returns \"true\" if the event is featured and \"false\" otherwise",
                        "photo_sample": [
                            "A small collection of Photos uploaded for this event. Returned when fields request parameter contains \"photo_sample\"",
                            {
                                "highres_link": "URL for the photo at its maximum size",
                                "photo_id": "Photo ID",
                                "photo_link": "URL for a standard size of the photo",
                                "thumb_link": "URL for a thumbnail of the photo"
                            }
                        ],
                        "headcount": "The number of members in attendance according to the attendance taker. This may be 0 if attendance has not yet been taken",
                        "survey_questions": [
                            "Returned when fields request parameter contains \"survey_questions\" for events with surveys",
                            {
                                "id": "Question identifier",
                                "question": "Question text",
                                "required": "Flag indicating if a response to this question is required to RSVP. Currently always false."
                            }
                        ],
                        "announced_at": "Organizers and hosts can see when the event as announced in milliseconds since the epoch",
                        "distance": "Distance in miles from the search location, if one was specified",
                        "venue_visibility": "Set to \"members\" or \"public\". The \"venue\" element will not be present if the visibility is \"members\" and the current authenticated user is not a member of the group hosting the event. This value is only returned if requested in the fields parameter",
                        "timezone": "Returned when fields request parameter contains \"timezone\". This represents the universal timezone identifier for the host group",
                        "fee": [
                            "Fee info returned when payment is defined",
                            {
                                "amount": "Amount of the fee",
                                "accepts": "Accepted method of payment. Can be one of \"paypal\", \"amazon\", \"wepay\", or \"cash\"",
                                "description": "Fee description, typically \"per person\"",
                                "currency": "Currency accepted for fee",
                                "label": "Fee label, typically \"Price\"",
                                "required": "\"1\" if payment is required to RSVP, \"0\" otherwise"
                            }
                        ],
                        "rating": [
                            "Only past events have this field, an aggregate of anonymous ratings",
                            {
                                "count": "Number of ratings been collected",
                                "average": "Average of collected ratings"
                            }
                        ],
                        "why": "We should do this because...",
                        "description": "Description of the event.",
                        "is_simplehtml": "Optional field, \"true\" when the event has been saved in a simplified HTML format, \"false\" otherwise.",
                        "short_link": "Returned when fields request parameter contains \"short_link\"",
                        "yes_rsvp_count": "Number of yes RSVPs including guests",
                        "duration": "Event duration in milliseconds, if an end time is specified by the organizer. When not present, a default of 3 hours may be assumed by applications.",
                        "event_hosts": [
                            "List of members hosting the event, only returned if requested in the fields parameter.",
                            {
                                "member_id": "The host's member id",
                                "photo": [
                                    "Member photo if one is exists",
                                    {
                                        "highres_link": "URL for the photo at its maximum size",
                                        "photo_id": "Photo ID",
                                        "photo_link": "URL for a standard size of the photo",
                                        "thumb_link": "URL for a thumbnail of the photo"
                                    }
                                ],
                                "member_name": "The host's member name"
                            }
                        ],
                        "id": "The event id. May be numeric or alphanumeric, always served as a string",
                        "simple_html_description": "Optional field, description of the event in simple HTML format.",
                        "photo_url": "URL of the event photo, if one exists",
                        "publish_status": "\"published\" or \"draft\" only visible to organizers",
                        "group": [
                            "Group that is hosting the event",
                            {
                                "topics": [
                                    "Optional field. Topics related to this group",
                                    {
                                        "urlkey": "Unique keyword used to identify this topic",
                                        "name": "Topic name",
                                        "id": "Topic ID"
                                    }
                                ],
                                "created": "Date and time that the group was founded, in milliseconds since the epoch",
                                "group_lon": "Approximate group longitude",
                                "photos": [
                                    "Returned when fields request parameter contains \"group_photos\". Includes a small set of photos from the group",
                                    {
                                        "highres_link": "URL for the photo at its maximum size",
                                        "photo_id": "Unique photo id",
                                        "photo_link": "URL for a standard size of the photo",
                                        "thumb_link": "URL for a thumbnail of the photo"
                                    }
                                ],
                                "group_photo": [
                                    "Returned when fields request parameter contains \"group_photo\". Represents photo for the group hosting the event",
                                    {
                                        "highres_link": "URL for the photo at its maximum size",
                                        "photo_id": "Unique photo id",
                                        "photo_link": "URL for a standard size of the photo",
                                        "thumb_link": "URL for a thumbnail of the photo"
                                    }
                                ],
                                "join_mode": "\"open\", \"approval\", or \"closed\"",
                                "approved": "Returned when fields request parameter contains \"group_approved\". True if this group has been approved. New groups are generally approved (or removed) soon after creation.",
                                "name": "Group name",
                                "self": [
                                    "Returned when fields request parameter contains 'self_membership_dues' or 'group_status'",
                                    {
                                        "membership_dues": "The authenticated member's group dues in the form returned by group endpoints",
                                        "status": "The member's status. May be one of 'active' or 'pending'"
                                    }
                                ],
                                "id": "Group id",
                                "category": [
                                    "Optional field. Category of this group",
                                    {
                                        "name": "Display name of the category",
                                        "id": "Numeric identifier of the category",
                                        "shortname": "String identifier of the category"
                                    }
                                ],
                                "urlname": "Group URL name",
                                "membership_dues": [
                                    "Returned when fields request parameter contains \"group_membership_dues\"",
                                    {
                                        "refund_policy": "Array of payment refund policies. May be one or more of \"none\", \"member_leaves\", \"group_closes\", \"member_banned\", or \"custom\"",
                                        "reasons": "Array of reasons types in the following values compensate_organizer, cover_costs, encourage_engagement, improve_meetups, other, provide_supplies, reserve_fund",
                                        "methods": "Array of acceptable payment methods. May be one or more of \"amazon_payments\", \"paypal\", \"credit_card\" or \"other\"",
                                        "fee": "Numeric fee value",
                                        "currency": "Currency in which the fee is declared",
                                        "fee_desc": "Description of fee",
                                        "trial_days": "When present, returns the number of days the group is offering a free trial period for to new members. When not present, this indicates that the group does not offer a trial membership period",
                                        "reasons_other": "An additional reason if specified.",
                                        "required": "\"2\" if dues are required to join, \"1\" if dues are required to RSVP, \"0\" otherwise",
                                        "self_payment_required": "Returns true if the authorized user is prevented from participating in the group until a payment is made"
                                    }
                                ],
                                "group_lat": "Approximate group latitude",
                                "who": "What the group calls its members"
                            }
                        ],
                        "photo_album_id": "Returned when fields request parameter contains \"photo_album_id\" and returns the ID of the photo album for this event, if one exists",
                        "rsvp_rules": [
                            "Conditions set by the organizer, only returned if requested in the fields parameter.",
                            {
                                "refund_policy": [
                                    "The organizer-defined terms for refunds. If this is defined, you must provide the authenticated member a way to access this information before they can RSVP. They will need to agree to these terms before they RSVP",
                                    {
                                        "policies": " list of one or more of the following. 'no_refunds' if the organizer will not issue refunds', 'member_cancellation' if the organizer offers a refund for member cancellation, 'event_cancellation' if the organizer offers a refund if the event is canceled, 'event_rescheduled' if the organizer offers a refund when the event is rescheduled",
                                        "days": "if member_cancellation is present, it's relative to this many days before the event",
                                        "notes": "additional refund policy notes"
                                    }
                                ],
                                "open_time": "UTC time that members may begin to RSVP",
                                "closed": "Flag indicating that RSVPing is closed for the event. 1 is true 0 is false",
                                "guest_limit": "Number of guests members may include in their RSVP, 0 or more",
                                "close_time": "UTC time that RSVPs will no longer be accepted, though organizers may close RSVPs earlier"
                            }
                        ],
                        "visibility": "Event visibility: \"public\", \"members\" or \"public_limited\". Events in private groups that do not expose limited information are visible only to that group's members and should not be made public.",
                        "created": "UTC creation time of the event, in milliseconds since the epoch",
                        "maybe_rsvp_count": "Number of maybe RSVPs including guests",
                        "how_to_find_us": "The information provided by the event host for \"How will members find you there?\". Visible when location is visible to the authenticated member",
                        "event_url": "URL of the event's page on meetup.com",
                        "announced": "Organizers and hosts can see if the event was announced",
                        "photo_count": "Returned when fields request parameter contains \"photo_count\" and represents number of photos posted to the event",
                        "rsvpable": "Indicates if the currently authenticated member can RSVP or not, only returned if requested in the fields parameter",
                        "rsvp_sample": [
                            "A small collection of RSVPs for members attending this event, returned when fields request parameter value includes 'rsvp_sample'",
                            {
                                "member": [
                                    "Member who RSVP'd",
                                    {
                                        "member_id": "Member's ID",
                                        "name": "Name of the member",
                                        "self": [
                                            "A small set of data representing the authenticated member's context with this member",
                                            {
                                                "friend": "Boolean indicator for whether or not the authenticated member is friends with this member"
                                            }
                                        ]
                                    }
                                ],
                                "rsvp_id": "The RSVP id. May be -1 for events scheduled in the future",
                                "mtime": "Last modified time of the RSVP, in milliseconds since the epoch.",
                                "created": "Creation time of the RSVP, in milliseconds since the epoch.",
                                "member_photo": [
                                    "The RSVPing member's photo if available. Members who registered via Facebook may not have highres photos",
                                    {
                                        "highres_link": "URL for the photo at its maximum size",
                                        "photo_id": "Photo ID",
                                        "photo_link": "URL for a standard size of the photo",
                                        "thumb_link": "URL for a thumbnail of the photo"
                                    }
                                ]
                            }
                        ],
                        "series": [
                            "Returned when fields request parameter contains \"series\" for events that are part of a series of events",
                            {
                                "end_date": "Date when this series ends/ended, in milliseconds since the epoch. Some series repeat forever. In those cases, this field will be absent",
                                "description": "Human displayable description of how often events in this series occur",
                                "id": "Unique numeric identifier for the series",
                                "start_date": "Date when this series begins/began, in milliseconds since the epoch"
                            }
                        ],
                        "name": "The name of the event",
                        "self": [
                            "Returned when fields request parameter contains \"self\" and represents details particular to the authorized user, only present if requested and user is a member of the hosting group",
                            {
                                "rated": "Boolean indicator of whether the current member rated the event or not",
                                "pay_status": "The authenticated member's payment status. This may be one of 'none', 'paid', 'unpaid', 'partially_paid', 'payment_pending', 'echeck_pending', 'refund_pending', 'partially_refunded', 'refunded', 'pay_status'.",
                                "role": "The authenticated member's role in within the group, if any. This may be one of: Organizer, Assistant Organizer, Event Organizer, etc.",
                                "watching": "For events without waitlist you may check your watchlist status with this property. Values may either be true of false.",
                                "actions": "list of actions the current user may perform, potentially: \"announce\" to announce the event to the group's members, \"attendance\" to view or take attendance for the event, \"payments\" to mark members as paid if the event is a paid event, \"publish\" to publish a draft event, \"edit\" to edit the event information, \"edit_hosts\" to edit the hosts for the event, \"delete\" to delete the event, \"rsvp\" to RSVP yes or no to the event, or \"wait\" to get on the waiting list (using the same RSVP methods). For events without a waitlist, you may see either \"watch\" or \"unwatch\" to watch for opening spots for the event when the event is full. If an organizer requires membership dues to rsvp and the authorized member has not paid theirs, \"dues\" will be included",
                                "rsvp": [
                                    "Member's RSVP, if any",
                                    {
                                        "answers": "List of answers to event survey questions asked when the member RSVP'd in the order asked, only available to organizers and assistant organizers. By default, this field returns a list of strings answers. You can request more structured answer info including the time the answer was updated, by setting fields=rsvp_answer_info in the request. The structured format for answers is defined in Rsvp API's response",
                                        "guests": "number of guests",
                                        "response": "\"yes\", \"no\", \"yes_pending_payment\", or \"waitlist\""
                                    }
                                ]
                            }
                        ],
                        "time": "UTC start time of the event, in milliseconds since the epoch",
                        "updated": "UTC last modified time of the event, in milliseconds since the epoch",
                        "trending_rank": "Indicates the trending rank within the current result set. The best rank is zero, increasing rank values are less \"trending\". This value is only returned if requested in the fields parameter",
                        "status": "\"cancelled\", \"upcoming\", \"past\", \"proposed\", \"suggested\" or \"draft\""
                    }
                ],
                "service_status": [
                    "An optional field which represents the current API service status",
                    {
                        "message": "A human displayable message",
                        "status": "May be one of 'ok', 'notice', or 'unavailable'"
                    }
                ],
                "ongoing_event": [
                    "The meetup event the current member has RSVP'd to that's currently happening",
                    {
                        "utc_offset": "The local offset from UTC time, in milliseconds",
                        "comment_count": "Returned when fields request parameter contains \"comment_count\" and represents number of comments posted to the event",
                        "rsvp_limit": "The number of \"yes\" RSVPs an event can have before members will be added to the waiting list",
                        "venue": [
                            "Venue, if selected and not hidden",
                            {
                                "zip": "ZIP code if, venue is in US or Canada",
                                "lat, lon": "Geographic coordinates of venue",
                                "localized_country_name": "Name of country the city belongs to",
                                "phone": "Phone number of venue",
                                "address_1": "Line 1 of venue address",
                                "city, state, country": "City, Country Code and if in US state of venue",
                                "address_2": "Line 2 of venue address",
                                "address_3": "Line 3 of venue address",
                                "name": "Venue name",
                                "id": "Venue id",
                                "repinned": "true if the editor of the event altered the original venues pin location, false otherwise"
                            }
                        ],
                        "featured": "Returned when fields request parameter contains \"featured\" and returns \"true\" if the event is featured and \"false\" otherwise",
                        "photo_sample": [
                            "A small collection of Photos uploaded for this event. Returned when fields request parameter contains \"photo_sample\"",
                            {
                                "highres_link": "URL for the photo at its maximum size",
                                "photo_id": "Photo ID",
                                "photo_link": "URL for a standard size of the photo",
                                "thumb_link": "URL for a thumbnail of the photo"
                            }
                        ],
                        "headcount": "The number of members in attendance according to the attendance taker. This may be 0 if attendance has not yet been taken",
                        "survey_questions": [
                            "Returned when fields request parameter contains \"survey_questions\" for events with surveys",
                            {
                                "id": "Question identifier",
                                "question": "Question text",
                                "required": "Flag indicating if a response to this question is required to RSVP. Currently always false."
                            }
                        ],
                        "announced_at": "Organizers and hosts can see when the event as announced in milliseconds since the epoch",
                        "distance": "Distance in miles from the search location, if one was specified",
                        "venue_visibility": "Set to \"members\" or \"public\". The \"venue\" element will not be present if the visibility is \"members\" and the current authenticated user is not a member of the group hosting the event. This value is only returned if requested in the fields parameter",
                        "timezone": "Returned when fields request parameter contains \"timezone\". This represents the universal timezone identifier for the host group",
                        "fee": [
                            "Fee info returned when payment is defined",
                            {
                                "amount": "Amount of the fee",
                                "accepts": "Accepted method of payment. Can be one of \"paypal\", \"amazon\", \"wepay\", or \"cash\"",
                                "description": "Fee description, typically \"per person\"",
                                "currency": "Currency accepted for fee",
                                "label": "Fee label, typically \"Price\"",
                                "required": "\"1\" if payment is required to RSVP, \"0\" otherwise"
                            }
                        ],
                        "rating": [
                            "Only past events have this field, an aggregate of anonymous ratings",
                            {
                                "count": "Number of ratings been collected",
                                "average": "Average of collected ratings"
                            }
                        ],
                        "why": "We should do this because...",
                        "description": "Description of the event.",
                        "is_simplehtml": "Optional field, \"true\" when the event has been saved in a simplified HTML format, \"false\" otherwise.",
                        "short_link": "Returned when fields request parameter contains \"short_link\"",
                        "yes_rsvp_count": "Number of yes RSVPs including guests",
                        "duration": "Event duration in milliseconds, if an end time is specified by the organizer. When not present, a default of 3 hours may be assumed by applications.",
                        "event_hosts": [
                            "List of members hosting the event, only returned if requested in the fields parameter.",
                            {
                                "member_id": "The host's member id",
                                "photo": [
                                    "Member photo if one is exists",
                                    {
                                        "highres_link": "URL for the photo at its maximum size",
                                        "photo_id": "Photo ID",
                                        "photo_link": "URL for a standard size of the photo",
                                        "thumb_link": "URL for a thumbnail of the photo"
                                    }
                                ],
                                "member_name": "The host's member name"
                            }
                        ],
                        "id": "The event id. May be numeric or alphanumeric, always served as a string",
                        "simple_html_description": "Optional field, description of the event in simple HTML format.",
                        "photo_url": "URL of the event photo, if one exists",
                        "publish_status": "\"published\" or \"draft\" only visible to organizers",
                        "group": [
                            "Group that is hosting the event",
                            {
                                "topics": [
                                    "Optional field. Topics related to this group",
                                    {
                                        "urlkey": "Unique keyword used to identify this topic",
                                        "name": "Topic name",
                                        "id": "Topic ID"
                                    }
                                ],
                                "created": "Date and time that the group was founded, in milliseconds since the epoch",
                                "group_lon": "Approximate group longitude",
                                "photos": [
                                    "Returned when fields request parameter contains \"group_photos\". Includes a small set of photos from the group",
                                    {
                                        "highres_link": "URL for the photo at its maximum size",
                                        "photo_id": "Unique photo id",
                                        "photo_link": "URL for a standard size of the photo",
                                        "thumb_link": "URL for a thumbnail of the photo"
                                    }
                                ],
                                "group_photo": [
                                    "Returned when fields request parameter contains \"group_photo\". Represents photo for the group hosting the event",
                                    {
                                        "highres_link": "URL for the photo at its maximum size",
                                        "photo_id": "Unique photo id",
                                        "photo_link": "URL for a standard size of the photo",
                                        "thumb_link": "URL for a thumbnail of the photo"
                                    }
                                ],
                                "join_mode": "\"open\", \"approval\", or \"closed\"",
                                "approved": "Returned when fields request parameter contains \"group_approved\". True if this group has been approved. New groups are generally approved (or removed) soon after creation.",
                                "name": "Group name",
                                "self": [
                                    "Returned when fields request parameter contains 'self_membership_dues' or 'group_status'",
                                    {
                                        "membership_dues": "The authenticated member's group dues in the form returned by group endpoints",
                                        "status": "The member's status. May be one of 'active' or 'pending'"
                                    }
                                ],
                                "id": "Group id",
                                "category": [
                                    "Optional field. Category of this group",
                                    {
                                        "name": "Display name of the category",
                                        "id": "Numeric identifier of the category",
                                        "shortname": "String identifier of the category"
                                    }
                                ],
                                "urlname": "Group URL name",
                                "membership_dues": [
                                    "Returned when fields request parameter contains \"group_membership_dues\"",
                                    {
                                        "refund_policy": "Array of payment refund policies. May be one or more of \"none\", \"member_leaves\", \"group_closes\", \"member_banned\", or \"custom\"",
                                        "reasons": "Array of reasons types in the following values compensate_organizer, cover_costs, encourage_engagement, improve_meetups, other, provide_supplies, reserve_fund",
                                        "methods": "Array of acceptable payment methods. May be one or more of \"amazon_payments\", \"paypal\", \"credit_card\" or \"other\"",
                                        "fee": "Numeric fee value",
                                        "currency": "Currency in which the fee is declared",
                                        "fee_desc": "Description of fee",
                                        "trial_days": "When present, returns the number of days the group is offering a free trial period for to new members. When not present, this indicates that the group does not offer a trial membership period",
                                        "reasons_other": "An additional reason if specified.",
                                        "required": "\"2\" if dues are required to join, \"1\" if dues are required to RSVP, \"0\" otherwise",
                                        "self_payment_required": "Returns true if the authorized user is prevented from participating in the group until a payment is made"
                                    }
                                ],
                                "group_lat": "Approximate group latitude",
                                "who": "What the group calls its members"
                            }
                        ],
                        "photo_album_id": "Returned when fields request parameter contains \"photo_album_id\" and returns the ID of the photo album for this event, if one exists",
                        "rsvp_rules": [
                            "Conditions set by the organizer, only returned if requested in the fields parameter.",
                            {
                                "refund_policy": [
                                    "The organizer-defined terms for refunds. If this is defined, you must provide the authenticated member a way to access this information before they can RSVP. They will need to agree to these terms before they RSVP",
                                    {
                                        "policies": " list of one or more of the following. 'no_refunds' if the organizer will not issue refunds', 'member_cancellation' if the organizer offers a refund for member cancellation, 'event_cancellation' if the organizer offers a refund if the event is canceled, 'event_rescheduled' if the organizer offers a refund when the event is rescheduled",
                                        "days": "if member_cancellation is present, it's relative to this many days before the event",
                                        "notes": "additional refund policy notes"
                                    }
                                ],
                                "open_time": "UTC time that members may begin to RSVP",
                                "closed": "Flag indicating that RSVPing is closed for the event. 1 is true 0 is false",
                                "guest_limit": "Number of guests members may include in their RSVP, 0 or more",
                                "close_time": "UTC time that RSVPs will no longer be accepted, though organizers may close RSVPs earlier"
                            }
                        ],
                        "visibility": "Event visibility: \"public\", \"members\" or \"public_limited\". Events in private groups that do not expose limited information are visible only to that group's members and should not be made public.",
                        "created": "UTC creation time of the event, in milliseconds since the epoch",
                        "maybe_rsvp_count": "Number of maybe RSVPs including guests",
                        "how_to_find_us": "The information provided by the event host for \"How will members find you there?\". Visible when location is visible to the authenticated member",
                        "event_url": "URL of the event's page on meetup.com",
                        "announced": "Organizers and hosts can see if the event was announced",
                        "photo_count": "Returned when fields request parameter contains \"photo_count\" and represents number of photos posted to the event",
                        "rsvpable": "Indicates if the currently authenticated member can RSVP or not, only returned if requested in the fields parameter",
                        "rsvp_sample": [
                            "A small collection of RSVPs for members attending this event, returned when fields request parameter value includes 'rsvp_sample'",
                            {
                                "member": [
                                    "Member who RSVP'd",
                                    {
                                        "member_id": "Member's ID",
                                        "name": "Name of the member",
                                        "self": [
                                            "A small set of data representing the authenticated member's context with this member",
                                            {
                                                "friend": "Boolean indicator for whether or not the authenticated member is friends with this member"
                                            }
                                        ]
                                    }
                                ],
                                "rsvp_id": "The RSVP id. May be -1 for events scheduled in the future",
                                "mtime": "Last modified time of the RSVP, in milliseconds since the epoch.",
                                "created": "Creation time of the RSVP, in milliseconds since the epoch.",
                                "member_photo": [
                                    "The RSVPing member's photo if available. Members who registered via Facebook may not have highres photos",
                                    {
                                        "highres_link": "URL for the photo at its maximum size",
                                        "photo_id": "Photo ID",
                                        "photo_link": "URL for a standard size of the photo",
                                        "thumb_link": "URL for a thumbnail of the photo"
                                    }
                                ]
                            }
                        ],
                        "series": [
                            "Returned when fields request parameter contains \"series\" for events that are part of a series of events",
                            {
                                "end_date": "Date when this series ends/ended, in milliseconds since the epoch. Some series repeat forever. In those cases, this field will be absent",
                                "description": "Human displayable description of how often events in this series occur",
                                "id": "Unique numeric identifier for the series",
                                "start_date": "Date when this series begins/began, in milliseconds since the epoch"
                            }
                        ],
                        "name": "The name of the event",
                        "self": [
                            "Returned when fields request parameter contains \"self\" and represents details particular to the authorized user, only present if requested and user is a member of the hosting group",
                            {
                                "rated": "Boolean indicator of whether the current member rated the event or not",
                                "pay_status": "The authenticated member's payment status. This may be one of 'none', 'paid', 'unpaid', 'partially_paid', 'payment_pending', 'echeck_pending', 'refund_pending', 'partially_refunded', 'refunded', 'pay_status'.",
                                "role": "The authenticated member's role in within the group, if any. This may be one of: Organizer, Assistant Organizer, Event Organizer, etc.",
                                "watching": "For events without waitlist you may check your watchlist status with this property. Values may either be true of false.",
                                "actions": "list of actions the current user may perform, potentially: \"announce\" to announce the event to the group's members, \"attendance\" to view or take attendance for the event, \"payments\" to mark members as paid if the event is a paid event, \"publish\" to publish a draft event, \"edit\" to edit the event information, \"edit_hosts\" to edit the hosts for the event, \"delete\" to delete the event, \"rsvp\" to RSVP yes or no to the event, or \"wait\" to get on the waiting list (using the same RSVP methods). For events without a waitlist, you may see either \"watch\" or \"unwatch\" to watch for opening spots for the event when the event is full. If an organizer requires membership dues to rsvp and the authorized member has not paid theirs, \"dues\" will be included",
                                "rsvp": [
                                    "Member's RSVP, if any",
                                    {
                                        "answers": "List of answers to event survey questions asked when the member RSVP'd in the order asked, only available to organizers and assistant organizers. By default, this field returns a list of strings answers. You can request more structured answer info including the time the answer was updated, by setting fields=rsvp_answer_info in the request. The structured format for answers is defined in Rsvp API's response",
                                        "guests": "number of guests",
                                        "response": "\"yes\", \"no\", \"yes_pending_payment\", or \"waitlist\""
                                    }
                                ]
                            }
                        ],
                        "time": "UTC start time of the event, in milliseconds since the epoch",
                        "updated": "UTC last modified time of the event, in milliseconds since the epoch",
                        "trending_rank": "Indicates the trending rank within the current result set. The best rank is zero, increasing rank values are less \"trending\". This value is only returned if requested in the fields parameter",
                        "status": "\"cancelled\", \"upcoming\", \"past\", \"proposed\", \"suggested\" or \"draft\""
                    }
                ],
                "notifications": [
                    "Optional field for including a list of member notifications",
                    {
                        "read": "True or False indicating whether a notification has been read",
                        "kind": "Identifier indicating the kind of notification.\n\nThis may be one of comment, custom, donation_expire_notice, donation_potential_payment, dues, dues_confirm, dues_trial_notice, event_announce, event_announce_to_orgs, event_announce_untrusted, event_cancel, event_change, event_interest_org_push, event_reminder, external_url, group_announce, group_announce_push, invitation_acceptance, join, like, mug_comm_announce, mug_comm_comment, mug_comm_comment_like, mug_comm_invite, org_approve, outside_mup_rec, pending_member, photo, photo_tag, post_attendance, reply, rsvp, rsvp_confirm, spot_open, webview_url",
                        "link": "Link to resource notification was triggered by",
                        "photo": [
                            "A photo related to the notifications. Potentially absent",
                            {
                                "highres_link": "Link for full sized photo",
                                "base_url": "A base url that can be use to construct a photo url from its components",
                                "id": "Numeric photo ID",
                                "photo_link": "Link for standard sized photo",
                                "type": "Type of photo. One of \"event\" or \"member\"",
                                "thumb_link": "Link for thumbnail sized photo"
                            }
                        ],
                        "setting": [
                            "The setting that controls the member's preference for receiving sendings of this kind of notification",
                            {
                                "email": [
                                    "A push setting if available",
                                    {
                                        "name": "display code"
                                    }
                                ],
                                "push": [
                                    "An email setting if available",
                                    {
                                        "name": "display code"
                                    }
                                ]
                            }
                        ],
                        "target": [
                            "kind specific properties which may be used to navigate back to the source of the notification",
                            {
                                "member_id": "If needed, the numeric ID of the member involved in the notification",
                                "event_id": "If needed, the alphanumeric ID of the event which relates to this notification",
                                "photo_id": "If needed, a numeric photo ID",
                                "group_id": "If needed, the numeric ID of the group which relates to this notification",
                                "pending": "If needed, a boolean valid indicating the membership status of member_id in the context of a group",
                                "comment_parent_id": "If needed, the numeric ID of the top-level comment which relates to this notification",
                                "album_id": "If needed, a numeric photo album ID",
                                "comment_id": "If needed, the numeric ID of the comment which relates to this notification",
                                "type": "Identifier indicating the view that should be navigated to.\n\nThese may be one of: group, group_member_list, group_member_profile, event, topic_picker, calendar, group_list, event_photos, event_comments, friends_calendar, friends_groups, start_group, external_url, event_location, deeplink_url",
                                "group_urlname": "If needed, the alpha numeric urlname of the group which relates to this notification"
                            }
                        ],
                        "important": "True or False indicating a notification's level of importance",
                        "photo_type": "Type of photo, event or member",
                        "self": [
                            "Information pertaining the authorized member associated with this notification",
                            {
                                "action": "An action that may be performed on this notification.\n\nFor `group_announce` notifications this may be 'instant_join', meaning the group\nassociated with the notification may be joined without filling out profile\ninformation, or 'form_join', the group associated with the notification requires\nsome join information.\n\n`event_announce` and `spot_open` notifications this may be 'instant_rsvp', meaning\nthe event may be RSVP'd to without requiring additional input, or 'form_rsvp',\nmeaning the event may require some input on the current member's behalf before\nRSVPing.\n\nFor `event_reminder` notifications this may be 'instant_rsvp' if recipient is\na non-rsvper or 'instant_rsvp_no' if recipient is a yes rsvper.\n\nFor `pending_member` notifications this may be 'approve_member'."
                            }
                        ],
                        "text": "Notification content as text",
                        "id": "A unique identifier for a notification",
                        "category": "Identifier indicating a high level categorization of related kinds.\n\nThis may be one of comment, default, event, group, money, photo",
                        "updated": "The last time the notification was modified, indicated as the time in milliseconds since the epoch"
                    }
                ],
                "next_event": [
                    "The next meetup event the current member has RSVP'd to",
                    {
                        "utc_offset": "The local offset from UTC time, in milliseconds",
                        "comment_count": "Returned when fields request parameter contains \"comment_count\" and represents number of comments posted to the event",
                        "rsvp_limit": "The number of \"yes\" RSVPs an event can have before members will be added to the waiting list",
                        "venue": [
                            "Venue, if selected and not hidden",
                            {
                                "zip": "ZIP code if, venue is in US or Canada",
                                "lat, lon": "Geographic coordinates of venue",
                                "localized_country_name": "Name of country the city belongs to",
                                "phone": "Phone number of venue",
                                "address_1": "Line 1 of venue address",
                                "city, state, country": "City, Country Code and if in US state of venue",
                                "address_2": "Line 2 of venue address",
                                "address_3": "Line 3 of venue address",
                                "name": "Venue name",
                                "id": "Venue id",
                                "repinned": "true if the editor of the event altered the original venues pin location, false otherwise"
                            }
                        ],
                        "featured": "Returned when fields request parameter contains \"featured\" and returns \"true\" if the event is featured and \"false\" otherwise",
                        "photo_sample": [
                            "A small collection of Photos uploaded for this event. Returned when fields request parameter contains \"photo_sample\"",
                            {
                                "highres_link": "URL for the photo at its maximum size",
                                "photo_id": "Photo ID",
                                "photo_link": "URL for a standard size of the photo",
                                "thumb_link": "URL for a thumbnail of the photo"
                            }
                        ],
                        "headcount": "The number of members in attendance according to the attendance taker. This may be 0 if attendance has not yet been taken",
                        "survey_questions": [
                            "Returned when fields request parameter contains \"survey_questions\" for events with surveys",
                            {
                                "id": "Question identifier",
                                "question": "Question text",
                                "required": "Flag indicating if a response to this question is required to RSVP. Currently always false."
                            }
                        ],
                        "announced_at": "Organizers and hosts can see when the event as announced in milliseconds since the epoch",
                        "distance": "Distance in miles from the search location, if one was specified",
                        "venue_visibility": "Set to \"members\" or \"public\". The \"venue\" element will not be present if the visibility is \"members\" and the current authenticated user is not a member of the group hosting the event. This value is only returned if requested in the fields parameter",
                        "timezone": "Returned when fields request parameter contains \"timezone\". This represents the universal timezone identifier for the host group",
                        "fee": [
                            "Fee info returned when payment is defined",
                            {
                                "amount": "Amount of the fee",
                                "accepts": "Accepted method of payment. Can be one of \"paypal\", \"amazon\", \"wepay\", or \"cash\"",
                                "description": "Fee description, typically \"per person\"",
                                "currency": "Currency accepted for fee",
                                "label": "Fee label, typically \"Price\"",
                                "required": "\"1\" if payment is required to RSVP, \"0\" otherwise"
                            }
                        ],
                        "rating": [
                            "Only past events have this field, an aggregate of anonymous ratings",
                            {
                                "count": "Number of ratings been collected",
                                "average": "Average of collected ratings"
                            }
                        ],
                        "why": "We should do this because...",
                        "description": "Description of the event.",
                        "is_simplehtml": "Optional field, \"true\" when the event has been saved in a simplified HTML format, \"false\" otherwise.",
                        "short_link": "Returned when fields request parameter contains \"short_link\"",
                        "yes_rsvp_count": "Number of yes RSVPs including guests",
                        "duration": "Event duration in milliseconds, if an end time is specified by the organizer. When not present, a default of 3 hours may be assumed by applications.",
                        "event_hosts": [
                            "List of members hosting the event, only returned if requested in the fields parameter.",
                            {
                                "member_id": "The host's member id",
                                "photo": [
                                    "Member photo if one is exists",
                                    {
                                        "highres_link": "URL for the photo at its maximum size",
                                        "photo_id": "Photo ID",
                                        "photo_link": "URL for a standard size of the photo",
                                        "thumb_link": "URL for a thumbnail of the photo"
                                    }
                                ],
                                "member_name": "The host's member name"
                            }
                        ],
                        "id": "The event id. May be numeric or alphanumeric, always served as a string",
                        "simple_html_description": "Optional field, description of the event in simple HTML format.",
                        "photo_url": "URL of the event photo, if one exists",
                        "publish_status": "\"published\" or \"draft\" only visible to organizers",
                        "group": [
                            "Group that is hosting the event",
                            {
                                "topics": [
                                    "Optional field. Topics related to this group",
                                    {
                                        "urlkey": "Unique keyword used to identify this topic",
                                        "name": "Topic name",
                                        "id": "Topic ID"
                                    }
                                ],
                                "created": "Date and time that the group was founded, in milliseconds since the epoch",
                                "group_lon": "Approximate group longitude",
                                "photos": [
                                    "Returned when fields request parameter contains \"group_photos\". Includes a small set of photos from the group",
                                    {
                                        "highres_link": "URL for the photo at its maximum size",
                                        "photo_id": "Unique photo id",
                                        "photo_link": "URL for a standard size of the photo",
                                        "thumb_link": "URL for a thumbnail of the photo"
                                    }
                                ],
                                "group_photo": [
                                    "Returned when fields request parameter contains \"group_photo\". Represents photo for the group hosting the event",
                                    {
                                        "highres_link": "URL for the photo at its maximum size",
                                        "photo_id": "Unique photo id",
                                        "photo_link": "URL for a standard size of the photo",
                                        "thumb_link": "URL for a thumbnail of the photo"
                                    }
                                ],
                                "join_mode": "\"open\", \"approval\", or \"closed\"",
                                "approved": "Returned when fields request parameter contains \"group_approved\". True if this group has been approved. New groups are generally approved (or removed) soon after creation.",
                                "name": "Group name",
                                "self": [
                                    "Returned when fields request parameter contains 'self_membership_dues' or 'group_status'",
                                    {
                                        "membership_dues": "The authenticated member's group dues in the form returned by group endpoints",
                                        "status": "The member's status. May be one of 'active' or 'pending'"
                                    }
                                ],
                                "id": "Group id",
                                "category": [
                                    "Optional field. Category of this group",
                                    {
                                        "name": "Display name of the category",
                                        "id": "Numeric identifier of the category",
                                        "shortname": "String identifier of the category"
                                    }
                                ],
                                "urlname": "Group URL name",
                                "membership_dues": [
                                    "Returned when fields request parameter contains \"group_membership_dues\"",
                                    {
                                        "refund_policy": "Array of payment refund policies. May be one or more of \"none\", \"member_leaves\", \"group_closes\", \"member_banned\", or \"custom\"",
                                        "reasons": "Array of reasons types in the following values compensate_organizer, cover_costs, encourage_engagement, improve_meetups, other, provide_supplies, reserve_fund",
                                        "methods": "Array of acceptable payment methods. May be one or more of \"amazon_payments\", \"paypal\", \"credit_card\" or \"other\"",
                                        "fee": "Numeric fee value",
                                        "currency": "Currency in which the fee is declared",
                                        "fee_desc": "Description of fee",
                                        "trial_days": "When present, returns the number of days the group is offering a free trial period for to new members. When not present, this indicates that the group does not offer a trial membership period",
                                        "reasons_other": "An additional reason if specified.",
                                        "required": "\"2\" if dues are required to join, \"1\" if dues are required to RSVP, \"0\" otherwise",
                                        "self_payment_required": "Returns true if the authorized user is prevented from participating in the group until a payment is made"
                                    }
                                ],
                                "group_lat": "Approximate group latitude",
                                "who": "What the group calls its members"
                            }
                        ],
                        "photo_album_id": "Returned when fields request parameter contains \"photo_album_id\" and returns the ID of the photo album for this event, if one exists",
                        "rsvp_rules": [
                            "Conditions set by the organizer, only returned if requested in the fields parameter.",
                            {
                                "refund_policy": [
                                    "The organizer-defined terms for refunds. If this is defined, you must provide the authenticated member a way to access this information before they can RSVP. They will need to agree to these terms before they RSVP",
                                    {
                                        "policies": " list of one or more of the following. 'no_refunds' if the organizer will not issue refunds', 'member_cancellation' if the organizer offers a refund for member cancellation, 'event_cancellation' if the organizer offers a refund if the event is canceled, 'event_rescheduled' if the organizer offers a refund when the event is rescheduled",
                                        "days": "if member_cancellation is present, it's relative to this many days before the event",
                                        "notes": "additional refund policy notes"
                                    }
                                ],
                                "open_time": "UTC time that members may begin to RSVP",
                                "closed": "Flag indicating that RSVPing is closed for the event. 1 is true 0 is false",
                                "guest_limit": "Number of guests members may include in their RSVP, 0 or more",
                                "close_time": "UTC time that RSVPs will no longer be accepted, though organizers may close RSVPs earlier"
                            }
                        ],
                        "visibility": "Event visibility: \"public\", \"members\" or \"public_limited\". Events in private groups that do not expose limited information are visible only to that group's members and should not be made public.",
                        "created": "UTC creation time of the event, in milliseconds since the epoch",
                        "maybe_rsvp_count": "Number of maybe RSVPs including guests",
                        "how_to_find_us": "The information provided by the event host for \"How will members find you there?\". Visible when location is visible to the authenticated member",
                        "event_url": "URL of the event's page on meetup.com",
                        "announced": "Organizers and hosts can see if the event was announced",
                        "photo_count": "Returned when fields request parameter contains \"photo_count\" and represents number of photos posted to the event",
                        "rsvpable": "Indicates if the currently authenticated member can RSVP or not, only returned if requested in the fields parameter",
                        "rsvp_sample": [
                            "A small collection of RSVPs for members attending this event, returned when fields request parameter value includes 'rsvp_sample'",
                            {
                                "member": [
                                    "Member who RSVP'd",
                                    {
                                        "member_id": "Member's ID",
                                        "name": "Name of the member",
                                        "self": [
                                            "A small set of data representing the authenticated member's context with this member",
                                            {
                                                "friend": "Boolean indicator for whether or not the authenticated member is friends with this member"
                                            }
                                        ]
                                    }
                                ],
                                "rsvp_id": "The RSVP id. May be -1 for events scheduled in the future",
                                "mtime": "Last modified time of the RSVP, in milliseconds since the epoch.",
                                "created": "Creation time of the RSVP, in milliseconds since the epoch.",
                                "member_photo": [
                                    "The RSVPing member's photo if available. Members who registered via Facebook may not have highres photos",
                                    {
                                        "highres_link": "URL for the photo at its maximum size",
                                        "photo_id": "Photo ID",
                                        "photo_link": "URL for a standard size of the photo",
                                        "thumb_link": "URL for a thumbnail of the photo"
                                    }
                                ]
                            }
                        ],
                        "series": [
                            "Returned when fields request parameter contains \"series\" for events that are part of a series of events",
                            {
                                "end_date": "Date when this series ends/ended, in milliseconds since the epoch. Some series repeat forever. In those cases, this field will be absent",
                                "description": "Human displayable description of how often events in this series occur",
                                "id": "Unique numeric identifier for the series",
                                "start_date": "Date when this series begins/began, in milliseconds since the epoch"
                            }
                        ],
                        "name": "The name of the event",
                        "self": [
                            "Returned when fields request parameter contains \"self\" and represents details particular to the authorized user, only present if requested and user is a member of the hosting group",
                            {
                                "rated": "Boolean indicator of whether the current member rated the event or not",
                                "pay_status": "The authenticated member's payment status. This may be one of 'none', 'paid', 'unpaid', 'partially_paid', 'payment_pending', 'echeck_pending', 'refund_pending', 'partially_refunded', 'refunded', 'pay_status'.",
                                "role": "The authenticated member's role in within the group, if any. This may be one of: Organizer, Assistant Organizer, Event Organizer, etc.",
                                "watching": "For events without waitlist you may check your watchlist status with this property. Values may either be true of false.",
                                "actions": "list of actions the current user may perform, potentially: \"announce\" to announce the event to the group's members, \"attendance\" to view or take attendance for the event, \"payments\" to mark members as paid if the event is a paid event, \"publish\" to publish a draft event, \"edit\" to edit the event information, \"edit_hosts\" to edit the hosts for the event, \"delete\" to delete the event, \"rsvp\" to RSVP yes or no to the event, or \"wait\" to get on the waiting list (using the same RSVP methods). For events without a waitlist, you may see either \"watch\" or \"unwatch\" to watch for opening spots for the event when the event is full. If an organizer requires membership dues to rsvp and the authorized member has not paid theirs, \"dues\" will be included",
                                "rsvp": [
                                    "Member's RSVP, if any",
                                    {
                                        "answers": "List of answers to event survey questions asked when the member RSVP'd in the order asked, only available to organizers and assistant organizers. By default, this field returns a list of strings answers. You can request more structured answer info including the time the answer was updated, by setting fields=rsvp_answer_info in the request. The structured format for answers is defined in Rsvp API's response",
                                        "guests": "number of guests",
                                        "response": "\"yes\", \"no\", \"yes_pending_payment\", or \"waitlist\""
                                    }
                                ]
                            }
                        ],
                        "time": "UTC start time of the event, in milliseconds since the epoch",
                        "updated": "UTC last modified time of the event, in milliseconds since the epoch",
                        "trending_rank": "Indicates the trending rank within the current result set. The best rank is zero, increasing rank values are less \"trending\". This value is only returned if requested in the fields parameter",
                        "status": "\"cancelled\", \"upcoming\", \"past\", \"proposed\", \"suggested\" or \"draft\""
                    }
                ]
            },
            "tag": null,
            "responseModel": "GetDashboard"
        },
        "GetEventComment": {
            "version": "2",
            "name": "GetEventComment",
            "httpMethod": "GET",
            "parameters": {
                "id": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "fields": {
                    "location": "query",
                    "required": false,
                    "description": "comma-separate list of optional fields"
                },
                "page": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "offset": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "desc": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "order": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "only": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "omit": {
                    "location": "query",
                    "required": false,
                    "description": null
                }
            },
            "summary": "Retrieve a single event comment or reply",
            "uri": "/2/event_comment/{id}",
            "notes": "Only authorization parameters are needed.",
            "response": {
                "member_id": "The ID of the member that posted the comment. May be 0 for former members",
                "like_count": "optional fields parameter which adds the number of likes this comment has received",
                "member_photo": [
                    "If the optional \"fields\" parameter contains \"member_photo\", the member photo associated with the comment",
                    {
                        "photo_id": "ID of the photo",
                        "photo_link": "URL for the standard sized photo",
                        "thumb_link": "URL for the thumbnail sized photo",
                        "hires_link": "URL for the original sized photo"
                    }
                ],
                "comment_url": "URL for the event comment on meetup.com",
                "member_name": "The name of the member that posted the comment. May be \"Former Member\" for former members",
                "in_reply_to": "If this is a reply, the ID of the comment replied to",
                "event_comment_id": "The ID of this comment",
                "event_id": "The string ID of the event the comment belongs to",
                "replies": "Optional fields parameter returning array of the last 20 replies to comment",
                "group_id": "The ID of the group that the event belongs to",
                "self": [
                    "Optional field with details particular to the authorized user, only present if requested and user is a member of the hosting group",
                    {
                        "actions": "list of actions the current user may perform on this comment, potentially: 'flag_spam', 'delete', 'like' or 'unlike'"
                    }
                ],
                "comment": "The comment the member left for the event",
                "event": [
                    "Optional field, basic info on event associated with comment",
                    {
                        "name": "Name of the event",
                        "id": "String ID of the event",
                        "time": "UTC start time of the event, in milliseconds since the epoch",
                        "event_url": "URL of the event's page on meetup.com"
                    }
                ],
                "notifications": "optional fields parameter to append the authorized member's current notification preference for the given comment"
            },
            "tag": "get",
            "responseModel": "GetEventComment"
        },
        "GetEventCommentLikes": {
            "version": "2",
            "name": "GetEventCommentLikes",
            "httpMethod": "GET",
            "parameters": {
                "comment_id": {
                    "location": "query",
                    "required": false,
                    "description": "Return likes for a given comment_id"
                },
                "created": {
                    "location": "query",
                    "required": false,
                    "description": "Order by the time the member liked like comment (default: descending)"
                },
                "page": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "offset": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "desc": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "order": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "only": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "omit": {
                    "location": "query",
                    "required": false,
                    "description": null
                }
            },
            "summary": "Api for listing likes of a given event comment",
            "uri": "/2/event_comment_likes",
            "notes": "At least one of the required parameters must be supplied with the request.",
            "response": {
                "member": [
                    "member who liked the comment",
                    {
                        "member_id": "Member's ID",
                        "member_state": "Optional field",
                        "member_city": "Optional field",
                        "name": "Name of the member",
                        "photo": [
                            "if available, the member's photo",
                            {
                                "highres_link": "URL for the photo at its maximum size",
                                "photo_id": "Photo ID",
                                "photo_link": "URL for a standard size of the photo",
                                "thumb_link": "URL for a thumbnail of the photo"
                            }
                        ],
                        "member_country": "Optional field"
                    }
                ],
                "event_comment_id": "ID of the comment liked",
                "created": "UTC creation time of the event, in milliseconds since the epoch"
            },
            "tag": null,
            "responseModel": "GetEventCommentLikes"
        },
        "GetEventComments": {
            "version": "2",
            "name": "GetEventComments",
            "httpMethod": "GET",
            "parameters": {
                "comment_id": {
                    "location": "query",
                    "required": false,
                    "description": "Return comments for a given set of comment IDs, separated by commas"
                },
                "member_id": {
                    "location": "query",
                    "required": false,
                    "description": "Return comments for the given member_ids, separated by commas"
                },
                "fields": {
                    "location": "query",
                    "required": false,
                    "description": "Optionally accepts the value \"member_photo\" or \"notifications\""
                },
                "group_id": {
                    "location": "query",
                    "required": false,
                    "description": "Return comments in groups with these ID numbers, separated by commas"
                },
                "event_id": {
                    "location": "query",
                    "required": false,
                    "description": "Return comments on these events, separated by commas."
                },
                "name": {
                    "location": "query",
                    "required": false,
                    "description": "Order by the name of the member"
                },
                "thread": {
                    "location": "query",
                    "required": false,
                    "description": "Order by comment threads, those with the most recent activity are listed first. Only one event may be provided and desc not supported. Also note that with this ordering, *replies* are excluded from pagination accounting. Only top-level comments will be capped at the page size."
                },
                "time": {
                    "location": "query",
                    "required": false,
                    "description": "Order by the time that each rating was posted (default: descending)"
                },
                "page": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "offset": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "desc": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "order": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "only": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "omit": {
                    "location": "query",
                    "required": false,
                    "description": null
                }
            },
            "summary": "This method returns messages that appear under \"Talk about this Meetup\". To post messages, see the corresponding write method.",
            "uri": "/2/event_comments",
            "notes": "At least one of the required parameters must be supplied with the request.",
            "response": {
                "member_id": "The ID of the member that posted the comment. May be 0 for former members",
                "like_count": "optional fields parameter which adds the number of likes this comment has received",
                "member_photo": [
                    "If the optional \"fields\" parameter contains \"member_photo\", the member photo associated with the comment",
                    {
                        "photo_id": "ID of the photo",
                        "photo_link": "URL for the standard sized photo",
                        "thumb_link": "URL for the thumbnail sized photo",
                        "hires_link": "URL for the original sized photo"
                    }
                ],
                "comment_url": "URL for the event comment on meetup.com",
                "member_name": "The name of the member that posted the comment. May be \"Former Member\" for former members",
                "in_reply_to": "If this is a reply, the ID of the comment replied to",
                "event_comment_id": "The ID of this comment",
                "event_id": "The string ID of the event the comment belongs to",
                "group_id": "The ID of the group that the event belongs to",
                "self": [
                    "Optional field with details particular to the authorized user, only present if requested and user is a member of the hosting group",
                    {
                        "actions": "list of actions the current user may perform on this comment, potentially: 'flag_spam', 'delete', 'like' or 'unlike'"
                    }
                ],
                "comment": "The comment the member left for the event",
                "event": [
                    "Optional field, basic info on event associated with comment",
                    {
                        "name": "Name of the event",
                        "id": "String ID of the event",
                        "time": "UTC start time of the event, in milliseconds since the epoch",
                        "event_url": "URL of the event's page on meetup.com"
                    }
                ],
                "notifications": "optional fields parameter to append the authorized member's current notification preference for the given comment"
            },
            "tag": null,
            "responseModel": "GetEventComments"
        },
        "GetEventRatings": {
            "version": "2",
            "name": "GetEventRatings",
            "httpMethod": "GET",
            "parameters": {
                "member_id": {
                    "location": "query",
                    "required": false,
                    "description": "The ID of a member to filter ratings on"
                },
                "event_id": {
                    "location": "query",
                    "required": false,
                    "description": "The ID of the event to fetch ratings data for"
                },
                "rating": {
                    "location": "query",
                    "required": false,
                    "description": "Order by the value for each rating posted"
                },
                "time": {
                    "location": "query",
                    "required": false,
                    "description": "Order by the time that each rating was posted"
                },
                "page": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "offset": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "desc": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "order": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "only": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "omit": {
                    "location": "query",
                    "required": false,
                    "description": null
                }
            },
            "summary": "API method for accessing Meetup comments",
            "uri": "/2/event_ratings",
            "notes": "At least one of the required parameters must be supplied with the request.",
            "response": {
                "member_id": "id of the member leaving the review",
                "event_id": "The string ID of the event",
                "group_id": "The ID of the group that the event belongs to",
                "rating": "Only present if the authenticated member is the reviewer; number of stars given",
                "time": "The date/time that the review was created",
                "member_name": "name of member leaving th review"
            },
            "tag": null,
            "responseModel": "GetEventRatings"
        },
        "GetEvents": {
            "version": "2",
            "name": "GetEvents",
            "httpMethod": "GET",
            "parameters": {
                "rsvp": {
                    "location": "query",
                    "required": false,
                    "description": "Filters events by the currently authenticated member's RSVP status. May be a comma delimited list of \"yes\", \"no\", \"waitlist\", \"maybe\" or \"none\""
                },
                "group_urlname": {
                    "location": "query",
                    "required": false,
                    "description": "Path to group from meetup.com, no slashes"
                },
                "event_id": {
                    "location": "query",
                    "required": false,
                    "description": "Multiple ids may be separated with commas"
                },
                "group_id": {
                    "location": "query",
                    "required": false,
                    "description": "Multiple ids may be separated with commas"
                },
                "limited_events": {
                    "location": "query",
                    "required": false,
                    "description": "Include limited event information for private groups that wish to expose only a small amount of information about their events. This includes just: id, name, utc_offset, time, duration, yes_rsvp_count, waitlist_count, group, visibility, timezone. Value must be true or false."
                },
                "text_format": {
                    "location": "query",
                    "required": false,
                    "description": "Format of the description text, \"html\" or \"plain\". Defaults to \"html\""
                },
                "group_domain": {
                    "location": "query",
                    "required": false,
                    "description": "Group custom domain"
                },
                "venue_id": {
                    "location": "query",
                    "required": false,
                    "description": "Multiple ids may be separated with commas"
                },
                "member_id": {
                    "location": "query",
                    "required": false,
                    "description": "Single member id, to find events in this member's groups"
                },
                "time": {
                    "location": "query",
                    "required": false,
                    "description": "(default order) ascending"
                },
                "fields": {
                    "location": "query",
                    "required": false,
                    "description": "Request that additional fields (separated by commas) be included in the output"
                },
                "status": {
                    "location": "query",
                    "required": false,
                    "description": "Status may be \"upcoming\", \"past\", \"proposed\", \"suggested\", \"cancelled\", \"draft\" or multiple separated by a comma. The default is \"upcoming\", which includes Meetups that are happening now according to their **duration**. Meetups that are \"proposed\" or \"suggested\" do not have a date assigned; the former are listed on the site as <i>official</i> while the latter appear as <i>in the making</i>. Drafts are only visible to organizers of groups hosting the events."
                },
                "page": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "offset": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "desc": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "order": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "only": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "omit": {
                    "location": "query",
                    "required": false,
                    "description": null
                }
            },
            "summary": "Access Meetup events using a group, member, or event id. Events in private groups are available only to authenticated members of those groups. To search events by topic or location, see [Open Events](/meetup_api/docs/2/open_events).",
            "uri": "/2/events",
            "notes": "At least one of the required parameter(s) must be supplied with the request. Some groups, while remaining private, still wish to show some information about their events. You can include these events in results using the `limited_events` request parameter.",
            "response": {
                "utc_offset": "The local offset from UTC time, in milliseconds",
                "comment_count": "Returned when fields request parameter contains \"comment_count\" and represents number of comments posted to the event",
                "rsvp_limit": "The number of \"yes\" RSVPs an event can have before members will be added to the waiting list",
                "venue": [
                    "Venue, if selected and not hidden",
                    {
                        "zip": "ZIP code if, venue is in US or Canada",
                        "lat, lon": "Geographic coordinates of venue",
                        "localized_country_name": "Name of country the city belongs to",
                        "phone": "Phone number of venue",
                        "address_1": "Line 1 of venue address",
                        "city, state, country": "City, Country Code and if in US state of venue",
                        "address_2": "Line 2 of venue address",
                        "address_3": "Line 3 of venue address",
                        "name": "Venue name",
                        "id": "Venue id",
                        "repinned": "true if the editor of the event altered the original venues pin location, false otherwise"
                    }
                ],
                "featured": "Returned when fields request parameter contains \"featured\" and returns \"true\" if the event is featured and \"false\" otherwise",
                "photo_sample": [
                    "A small collection of Photos uploaded for this event. Returned when fields request parameter contains \"photo_sample\"",
                    {
                        "highres_link": "URL for the photo at its maximum size",
                        "photo_id": "Photo ID",
                        "photo_link": "URL for a standard size of the photo",
                        "thumb_link": "URL for a thumbnail of the photo"
                    }
                ],
                "headcount": "The number of members in attendance according to the attendance taker. This may be 0 if attendance has not yet been taken",
                "survey_questions": [
                    "Returned when fields request parameter contains \"survey_questions\" for events with surveys",
                    {
                        "id": "Question identifier",
                        "question": "Question text",
                        "required": "Flag indicating if a response to this question is required to RSVP. Currently always false."
                    }
                ],
                "announced_at": "Organizers and hosts can see when the event as announced in milliseconds since the epoch",
                "distance": "Distance in miles from the search location, if one was specified",
                "venue_visibility": "Set to \"members\" or \"public\". The \"venue\" element will not be present if the visibility is \"members\" and the current authenticated user is not a member of the group hosting the event. This value is only returned if requested in the fields parameter",
                "timezone": "Returned when fields request parameter contains \"timezone\". This represents the universal timezone identifier for the host group",
                "fee": [
                    "Fee info returned when payment is defined",
                    {
                        "amount": "Amount of the fee",
                        "accepts": "Accepted method of payment. Can be one of \"paypal\", \"amazon\", \"wepay\", or \"cash\"",
                        "description": "Fee description, typically \"per person\"",
                        "currency": "Currency accepted for fee",
                        "label": "Fee label, typically \"Price\"",
                        "required": "\"1\" if payment is required to RSVP, \"0\" otherwise"
                    }
                ],
                "rating": [
                    "Only past events have this field, an aggregate of anonymous ratings",
                    {
                        "count": "Number of ratings been collected",
                        "average": "Average of collected ratings"
                    }
                ],
                "why": "We should do this because...",
                "description": "Description of the event.",
                "is_simplehtml": "Optional field, \"true\" when the event has been saved in a simplified HTML format, \"false\" otherwise.",
                "short_link": "Returned when fields request parameter contains \"short_link\"",
                "yes_rsvp_count": "Number of yes RSVPs including guests",
                "duration": "Event duration in milliseconds, if an end time is specified by the organizer. When not present, a default of 3 hours may be assumed by applications.",
                "event_hosts": [
                    "List of members hosting the event, only returned if requested in the fields parameter.",
                    {
                        "member_id": "The host's member id",
                        "photo": [
                            "Member photo if one is exists",
                            {
                                "highres_link": "URL for the photo at its maximum size",
                                "photo_id": "Photo ID",
                                "photo_link": "URL for a standard size of the photo",
                                "thumb_link": "URL for a thumbnail of the photo"
                            }
                        ],
                        "member_name": "The host's member name"
                    }
                ],
                "id": "The event id. May be numeric or alphanumeric, always served as a string",
                "simple_html_description": "Optional field, description of the event in simple HTML format.",
                "photo_url": "URL of the event photo, if one exists",
                "publish_status": "\"published\" or \"draft\" only visible to organizers",
                "group": [
                    "Group that is hosting the event",
                    {
                        "topics": [
                            "Optional field. Topics related to this group",
                            {
                                "urlkey": "Unique keyword used to identify this topic",
                                "name": "Topic name",
                                "id": "Topic ID"
                            }
                        ],
                        "created": "Date and time that the group was founded, in milliseconds since the epoch",
                        "group_lon": "Approximate group longitude",
                        "photos": [
                            "Returned when fields request parameter contains \"group_photos\". Includes a small set of photos from the group",
                            {
                                "highres_link": "URL for the photo at its maximum size",
                                "photo_id": "Unique photo id",
                                "photo_link": "URL for a standard size of the photo",
                                "thumb_link": "URL for a thumbnail of the photo"
                            }
                        ],
                        "group_photo": [
                            "Returned when fields request parameter contains \"group_photo\". Represents photo for the group hosting the event",
                            {
                                "highres_link": "URL for the photo at its maximum size",
                                "photo_id": "Unique photo id",
                                "photo_link": "URL for a standard size of the photo",
                                "thumb_link": "URL for a thumbnail of the photo"
                            }
                        ],
                        "join_mode": "\"open\", \"approval\", or \"closed\"",
                        "approved": "Returned when fields request parameter contains \"group_approved\". True if this group has been approved. New groups are generally approved (or removed) soon after creation.",
                        "name": "Group name",
                        "self": [
                            "Returned when fields request parameter contains 'self_membership_dues' or 'group_status'",
                            {
                                "membership_dues": "The authenticated member's group dues in the form returned by group endpoints",
                                "status": "The member's status. May be one of 'active' or 'pending'"
                            }
                        ],
                        "id": "Group id",
                        "category": [
                            "Optional field. Category of this group",
                            {
                                "name": "Display name of the category",
                                "id": "Numeric identifier of the category",
                                "shortname": "String identifier of the category"
                            }
                        ],
                        "urlname": "Group URL name",
                        "membership_dues": [
                            "Returned when fields request parameter contains \"group_membership_dues\"",
                            {
                                "refund_policy": "Array of payment refund policies. May be one or more of \"none\", \"member_leaves\", \"group_closes\", \"member_banned\", or \"custom\"",
                                "reasons": "Array of reasons types in the following values compensate_organizer, cover_costs, encourage_engagement, improve_meetups, other, provide_supplies, reserve_fund",
                                "methods": "Array of acceptable payment methods. May be one or more of \"amazon_payments\", \"paypal\", \"credit_card\" or \"other\"",
                                "fee": "Numeric fee value",
                                "currency": "Currency in which the fee is declared",
                                "fee_desc": "Description of fee",
                                "trial_days": "When present, returns the number of days the group is offering a free trial period for to new members. When not present, this indicates that the group does not offer a trial membership period",
                                "reasons_other": "An additional reason if specified.",
                                "required": "\"2\" if dues are required to join, \"1\" if dues are required to RSVP, \"0\" otherwise",
                                "self_payment_required": "Returns true if the authorized user is prevented from participating in the group until a payment is made"
                            }
                        ],
                        "group_lat": "Approximate group latitude",
                        "who": "What the group calls its members"
                    }
                ],
                "photo_album_id": "Returned when fields request parameter contains \"photo_album_id\" and returns the ID of the photo album for this event, if one exists",
                "rsvp_rules": [
                    "Conditions set by the organizer, only returned if requested in the fields parameter.",
                    {
                        "refund_policy": [
                            "The organizer-defined terms for refunds. If this is defined, you must provide the authenticated member a way to access this information before they can RSVP. They will need to agree to these terms before they RSVP",
                            {
                                "policies": " list of one or more of the following. 'no_refunds' if the organizer will not issue refunds', 'member_cancellation' if the organizer offers a refund for member cancellation, 'event_cancellation' if the organizer offers a refund if the event is canceled, 'event_rescheduled' if the organizer offers a refund when the event is rescheduled",
                                "days": "if member_cancellation is present, it's relative to this many days before the event",
                                "notes": "additional refund policy notes"
                            }
                        ],
                        "open_time": "UTC time that members may begin to RSVP",
                        "closed": "Flag indicating that RSVPing is closed for the event. 1 is true 0 is false",
                        "guest_limit": "Number of guests members may include in their RSVP, 0 or more",
                        "close_time": "UTC time that RSVPs will no longer be accepted, though organizers may close RSVPs earlier"
                    }
                ],
                "visibility": "Event visibility: \"public\", \"members\" or \"public_limited\". Events in private groups that do not expose limited information are visible only to that group's members and should not be made public.",
                "created": "UTC creation time of the event, in milliseconds since the epoch",
                "maybe_rsvp_count": "Number of maybe RSVPs including guests",
                "how_to_find_us": "The information provided by the event host for \"How will members find you there?\". Visible when location is visible to the authenticated member",
                "event_url": "URL of the event's page on meetup.com",
                "announced": "Organizers and hosts can see if the event was announced",
                "photo_count": "Returned when fields request parameter contains \"photo_count\" and represents number of photos posted to the event",
                "rsvpable": "Indicates if the currently authenticated member can RSVP or not, only returned if requested in the fields parameter",
                "rsvp_sample": [
                    "A small collection of RSVPs for members attending this event, returned when fields request parameter value includes 'rsvp_sample'",
                    {
                        "member": [
                            "Member who RSVP'd",
                            {
                                "member_id": "Member's ID",
                                "name": "Name of the member",
                                "self": [
                                    "A small set of data representing the authenticated member's context with this member",
                                    {
                                        "friend": "Boolean indicator for whether or not the authenticated member is friends with this member"
                                    }
                                ]
                            }
                        ],
                        "rsvp_id": "The RSVP id. May be -1 for events scheduled in the future",
                        "mtime": "Last modified time of the RSVP, in milliseconds since the epoch.",
                        "created": "Creation time of the RSVP, in milliseconds since the epoch.",
                        "member_photo": [
                            "The RSVPing member's photo if available. Members who registered via Facebook may not have highres photos",
                            {
                                "highres_link": "URL for the photo at its maximum size",
                                "photo_id": "Photo ID",
                                "photo_link": "URL for a standard size of the photo",
                                "thumb_link": "URL for a thumbnail of the photo"
                            }
                        ]
                    }
                ],
                "series": [
                    "Returned when fields request parameter contains \"series\" for events that are part of a series of events",
                    {
                        "end_date": "Date when this series ends/ended, in milliseconds since the epoch. Some series repeat forever. In those cases, this field will be absent",
                        "description": "Human displayable description of how often events in this series occur",
                        "id": "Unique numeric identifier for the series",
                        "start_date": "Date when this series begins/began, in milliseconds since the epoch"
                    }
                ],
                "name": "The name of the event",
                "self": [
                    "Returned when fields request parameter contains \"self\" and represents details particular to the authorized user, only present if requested and user is a member of the hosting group",
                    {
                        "rated": "Boolean indicator of whether the current member rated the event or not",
                        "pay_status": "The authenticated member's payment status. This may be one of 'none', 'paid', 'unpaid', 'partially_paid', 'payment_pending', 'echeck_pending', 'refund_pending', 'partially_refunded', 'refunded', 'pay_status'.",
                        "role": "The authenticated member's role in within the group, if any. This may be one of: Organizer, Assistant Organizer, Event Organizer, etc.",
                        "watching": "For events without waitlist you may check your watchlist status with this property. Values may either be true of false.",
                        "actions": "list of actions the current user may perform, potentially: \"announce\" to announce the event to the group's members, \"attendance\" to view or take attendance for the event, \"payments\" to mark members as paid if the event is a paid event, \"publish\" to publish a draft event, \"edit\" to edit the event information, \"edit_hosts\" to edit the hosts for the event, \"delete\" to delete the event, \"rsvp\" to RSVP yes or no to the event, or \"wait\" to get on the waiting list (using the same RSVP methods). For events without a waitlist, you may see either \"watch\" or \"unwatch\" to watch for opening spots for the event when the event is full. If an organizer requires membership dues to rsvp and the authorized member has not paid theirs, \"dues\" will be included",
                        "rsvp": [
                            "Member's RSVP, if any",
                            {
                                "answers": "List of answers to event survey questions asked when the member RSVP'd in the order asked, only available to organizers and assistant organizers. By default, this field returns a list of strings answers. You can request more structured answer info including the time the answer was updated, by setting fields=rsvp_answer_info in the request. The structured format for answers is defined in Rsvp API's response",
                                "guests": "number of guests",
                                "response": "\"yes\", \"no\", \"yes_pending_payment\", or \"waitlist\""
                            }
                        ]
                    }
                ],
                "time": "UTC start time of the event, in milliseconds since the epoch",
                "updated": "UTC last modified time of the event, in milliseconds since the epoch",
                "trending_rank": "Indicates the trending rank within the current result set. The best rank is zero, increasing rank values are less \"trending\". This value is only returned if requested in the fields parameter",
                "status": "\"cancelled\", \"upcoming\", \"past\", \"proposed\", \"suggested\" or \"draft\""
            },
            "tag": null,
            "responseModel": "GetEvents"
        },
        "GetGroups": {
            "version": "2",
            "name": "GetGroups",
            "httpMethod": "GET",
            "parameters": {
                "topic": {
                    "location": "query",
                    "required": false,
                    "description": "Only return groups in the specified topic [one topic allowed]"
                },
                "groupnum": {
                    "location": "query",
                    "required": false,
                    "description": "Return the group with this topic and number"
                },
                "zip": {
                    "location": "query",
                    "required": false,
                    "description": "A valid US zip code, limits the returned groups to those within radius miles."
                },
                "lat": {
                    "location": "query",
                    "required": false,
                    "description": "A valid latitude and longitude, limits the returned groups to those within radius miles"
                },
                "lon": {
                    "location": "query",
                    "required": false,
                    "description": "A valid latitude and longitude, limits the returned groups to those within radius miles"
                },
                "group_urlname": {
                    "location": "query",
                    "required": false,
                    "description": "one or more separated by commas, includes no slashes"
                },
                "group_id": {
                    "location": "query",
                    "required": false,
                    "description": "one or more separated by commas"
                },
                "organizer_id": {
                    "location": "query",
                    "required": false,
                    "description": "one or more organizer IDs, separated by commas"
                },
                "domain": {
                    "location": "query",
                    "required": false,
                    "description": "one or more custom group domains, separated by commas"
                },
                "member_id": {
                    "location": "query",
                    "required": false,
                    "description": "one or more separated by commas, for groups this member belongs to"
                },
                "radius": {
                    "location": "query",
                    "required": false,
                    "description": "Radius, in miles for geographic requests, default 25 -- maximum 100"
                },
                "fields": {
                    "location": "query",
                    "required": false,
                    "description": "optional result fields, separated by commas."
                },
                "category_id": {
                    "location": "query",
                    "required": false,
                    "description": "Only return groups in the specified category. [one category allowed]"
                },
                "country": {
                    "location": "query",
                    "required": false,
                    "description": "A valid country code, city and for the US, State. limits the returned groups to those within radius miles"
                },
                "city": {
                    "location": "query",
                    "required": false,
                    "description": "A valid country code, city and for the US, State. limits the returned groups to those within radius miles"
                },
                "state": {
                    "location": "query",
                    "required": false,
                    "description": "A valid country code, city and for the US, State. limits the returned groups to those within radius miles"
                },
                "name": {
                    "location": "query",
                    "required": false,
                    "description": "the name of the group"
                },
                "location": {
                    "location": "query",
                    "required": false,
                    "description": "group location, country, state [if present], city"
                },
                "id": {
                    "location": "query",
                    "required": false,
                    "description": "group creation time [newest first]"
                },
                "members": {
                    "location": "query",
                    "required": false,
                    "description": "number of members [largest first]"
                },
                "page": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "offset": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "desc": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "order": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "only": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "omit": {
                    "location": "query",
                    "required": false,
                    "description": null
                }
            },
            "summary": "Fetch information about Meetup Groups.",
            "uri": "/2/groups",
            "notes": "At least one of the required parameter(s) must be supplied with the request. Answers to questions are expected to follow the naming convention: answer_{question_id}=myanswer when joining with the [Profile Create](/meetup_api/docs/2/profile) method.",
            "response": {
                "utc_offset": "This represents the utc time offset of the group's local time",
                "country": "Country of the group",
                "pending_members": "Optional fields parameter, visible only to the organizers, that represents the number of pending members for groups that require membership approval",
                "similar_groups": [
                    "List of similar groups, best suited for the authorized member when a single group is queried for. Note: this field is being deprecated in favor of making a separate request to /:urlname/similar_groups/",
                    {
                        "join_mode": "\"open\", \"approval\", or \"closed\"",
                        "created": "Date and time that the group was founded, in milliseconds since the epoch",
                        "name": "Group name",
                        "group_lon": "Approximate group longitude",
                        "id": "Group id",
                        "urlname": "Group URL name",
                        "photos": "Optional field, a small set of photos from the group. See documentation for \"photos\" above.",
                        "group_lat": "Approximate group latitude",
                        "who": "What the group calls its members"
                    }
                ],
                "city": "City of the group",
                "timezone": "This represents the universal timezone identifier for the group",
                "primary_topic": "The groups primary topic",
                "rating": "0 to 5, average of group reviews",
                "link": "URL of group home",
                "description": "Group description",
                "lon": "Longitude",
                "welcome_message": "Optional fields parameter. Returns the Group's default welcome message if the authenticated member is the organizer of the group",
                "is_simplehtml": "Optional field, \"true\" when the group description has been saved in a simplified HTML format, \"false\" otherwise.",
                "group_photo": [
                    "Main photo associated with the group",
                    {
                        "highres_link": "URL for the photo at its maximum size",
                        "photo_id": "-",
                        "photo_link": "URL for a standard size of the photo",
                        "thumb_link": "URL for the thumbnail sized photo"
                    }
                ],
                "photos": [
                    "Optional field, a small set of photos from the group",
                    {
                        "highres_link": "URL for the photo at its maximum size",
                        "photo_id": "-",
                        "photo_link": "URL for a standard size of the photo",
                        "thumb_link": "URL for the thumbnail sized photo"
                    }
                ],
                "short_link": "Optional field, a shorted URL for the group",
                "other_services": [
                    "Optional fields parameter for linked services",
                    {
                        "[service-name]": [
                            "This element is flickr, tumblr, twitter, or linkedin",
                            {
                                "identifier": "identifier for the service, a username or URL"
                            }
                        ]
                    }
                ],
                "join_mode": "\"open\", \"closed\", or \"approval\"",
                "approved": "Optional field, true if this group has been approved. New groups are generally approved (or removed) soon after creation.",
                "contributions": [
                    "Optional field containing the contribution details of the group",
                    {
                        "thanks": "The 'thank you' message to be given when a contribution is made",
                        "reason": "The reason a member might consider contributing",
                        "potential": "Boolean stating that potential contributions are enabled for the group",
                        "enabled": "Boolean stating if contributions are enabled for the group"
                    }
                ],
                "sponsors": [
                    "Optional field, sponsors of this group",
                    {
                        "image_url": "Image representing the sponsorship",
                        "name": "Name of the sponsor",
                        "details": "Longer information about the sponsorship, may include HTML",
                        "redeem": "If the sponsorship is a perk and the authorized user belongs to the group, instructions for redeeming the perk",
                        "url": "Link to sponsor's site",
                        "info": "Short description of the sponsorship"
                    }
                ],
                "members": "Current number of members in the group",
                "id": "Group ID",
                "state": "State of the group, if in US or Canada",
                "simple_html_description": "Description of the group, in simple HTML format. This value is translated to HTML to update the description.",
                "urlname": "Unique group name as it appears in the URL, no slashes",
                "membership_dues": [
                    "Optional fields parameter. Returns the Group's membership dues info",
                    {
                        "refund_policy": "Array of payment refund policies. May be one or more of \"none\", \"member_leaves\", \"group_closes\", \"member_banned\", or \"custom\"",
                        "reasons": "Array of reasons types in the following values compensate_organizer, cover_costs, encourage_engagement, improve_meetups, other, provide_supplies, reserve_fund",
                        "methods": "Array of acceptable payment methods. May be one or more of \"amazon_payments\", \"paypal\", \"credit_card\" or \"other\"",
                        "fee": "Numeric fee value",
                        "currency": "Currency in which the fee is declared",
                        "fee_desc": "Description of fee",
                        "trial_days": "When present, returns the number of days the group is offering a free trial period for to new members. When not present, this indicates that the group does not offer a trial membership period",
                        "reasons_other": "An additional reason if specified.",
                        "required": "\"2\" if dues are required to join, \"1\" if dues are required to RSVP, \"0\" otherwise",
                        "self_payment_required": "Returns true if the authorized user is prevented from participating in the group until a payment is made"
                    }
                ],
                "lat": "Latitude",
                "next_event": [
                    "Optional fields parameter. the next upcoming event, if the group has one",
                    {
                        "utc_offset": "The local offset from UTC time, in milliseconds",
                        "name": "Name of event",
                        "id": "Alphanumeric event ID",
                        "time": "UTC start time of the event, in milliseconds since the epoch",
                        "yes_rsvp_count": "Number of yes RSVPs"
                    }
                ],
                "list_mode": "Defines policy for who can post to the group mailing list. May be one of 'open' meaning any Member can post, 'off' meaning no one can post, 'moderated' meaning messages must be approved, or 'orgs_only' meaning only organizers may post to the list",
                "ga_code": "Optional field return the google analytics code for the group. Only members that can edit group settings can see this",
                "join_info": [
                    "Optional field, lists any questions requested when joining and required fields",
                    {
                        "questions": [
                            "List of questions asked by organizer",
                            {
                                "question": "The text of the question",
                                "id": "Unique identifier for the questions."
                            }
                        ],
                        "photo_req": "\"1\" if required, \"0\" otherwise",
                        "questions_req": "\"1\" if required, \"0\" otherwise"
                    }
                ],
                "visibility": "\"public\", \"public_limited\", or \"members\" only",
                "topics": [
                    "Topics related to this group",
                    {
                        "urlkey": "Unique keyword used to identify this topic",
                        "name": "Topic name",
                        "id": "Topic ID"
                    }
                ],
                "created": "Date and time that the group was founded, in milliseconds since the epoch",
                "list_addr": "Optional field returning list address prefix. List mail will be {list_addr}-list@meetup.com. Announce email will be {list_addr}-announce@meetup.com. You must be a member of the group to see this",
                "organizer": [
                    "Group's primary organizer",
                    {
                        "member_id": "Member's ID",
                        "member_state": "Optional field",
                        "member_city": "Optional field",
                        "name": "Name of the member",
                        "photo": [
                            "The organizer photo, where defined",
                            {
                                "highres_link": "URL for the photo at its maximum size",
                                "photo_id": "Photo ID",
                                "photo_link": "URL for a standard size of the photo",
                                "thumb_link": "URL for a thumbnail of the photo"
                            }
                        ],
                        "member_country": "Optional field"
                    }
                ],
                "last_event": [
                    "Optional fields parameter. The last hosted event, if the group has one",
                    {
                        "utc_offset": "The local offset from UTC time, in milliseconds",
                        "name": "Name of event",
                        "id": "Alphanumeric event ID",
                        "time": "UTC start time of the event, in milliseconds since the epoch",
                        "yes_rsvp_count": "Number of yes RSVPs"
                    }
                ],
                "name": "Group name",
                "self": [
                    "Optional field, contains details specific to the authorized user if an active member of this group",
                    {
                        "visited": "Member's last visit to the group site, in milliseconds since the epoch",
                        "role": "Member's role in group, if any: Organizer, Assistant Organizer, Event Organizer, etc.",
                        "actions": "list of actions the authenticated member may perform, potentially \"event_create\": the ability to create new events, \"event_draft\": the ability to save new events as drafts, \"role_assign\": the ability to assign member roles, \"edit\": the ability to edit group settings, \"member_approval\": the ability to approve or decline member requests to join, or \"subscription_upgrade\": the ability to upgrade this group's subscription plan",
                        "membership_dues": [
                            "If the group requires membership dues, this field will include the authenticated member's dues info",
                            {
                                "paid_until": "For groups with recurring billing periods, this returns the time in milliseconds since the epoch that the member's next payment is due",
                                "total_amount": "Total amount paid",
                                "transaction_time": "Time the transaction was made in milliseconds since the epoch",
                                "cancelled": "For groups with recurring billing periods, this Boolean field indicates that membership dues were cancelled",
                                "exempt": "For groups with recurring billing periods, this Boolean field indicates that the member is exempt from payment.",
                                "trial": [
                                    "If the group offers a trial membership, this indicates information for unpaid members.",
                                    {
                                        "days": "The total number of trial days offered by the group",
                                        "expired": "Boolean indicator of whether or not the unpaid subscription has expired or not",
                                        "days_remaining": "The number of days remaining in the member's trial period"
                                    }
                                ],
                                "period_status": "For groups with recurring billing periods, this returns one of the following values grace, paid, pending, unpaid"
                            }
                        ],
                        "status": "Optional fields property returned when 'self_status' is provided. Indicates the authorized user's membership with this group. Value may be one of pending, active, blocked, pending_payment or none"
                    }
                ],
                "member_cap": "Number representing the maximum number of active members this group can have if capped. Returned only when requested in the fields request parameter and the authenticated member has permission to approve members",
                "category": [
                    "Category associated with this group",
                    {
                        "name": "Display name of the category",
                        "id": "Numeric identifier of the category",
                        "shortname": "String identifier of the category"
                    }
                ],
                "who": "what the group calls its members"
            },
            "tag": null,
            "responseModel": "GetGroups"
        },
        "GetMember": {
            "version": "2",
            "name": "GetMember",
            "httpMethod": "GET",
            "parameters": {
                "id": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "fields": {
                    "location": "query",
                    "required": false,
                    "description": "comma-separate list of optional fields"
                },
                "page": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "offset": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "desc": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "order": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "only": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "omit": {
                    "location": "query",
                    "required": false,
                    "description": null
                }
            },
            "summary": "Retrieve a single member",
            "uri": "/2/member/{id}",
            "notes": "Only authorization parameters are needed.",
            "response": {
                "birthday": [
                    "If the authorized is the current member, the member's birthday based on provided information",
                    {
                        "month": "Month of birth",
                        "year": "Year of birth",
                        "day": "Day of birth"
                    }
                ],
                "gender": "Optional fields parameter. Members can only see their own gender. May be one of other, none, female, male",
                "link": "URL to the member's profile page on meetup.com",
                "bio": "A description of the member",
                "privacy": [
                    "Optional fields parameter. Defines preferences for visibility of certain attributes only returned for the authenticated member",
                    {
                        "groups": "may be 'hidden' or 'visible'",
                        "bio": "may be 'hidden' or 'visible'",
                        "photos": "may be 'hidden' or 'visible'",
                        "topics": "may be 'hidden' or 'visible'",
                        "facebook": "may be 'hidden' or 'visible'. If absent, the member has not connected their Facebook account to Meetup"
                    }
                ],
                "photos": "List of all the member's photos returned as an array of the representation of the photo property",
                "messagable": "Returned when the \"fields\" parameter is set to \"messaging_pref\". Returns \"true\" if the authenticated member can message them, \"false\" otherwise.",
                "other_services": [
                    "Third-party services associated with the member account",
                    {
                        "[service-name]": [
                            "This element is flickr, tumblr, twitter, or linkedin",
                            {
                                "identifier": "identifier for the service, a username or URL"
                            }
                        ]
                    }
                ],
                "id": "The member's id",
                "photo_url": "Link to the profile photo of the member",
                "lang": "The member's current language preference. Returned only when the member in the response matches the authenticated member",
                "hometown": "Hometown of member",
                "topics": [
                    "A sampling of 50 topics this member has subscribed to. Only appears if the queried user has not hidden them, or if the authenticated and queried user are the same",
                    {
                        "urlkey": "Unique keyword used to identify this topic",
                        "name": "Topic name",
                        "id": "Topic ID"
                    }
                ],
                "joined": "Date and time a member joined in milliseconds since the epoch",
                "photo": [
                    "The member's photo if available",
                    {
                        "highres_link": "URL for the photo at its maximum size",
                        "photo_id": "Photo ID",
                        "photo_link": "URL for a standard size of the photo",
                        "thumb_link": "URL for a thumbnail of the photo"
                    }
                ],
                "reachable": "Optional fields parameter. If querying by group and the authorized member is an organizer the member's group, this will return false when the member's email address is known to bounce and true otherwise",
                "lat, lon": "Latitude and longitude coordinates of the members reported city",
                "membership_count": "Optional field indicating the number of active memberships this member has. If the member has a hidden group preference, this will return 0.",
                "facebook_connection": [
                    "Optional response field. Only returned for the members matching the authenticated member if the authenticated member has connected their Facebook account to their Meetup account",
                    {
                        "status": "The current status of the member's Facebook connection. Status may be one of: 'active', if you have an active Facebook connection or 'inactive', if your previous active connection was deactivated."
                    }
                ],
                "name": "The member's name",
                "visited": "Date and time of member's last activity in milliseconds since the epoch",
                "self": [
                    "Optional field, details particular to the authorized user.",
                    {
                        "common": [
                            "What the authorized user and queried member have in common",
                            {
                                "groups": [
                                    "Groups the members both belong to",
                                    {
                                        "join_mode": "\"open\", \"approval\", or \"closed\"",
                                        "created": "Date and time that the group was founded, in milliseconds since the epoch",
                                        "name": "Group name",
                                        "group_lon": "Approximate group longitude",
                                        "id": "Group id",
                                        "urlname": "Group URL name",
                                        "group_lat": "Approximate group latitude",
                                        "who": "What the group calls its members"
                                    }
                                ],
                                "friends": [
                                    "Members who are Facebook friends with both members",
                                    {
                                        "member_id": "Member's ID",
                                        "name": "Name of the member",
                                        "member_country": "Optional field",
                                        "member_state": "Optional field",
                                        "member_city": "Optional field"
                                    }
                                ]
                            }
                        ],
                        "blocks": "Boolean indicator of whether or not the authorized member has blocked this member. Only returned if fields is set to self_blocks"
                    }
                ],
                "country, city, state": "Country, City, (and for the US, State) the member has provided",
                "messaging_pref": "Returned when the \"fields\" parameter is set to \"messaging_pref\". This specifies the members preference for being contacted from members on the site. Possible values are \"orgs_only\", \"groups_only\", \"all_members\"",
                "status": "The member's status. Currently always 'active' for registered members"
            },
            "tag": "get",
            "responseModel": "GetMember"
        },
        "GetOpenEvents": {
            "version": "2",
            "name": "GetOpenEvents",
            "httpMethod": "GET",
            "parameters": {
                "and_text": {
                    "location": "query",
                    "required": false,
                    "description": "Changes the interpretation of the \"text\" field from OR'd terms to AND'd terms"
                },
                "lat": {
                    "location": "query",
                    "required": false,
                    "description": "A valid latitude, limits the returned group events to those within radius miles"
                },
                "zip": {
                    "location": "query",
                    "required": false,
                    "description": "A valid US zip code, limits the returned groups to those within radius miles"
                },
                "country": {
                    "location": "query",
                    "required": false,
                    "description": "A valid country code"
                },
                "topic": {
                    "location": "query",
                    "required": false,
                    "description": "Return events in the specified topic or topics specified by commas. This is the topic \"urlkey\" returned by the Topics method. If all supplied topics are unknown, a 400 error response is returned with the code \"badtopic\"."
                },
                "city": {
                    "location": "query",
                    "required": false,
                    "description": "A valid city"
                },
                "limited_events": {
                    "location": "query",
                    "required": false,
                    "description": "Include limited event information for private groups that wish to expose only a small amount of information about their events. This includes just: id, name, utc_offset, time, duration, yes_rsvp_count, waitlist_count, group, visibility, timezone. Value must be true or false."
                },
                "text_format": {
                    "location": "query",
                    "required": false,
                    "description": "Format of the description text, \"html\" or \"plain\". Defaults to \"html\""
                },
                "state": {
                    "location": "query",
                    "required": false,
                    "description": "If searching in a country with states, a valid 2 character state code"
                },
                "text": {
                    "location": "query",
                    "required": false,
                    "description": "Events that contain the given term or terms somewhere in their content. The terms are OR'd by default. Separate terms with \" AND \" for events that have combined terms. To have terms automatically AND'd, set the \"and_text\" to true"
                },
                "category": {
                    "location": "query",
                    "required": false,
                    "description": "Return events in the specified category or categories specified by commas. This is the category id returned by the Categories method."
                },
                "lon": {
                    "location": "query",
                    "required": false,
                    "description": "A valid longitude, limits the returned group events to those within radius miles"
                },
                "time": {
                    "location": "query",
                    "required": false,
                    "description": "(default order) ascending"
                },
                "radius": {
                    "location": "query",
                    "required": false,
                    "description": "Radius, in miles for geographic requests, default 25.0 -- maximum 100. May also be specified as \"smart\", a dynamic radius based on the number of active groups in the area"
                },
                "fields": {
                    "location": "query",
                    "required": false,
                    "description": "Request that additional fields (separated by commas) be included in the output"
                },
                "status": {
                    "location": "query",
                    "required": false,
                    "description": "Status may be \"upcoming\", \"past\" or both separated by a comma. The default is \"upcoming\" only"
                },
                "trending": {
                    "location": "query",
                    "required": false,
                    "description": "you will likely want to specify \"desc=true\" to get the best trending results first."
                },
                "distance": {
                    "location": "query",
                    "required": false,
                    "description": "ordering is approximate and will not exactly match the values in the \"distance\" field."
                },
                "page": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "offset": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "desc": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "order": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "only": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "omit": {
                    "location": "query",
                    "required": false,
                    "description": null
                }
            },
            "summary": "Searches for recent and upcoming public events hosted by Meetup groups. Its search window  is the past one month through the next three months, and is subject to change. Open Events is optimized to search for current events by location, category, topic, or text, and only lists Meetups that have **3 or more RSVPs**. The number or results returned with each request is not guaranteed to be the same as the page size due to secondary filtering. If you're looking for a particular event or events within a particular group, use the standard [Events](/meetup_api/docs/2/events/) method.",
            "uri": "/2/open_events",
            "notes": "At least one of the required parameter(s) must be supplied with the request.\n\nFor geo-based requests, you may provide a location in one of three ways. By `lat` and `lon`, by `zip`, or by `country`, `city`, and optionally a `state`, if the provided country has states.\n\nSome groups, while remaining private, still wish to show some information about their events. You can include these events in results using the `limited_events` request parameter.",
            "response": {
                "utc_offset": "The local offset from UTC time, in milliseconds",
                "comment_count": "Returned when fields request parameter contains \"comment_count\" and represents number of comments posted to the event",
                "rsvp_limit": "The number of \"yes\" RSVPs an event can have before members will be added to the waiting list",
                "venue": [
                    "Venue, if selected and not hidden",
                    {
                        "zip": "ZIP code if, venue is in US or Canada",
                        "lat, lon": "Geographic coordinates of venue",
                        "localized_country_name": "Name of country the city belongs to",
                        "phone": "Phone number of venue",
                        "address_1": "Line 1 of venue address",
                        "city, state, country": "City, Country Code and if in US state of venue",
                        "address_2": "Line 2 of venue address",
                        "address_3": "Line 3 of venue address",
                        "name": "Venue name",
                        "id": "Venue id",
                        "repinned": "true if the editor of the event altered the original venues pin location, false otherwise"
                    }
                ],
                "featured": "Returned when fields request parameter contains \"featured\" and returns \"true\" if the event is featured and \"false\" otherwise",
                "photo_sample": [
                    "A small collection of Photos uploaded for this event. Returned when fields request parameter contains \"photo_sample\"",
                    {
                        "highres_link": "URL for the photo at its maximum size",
                        "photo_id": "Photo ID",
                        "photo_link": "URL for a standard size of the photo",
                        "thumb_link": "URL for a thumbnail of the photo"
                    }
                ],
                "headcount": "The number of members in attendance according to the attendance taker. This may be 0 if attendance has not yet been taken",
                "survey_questions": [
                    "Returned when fields request parameter contains \"survey_questions\" for events with surveys",
                    {
                        "id": "Question identifier",
                        "question": "Question text",
                        "required": "Flag indicating if a response to this question is required to RSVP. Currently always false."
                    }
                ],
                "announced_at": "Organizers and hosts can see when the event as announced in milliseconds since the epoch",
                "distance": "Distance in miles from the search location, if one was specified",
                "venue_visibility": "Set to \"members\" or \"public\". The \"venue\" element will not be present if the visibility is \"members\" and the current authenticated user is not a member of the group hosting the event. This value is only returned if requested in the fields parameter",
                "timezone": "Returned when fields request parameter contains \"timezone\". This represents the universal timezone identifier for the host group",
                "fee": [
                    "Fee info returned when payment is defined",
                    {
                        "amount": "Amount of the fee",
                        "accepts": "Accepted method of payment. Can be one of \"paypal\", \"amazon\", \"wepay\", or \"cash\"",
                        "description": "Fee description, typically \"per person\"",
                        "currency": "Currency accepted for fee",
                        "label": "Fee label, typically \"Price\"",
                        "required": "\"1\" if payment is required to RSVP, \"0\" otherwise"
                    }
                ],
                "rating": [
                    "Only past events have this field, an aggregate of anonymous ratings",
                    {
                        "count": "Number of ratings been collected",
                        "average": "Average of collected ratings"
                    }
                ],
                "why": "We should do this because...",
                "description": "Description of the event.",
                "is_simplehtml": "Optional field, \"true\" when the event has been saved in a simplified HTML format, \"false\" otherwise.",
                "short_link": "Returned when fields request parameter contains \"short_link\"",
                "yes_rsvp_count": "Number of yes RSVPs including guests",
                "duration": "Event duration in milliseconds, if an end time is specified by the organizer. When not present, a default of 3 hours may be assumed by applications.",
                "event_hosts": [
                    "List of members hosting the event, only returned if requested in the fields parameter.",
                    {
                        "member_id": "The host's member id",
                        "photo": [
                            "Member photo if one is exists",
                            {
                                "highres_link": "URL for the photo at its maximum size",
                                "photo_id": "Photo ID",
                                "photo_link": "URL for a standard size of the photo",
                                "thumb_link": "URL for a thumbnail of the photo"
                            }
                        ],
                        "member_name": "The host's member name"
                    }
                ],
                "id": "The event id. May be numeric or alphanumeric, always served as a string",
                "simple_html_description": "Optional field, description of the event in simple HTML format.",
                "photo_url": "URL of the event photo, if one exists",
                "publish_status": "\"published\" or \"draft\" only visible to organizers",
                "group": [
                    "Group that is hosting the event",
                    {
                        "topics": [
                            "Optional field. Topics related to this group",
                            {
                                "urlkey": "Unique keyword used to identify this topic",
                                "name": "Topic name",
                                "id": "Topic ID"
                            }
                        ],
                        "created": "Date and time that the group was founded, in milliseconds since the epoch",
                        "group_lon": "Approximate group longitude",
                        "photos": [
                            "Returned when fields request parameter contains \"group_photos\". Includes a small set of photos from the group",
                            {
                                "highres_link": "URL for the photo at its maximum size",
                                "photo_id": "Unique photo id",
                                "photo_link": "URL for a standard size of the photo",
                                "thumb_link": "URL for a thumbnail of the photo"
                            }
                        ],
                        "group_photo": [
                            "Returned when fields request parameter contains \"group_photo\". Represents photo for the group hosting the event",
                            {
                                "highres_link": "URL for the photo at its maximum size",
                                "photo_id": "Unique photo id",
                                "photo_link": "URL for a standard size of the photo",
                                "thumb_link": "URL for a thumbnail of the photo"
                            }
                        ],
                        "join_mode": "\"open\", \"approval\", or \"closed\"",
                        "approved": "Returned when fields request parameter contains \"group_approved\". True if this group has been approved. New groups are generally approved (or removed) soon after creation.",
                        "name": "Group name",
                        "self": [
                            "Returned when fields request parameter contains 'self_membership_dues' or 'group_status'",
                            {
                                "membership_dues": "The authenticated member's group dues in the form returned by group endpoints",
                                "status": "The member's status. May be one of 'active' or 'pending'"
                            }
                        ],
                        "id": "Group id",
                        "category": [
                            "Optional field. Category of this group",
                            {
                                "name": "Display name of the category",
                                "id": "Numeric identifier of the category",
                                "shortname": "String identifier of the category"
                            }
                        ],
                        "urlname": "Group URL name",
                        "membership_dues": [
                            "Returned when fields request parameter contains \"group_membership_dues\"",
                            {
                                "refund_policy": "Array of payment refund policies. May be one or more of \"none\", \"member_leaves\", \"group_closes\", \"member_banned\", or \"custom\"",
                                "reasons": "Array of reasons types in the following values compensate_organizer, cover_costs, encourage_engagement, improve_meetups, other, provide_supplies, reserve_fund",
                                "methods": "Array of acceptable payment methods. May be one or more of \"amazon_payments\", \"paypal\", \"credit_card\" or \"other\"",
                                "fee": "Numeric fee value",
                                "currency": "Currency in which the fee is declared",
                                "fee_desc": "Description of fee",
                                "trial_days": "When present, returns the number of days the group is offering a free trial period for to new members. When not present, this indicates that the group does not offer a trial membership period",
                                "reasons_other": "An additional reason if specified.",
                                "required": "\"2\" if dues are required to join, \"1\" if dues are required to RSVP, \"0\" otherwise",
                                "self_payment_required": "Returns true if the authorized user is prevented from participating in the group until a payment is made"
                            }
                        ],
                        "group_lat": "Approximate group latitude",
                        "who": "What the group calls its members"
                    }
                ],
                "photo_album_id": "Returned when fields request parameter contains \"photo_album_id\" and returns the ID of the photo album for this event, if one exists",
                "rsvp_rules": [
                    "Conditions set by the organizer, only returned if requested in the fields parameter.",
                    {
                        "refund_policy": [
                            "The organizer-defined terms for refunds. If this is defined, you must provide the authenticated member a way to access this information before they can RSVP. They will need to agree to these terms before they RSVP",
                            {
                                "policies": " list of one or more of the following. 'no_refunds' if the organizer will not issue refunds', 'member_cancellation' if the organizer offers a refund for member cancellation, 'event_cancellation' if the organizer offers a refund if the event is canceled, 'event_rescheduled' if the organizer offers a refund when the event is rescheduled",
                                "days": "if member_cancellation is present, it's relative to this many days before the event",
                                "notes": "additional refund policy notes"
                            }
                        ],
                        "open_time": "UTC time that members may begin to RSVP",
                        "closed": "Flag indicating that RSVPing is closed for the event. 1 is true 0 is false",
                        "guest_limit": "Number of guests members may include in their RSVP, 0 or more",
                        "close_time": "UTC time that RSVPs will no longer be accepted, though organizers may close RSVPs earlier"
                    }
                ],
                "visibility": "Event visibility: \"public\", \"members\" or \"public_limited\". Events in private groups that do not expose limited information are visible only to that group's members and should not be made public.",
                "created": "UTC creation time of the event, in milliseconds since the epoch",
                "maybe_rsvp_count": "Number of maybe RSVPs including guests",
                "how_to_find_us": "The information provided by the event host for \"How will members find you there?\". Visible when location is visible to the authenticated member",
                "event_url": "URL of the event's page on meetup.com",
                "announced": "Organizers and hosts can see if the event was announced",
                "photo_count": "Returned when fields request parameter contains \"photo_count\" and represents number of photos posted to the event",
                "rsvpable": "Indicates if the currently authenticated member can RSVP or not, only returned if requested in the fields parameter",
                "rsvp_sample": [
                    "A small collection of RSVPs for members attending this event, returned when fields request parameter value includes 'rsvp_sample'",
                    {
                        "member": [
                            "Member who RSVP'd",
                            {
                                "member_id": "Member's ID",
                                "name": "Name of the member",
                                "self": [
                                    "A small set of data representing the authenticated member's context with this member",
                                    {
                                        "friend": "Boolean indicator for whether or not the authenticated member is friends with this member"
                                    }
                                ]
                            }
                        ],
                        "rsvp_id": "The RSVP id. May be -1 for events scheduled in the future",
                        "mtime": "Last modified time of the RSVP, in milliseconds since the epoch.",
                        "created": "Creation time of the RSVP, in milliseconds since the epoch.",
                        "member_photo": [
                            "The RSVPing member's photo if available. Members who registered via Facebook may not have highres photos",
                            {
                                "highres_link": "URL for the photo at its maximum size",
                                "photo_id": "Photo ID",
                                "photo_link": "URL for a standard size of the photo",
                                "thumb_link": "URL for a thumbnail of the photo"
                            }
                        ]
                    }
                ],
                "series": [
                    "Returned when fields request parameter contains \"series\" for events that are part of a series of events",
                    {
                        "end_date": "Date when this series ends/ended, in milliseconds since the epoch. Some series repeat forever. In those cases, this field will be absent",
                        "description": "Human displayable description of how often events in this series occur",
                        "id": "Unique numeric identifier for the series",
                        "start_date": "Date when this series begins/began, in milliseconds since the epoch"
                    }
                ],
                "name": "The name of the event",
                "self": [
                    "Returned when fields request parameter contains \"self\" and represents details particular to the authorized user, only present if requested and user is a member of the hosting group",
                    {
                        "rated": "Boolean indicator of whether the current member rated the event or not",
                        "pay_status": "The authenticated member's payment status. This may be one of 'none', 'paid', 'unpaid', 'partially_paid', 'payment_pending', 'echeck_pending', 'refund_pending', 'partially_refunded', 'refunded', 'pay_status'.",
                        "role": "The authenticated member's role in within the group, if any. This may be one of: Organizer, Assistant Organizer, Event Organizer, etc.",
                        "watching": "For events without waitlist you may check your watchlist status with this property. Values may either be true of false.",
                        "actions": "list of actions the current user may perform, potentially: \"announce\" to announce the event to the group's members, \"attendance\" to view or take attendance for the event, \"payments\" to mark members as paid if the event is a paid event, \"publish\" to publish a draft event, \"edit\" to edit the event information, \"edit_hosts\" to edit the hosts for the event, \"delete\" to delete the event, \"rsvp\" to RSVP yes or no to the event, or \"wait\" to get on the waiting list (using the same RSVP methods). For events without a waitlist, you may see either \"watch\" or \"unwatch\" to watch for opening spots for the event when the event is full. If an organizer requires membership dues to rsvp and the authorized member has not paid theirs, \"dues\" will be included",
                        "rsvp": [
                            "Member's RSVP, if any",
                            {
                                "answers": "List of answers to event survey questions asked when the member RSVP'd in the order asked, only available to organizers and assistant organizers. By default, this field returns a list of strings answers. You can request more structured answer info including the time the answer was updated, by setting fields=rsvp_answer_info in the request. The structured format for answers is defined in Rsvp API's response",
                                "guests": "number of guests",
                                "response": "\"yes\", \"no\", \"yes_pending_payment\", or \"waitlist\""
                            }
                        ]
                    }
                ],
                "time": "UTC start time of the event, in milliseconds since the epoch",
                "updated": "UTC last modified time of the event, in milliseconds since the epoch",
                "trending_rank": "Indicates the trending rank within the current result set. The best rank is zero, increasing rank values are less \"trending\". This value is only returned if requested in the fields parameter",
                "status": "\"cancelled\", \"upcoming\", \"past\", \"proposed\", \"suggested\" or \"draft\""
            },
            "tag": null,
            "responseModel": "GetOpenEvents"
        },
        "GetOpenVenues": {
            "version": "2",
            "name": "GetOpenVenues",
            "httpMethod": "GET",
            "parameters": {
                "lat": {
                    "location": "query",
                    "required": false,
                    "description": "A valid latitude, limits the returned venues to those within radius miles"
                },
                "state": {
                    "location": "query",
                    "required": false,
                    "description": "For the US, a valid 2 character state code"
                },
                "text": {
                    "location": "query",
                    "required": false,
                    "description": "Venues that contain the given term or terms somewhere in their content. Separate terms with \" AND \" for venues that have combined terms. Append a trailing * to treat this as a prefix search"
                },
                "zip": {
                    "location": "query",
                    "required": false,
                    "description": "A valid US zip code, limits the returned venues to those within radius miles"
                },
                "country": {
                    "location": "query",
                    "required": false,
                    "description": "A valid country code."
                },
                "lon": {
                    "location": "query",
                    "required": false,
                    "description": "A valid longitude, limits the returned venues to those within radius miles"
                },
                "group_urlname": {
                    "location": "query",
                    "required": false,
                    "description": "Returns venues with location relative to the group associated with this urlname"
                },
                "city": {
                    "location": "query",
                    "required": false,
                    "description": "A valid city"
                },
                "radius": {
                    "location": "query",
                    "required": false,
                    "description": "Radius, in miles for geographic requests, default 25.0 -- maximum 100.0"
                },
                "fields": {
                    "location": "query",
                    "required": false,
                    "description": "Request that additional fields (separated by commas) be included in the output"
                },
                "rating": {
                    "location": "query",
                    "required": false,
                    "description": "average member rating"
                },
                "distance": {
                    "location": "query",
                    "required": false,
                    "description": "(default order) ordering is approximate and will not exactly match the values in the \"distance\" field."
                },
                "rating_count": {
                    "location": "query",
                    "required": false,
                    "description": "number of member ratings."
                },
                "page": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "offset": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "desc": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "order": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "only": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "omit": {
                    "location": "query",
                    "required": false,
                    "description": null
                }
            },
            "summary": "Searches for public venues within a given geo space. To search for specific venues that your group has used, use the [Venues](/meetup_api/docs/2/venues) method",
            "uri": "/2/open_venues",
            "notes": "At least one of the required parameter(s) must be supplied with the request. If you are not able to provide a relative location you may supply a group_urlname which this method will use to infer location from. You can perform prefix searching by appending a * character to your query",
            "response": {
                "zip": "if US or Canada",
                "localized_country_name": "Name of country of venue",
                "distance": "Distance in miles from the search location, if one was specified",
                "address_1": "line 1 of venue address",
                "address_2": "line 2 of venue address",
                "address_3": "line 3 of venue address",
                "rating": "The average member rating",
                "venue_url": "URL of the venues's page on meetup.com",
                "rating_count": "The number of member ratings",
                "taglist": "Optional array of associated tagnames provided when a value of \"taglist\" is supplied with the \"fields\" request parameter",
                "lat, lon": "coordinates of venue",
                "phone": "phone number of venue",
                "city, state, country": "City, County code and if in US state of venue",
                "name": "Name of the venue",
                "id": "ID of the venue",
                "fax": "fax number of venue",
                "email": "email address of venue"
            },
            "tag": null,
            "responseModel": "GetOpenVenues"
        },
        "GetPhotoAlbums": {
            "version": "2",
            "name": "GetPhotoAlbums",
            "httpMethod": "GET",
            "parameters": {
                "photo_album_id": {
                    "location": "query",
                    "required": false,
                    "description": "Return albums with these IDs, separated by commas"
                },
                "group_id": {
                    "location": "query",
                    "required": false,
                    "description": "Return albums in groups with these ID, separated by commas"
                },
                "event_id": {
                    "location": "query",
                    "required": false,
                    "description": "Return photo albums for these event ids, separated by commas"
                },
                "time": {
                    "location": "query",
                    "required": false,
                    "description": "creation date and time"
                },
                "title": {
                    "location": "query",
                    "required": false,
                    "description": "title of the album"
                },
                "updated": {
                    "location": "query",
                    "required": false,
                    "description": "album updated field"
                },
                "page": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "offset": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "desc": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "order": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "only": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "omit": {
                    "location": "query",
                    "required": false,
                    "description": null
                }
            },
            "summary": "This method returns photo albums associated with Meetup groups. To create albums, see the corresponding write method.",
            "uri": "/2/photo_albums",
            "notes": "At least one of the required parameter(s) must be supplied with the request.",
            "response": {
                "photo_album_id": "Unique identifier of the album",
                "photo_count": "Number of photos in the album",
                "event_id": "Event ID if this is an event photo album",
                "group_id": "ID of the group that created the album",
                "ordering": "If a custom ordering is defined, a list of photo IDs",
                "created": "Created time in milliseconds since the epoch",
                "link": "Link to photo album on meetup.com",
                "title": "Photo album title",
                "album_photo": [
                    "Selected photo from the album to display in listings",
                    {
                        "highres_link": "URL for the photo at its maximum size",
                        "photo_id": "-",
                        "photo_link": "URL for a standard size of the photo",
                        "thumb_link": "URL for a thumbnail the photo"
                    }
                ],
                "updated": "Last updated time in milliseconds since the epoch"
            },
            "tag": null,
            "responseModel": "GetPhotoAlbums"
        },
        "GetPhotoComments": {
            "version": "2",
            "name": "GetPhotoComments",
            "httpMethod": "GET",
            "parameters": {
                "member_id": {
                    "location": "query",
                    "required": false,
                    "description": "Return comments for the given member_ids, separated by commas. The member ids must match up with one of the provided photo ids"
                },
                "photo_id": {
                    "location": "query",
                    "required": false,
                    "description": "Return comments on these photos, separated by commas"
                },
                "fields": {
                    "location": "query",
                    "required": false,
                    "description": "Request that additional fields (separated by commas) be included in the output."
                },
                "name": {
                    "location": "query",
                    "required": false,
                    "description": "the name of the member"
                },
                "time": {
                    "location": "query",
                    "required": false,
                    "description": "Order by the time that each comment was posted"
                },
                "page": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "offset": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "desc": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "order": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "only": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "omit": {
                    "location": "query",
                    "required": false,
                    "description": null
                }
            },
            "summary": "This method returns comments on meetup photos. To post messages, see the corresponding write method",
            "uri": "/2/photo_comments",
            "notes": "At least one of the required parameters must be supplied by the request.",
            "response": {
                "photo_comment_id": "Unique identifier for this comment ",
                "photo_id": "Photo ID where the comment was posted",
                "created": " The time and date that the comment was posted, in milliseconds since the epoch",
                "member_photo": [
                    "If the optional \"fields\" parameter contains \"member_photo\", the member photo associated with the comment",
                    {
                        "photo_id": "ID of the photo",
                        "photo_link": "URL for the standard sized photo",
                        "thumb_link": "URL for the thumbnail sized photo",
                        "hires_link": "URL for the original sized photo"
                    }
                ],
                "member": [
                    "Author of comment",
                    {
                        "member_id": "Member's ID",
                        "name": "Name of the member",
                        "member_country": "Optional field",
                        "member_state": "Optional field",
                        "member_city": "Optional field"
                    }
                ],
                "self": [
                    "Returned when the optional \"fields\" request parameter contains \"self\" and authenticated member is a member of Group this comment was posted within. Represents the authenticated member's context.",
                    {
                        "actions": "An array of actions the authenticated member may perform. May be one of \"edit\", if the member can edit the comment or \"delete\" if the member can delete the comment",
                        "role": "Member's role in group, if any: Organizer, Assistant Organizer, Event Organizer, etc."
                    }
                ],
                "comment": "Text of the comment that was posted"
            },
            "tag": null,
            "responseModel": "GetPhotoComments"
        },
        "GetPhotos": {
            "version": "2",
            "name": "GetPhotos",
            "httpMethod": "GET",
            "parameters": {
                "photo_id": {
                    "location": "query",
                    "required": false,
                    "description": "Photo IDs, separated by commas"
                },
                "group_urlname": {
                    "location": "query",
                    "required": false,
                    "description": "Group urlnames, separated by commas"
                },
                "event_id": {
                    "location": "query",
                    "required": false,
                    "description": "Event ids, separated by commas. These may contain alphanumeric autoscheduled event ids, only photos of reified events will be returned"
                },
                "tagged": {
                    "location": "query",
                    "required": false,
                    "description": "Tagged with members with these IDs, separated by commas"
                },
                "photo_album_id": {
                    "location": "query",
                    "required": false,
                    "description": "Photo Album IDs, separated by commas"
                },
                "member_id": {
                    "location": "query",
                    "required": false,
                    "description": "Uploaded by members with these IDs, separated by commas"
                },
                "time": {
                    "location": "query",
                    "required": false,
                    "description": "creation date and time"
                },
                "fields": {
                    "location": "query",
                    "required": false,
                    "description": "comma-delimited optional response properties such as member_country, member_city, member_state, and self"
                },
                "group_id": {
                    "location": "query",
                    "required": false,
                    "description": "Group IDs, separated by commas"
                },
                "page": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "offset": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "desc": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "order": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "only": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "omit": {
                    "location": "query",
                    "required": false,
                    "description": null
                }
            },
            "summary": "This method returns photos by member, group, album, event, photo ID, or tagged member.",
            "uri": "/2/photos",
            "notes": "At least one of the required parameter(s) must be supplied with the request.",
            "response": {
                "comment_count": "Optional fields parameter. When requested, this returns the number of comments made about this photo",
                "site_link": "URL for photo in photo album on meetup.com",
                "highres_link": "URL for the photo at its maximum size",
                "photo_id": "Unique identifier of the photo",
                "created": "Created time in milliseconds since the epoch",
                "member_photo": [
                    "Optional member photo of the uploading member",
                    {
                        "highres_link": "URL for the photo at its maximum size",
                        "photo_id": "Photo ID",
                        "photo_link": "URL for a standard size of the photo",
                        "thumb_link": "URL for a thumbnail of the photo"
                    }
                ],
                "caption": "Photo caption",
                "thumb_link": "URL for a thumbnail the photo",
                "photo_album": [
                    "-",
                    {
                        "photo_album_id": "Unique identifier of the album",
                        "event_id": "Event ID if this is an event photo album",
                        "event": [
                            "Extra event info returned when requested in the \"fields\" parameter",
                            {
                                "name": "Name of the event",
                                "id": "String ID of the event",
                                "time": "UTC start time of the event, in milliseconds since the epoch",
                                "event_url": "URL of the event's page on meetup.com"
                            }
                        ],
                        "group_id": "ID of the group that created the album"
                    }
                ],
                "member": [
                    "Member that uploaded the photo",
                    {
                        "member_id": "Member's ID",
                        "name": "Name of the member",
                        "member_country": "Optional field",
                        "member_state": "Optional field",
                        "member_city": "Optional field"
                    }
                ],
                "self": [
                    "Optional field, contains details specific to the authorized user",
                    {
                        "actions": "list of actions the current user may perform, potentially: delete, comment, edit",
                        "role": "Member's role in group, if any: Organizer, Assistant Organizer, Event Organizer, etc."
                    }
                ],
                "photo_link": "URL for a standard size of the photo",
                "updated": "Last updated time in milliseconds since the epoch"
            },
            "tag": null,
            "responseModel": "GetPhotos"
        },
        "GetProfile": {
            "version": "2",
            "name": "GetProfile",
            "httpMethod": "GET",
            "parameters": {
                "gid": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "mid": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "fields": {
                    "location": "query",
                    "required": false,
                    "description": "Request that additional fields (separated by commas) be included in the output"
                },
                "page": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "offset": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "desc": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "order": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "only": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "omit": {
                    "location": "query",
                    "required": false,
                    "description": null
                }
            },
            "summary": "Retrieves a single group profile",
            "uri": "/2/profile/{gid}/{mid}",
            "notes": "Only authorization parameters are needed.",
            "response": {
                "member_id": "The member's id",
                "created, updated": "When this member profile was created and last updated, in milliseconds since the epoch.",
                "role": "If applicable, the member's role in the group (Organizer, Assistant Organizer, Co-organizer, or Event Organizer)",
                "profile_url": "Link to the member's group profile page",
                "member_city": "Optional fields parameter for the Member's city",
                "additional": "Additional information supplied by the member",
                "answers": [
                    "Array of answers to group profile questions. Unanswered questions are returned without the answer field",
                    {
                        "question": "Text of the question",
                        "answer": "Text of the answer if answered",
                        "question_id": "Unique ID of the question this answers"
                    }
                ],
                "bio": "Member's 'introduction' to the group",
                "photo": [
                    "The member's photo if available",
                    {
                        "highres_link": "URL for the photo at its maximum size",
                        "photo_id": "Photo ID",
                        "photo_link": "URL for a standard size of the photo",
                        "thumb_link": "URL for a thumbnail of the photo"
                    }
                ],
                "title": "Title assigned to the member in this group",
                "other_services": [
                    "Third-party services associated with the member account",
                    {
                        "[service-name]": [
                            "This element is flickr, tumblr, twitter, or linkedin",
                            {
                                "identifier": "identifier for the service, a username or URL"
                            }
                        ]
                    }
                ],
                "site_url, site_name": "External site listed by the member",
                "member_state": "Optional fields parameter for the Member's state (when country is us)",
                "name": "The member's name",
                "visited": "Member's last visit to the group site, in milliseconds since the epoch",
                "comment": "What this member says about this group",
                "member_country": "Optional fields parameter for the Member's country code",
                "photo_url": "Link to the group profile photo of the member",
                "membership_dues": [
                    "Optional fields parameter for the last payment received for the Group's membership dues and optionally, the status of the member's dues for the current billing period if the group has set up recurring membership dues payments. This field is only visible only to the organizer of the group and to the member themselves. Members can not see other member's membership dues",
                    {
                        "paid_until": "For groups with recurring billing periods, this returns the time in milliseconds since the epoch that the member's next payment is due",
                        "total_amount": "Total amount paid",
                        "transaction_time": "Time the transaction was made in milliseconds since the epoch",
                        "cancelled": "For groups with recurring billing periods, this Boolean field indicates that membership dues were cancelled",
                        "exempt": "For groups with recurring billing periods, this Boolean field indicates that the member is exempt from payment.",
                        "trial": [
                            "If the group offers a trial membership, this indicates information for unpaid members.",
                            {
                                "days": "The total number of trial days offered by the group",
                                "expired": "Boolean indicator of whether or not the unpaid subscription has expired or not",
                                "days_remaining": "The number of days remaining in the member's trial period"
                            }
                        ],
                        "period_status": "For groups with recurring billing periods, this returns one of the following values grace, paid, pending, unpaid"
                    }
                ],
                "group": [
                    "The group this profile belongs to",
                    {
                        "join_mode": "\"open\", \"approval\", or \"closed\"",
                        "created": "Date and time that the group was founded, in milliseconds since the epoch",
                        "name": "Group name",
                        "group_lon": "Approximate group longitude",
                        "id": "Group id",
                        "urlname": "Group URL name",
                        "group_lat": "Approximate group latitude",
                        "who": "What the group calls its members"
                    }
                ],
                "status": "Value may be one of pending, active, blocked, pending_payment"
            },
            "tag": "get",
            "responseModel": "GetProfile"
        },
        "GetProfiles": {
            "version": "2",
            "name": "GetProfiles",
            "httpMethod": "GET",
            "parameters": {
                "topic": {
                    "location": "query",
                    "required": false,
                    "description": "Group identification by topic, deprecated"
                },
                "groupnum": {
                    "location": "query",
                    "required": false,
                    "description": "Group identification by topic, deprecated"
                },
                "role": {
                    "location": "query",
                    "required": false,
                    "description": "if \"leads\", only profiles for members of the leadership team are included"
                },
                "group_urlname": {
                    "location": "query",
                    "required": false,
                    "description": "Return profiles for the group with the given custom URL path"
                },
                "member_id": {
                    "location": "query",
                    "required": false,
                    "description": "the id of the member"
                },
                "fields": {
                    "location": "query",
                    "required": false,
                    "description": "comma delimited list of optional response properties. A value of \"membership_dues\" will populate membership dues for the authorized user or members of the groups the authorized user organizes"
                },
                "group_id": {
                    "location": "query",
                    "required": false,
                    "description": "Return profiles in the group with this ID"
                },
                "status": {
                    "location": "query",
                    "required": false,
                    "description": "Status filter for members. Only organizers may see pending. Request must also contain a `group_id` or `group_urlname`. Status may be one of active, pending"
                },
                "joined": {
                    "location": "query",
                    "required": false,
                    "description": "time member joined this group"
                },
                "interesting": {
                    "location": "query",
                    "required": false,
                    "description": "Order which may be interesting to the authorized member"
                },
                "name": {
                    "location": "query",
                    "required": false,
                    "description": "the name of the member"
                },
                "visited": {
                    "location": "query",
                    "required": false,
                    "description": "last visit to group pages (default order)"
                },
                "updated": {
                    "location": "query",
                    "required": false,
                    "description": "profile updated field"
                },
                "page": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "offset": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "desc": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "order": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "only": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "omit": {
                    "location": "query",
                    "required": false,
                    "description": null
                }
            },
            "summary": "This method returns member *profiles* associated with a particular group. Meetup members have separate profiles for each group they join.",
            "uri": "/2/profiles",
            "notes": "At least one of the required parameter(s) must be supplied with the request. If any of the groups you specify are private, you will not see its members listed in the result set unless you are a member of that group. If querying for member_id alone, the member's 'hide groups' preference will be honored. 'Interesting' ordered searches only support searching by group_urlname or group_id. Only one of those may be supplied. ",
            "response": {
                "member_id": "The member's id",
                "created, updated": "When this member profile was created and last updated, in milliseconds since the epoch.",
                "role": "If applicable, the member's role in the group (Organizer, Assistant Organizer, Co-organizer, or Event Organizer)",
                "profile_url": "Link to the member's group profile page",
                "member_city": "Optional fields parameter for the Member's city",
                "additional": "Additional information supplied by the member",
                "answers": [
                    "Array of answers to group profile questions. Unanswered questions are returned without the answer field",
                    {
                        "question": "Text of the question",
                        "answer": "Text of the answer if answered",
                        "question_id": "Unique ID of the question this answers"
                    }
                ],
                "bio": "Member's 'introduction' to the group",
                "photo": [
                    "The member's photo if available",
                    {
                        "highres_link": "URL for the photo at its maximum size",
                        "photo_id": "Photo ID",
                        "photo_link": "URL for a standard size of the photo",
                        "thumb_link": "URL for a thumbnail of the photo"
                    }
                ],
                "title": "Title assigned to the member in this group",
                "other_services": [
                    "Third-party services associated with the member account",
                    {
                        "[service-name]": [
                            "This element is flickr, tumblr, twitter, or linkedin",
                            {
                                "identifier": "identifier for the service, a username or URL"
                            }
                        ]
                    }
                ],
                "site_url, site_name": "External site listed by the member",
                "member_state": "Optional fields parameter for the Member's state (when country is us)",
                "name": "The member's name",
                "visited": "Member's last visit to the group site, in milliseconds since the epoch",
                "comment": "What this member says about this group",
                "member_country": "Optional fields parameter for the Member's country code",
                "photo_url": "Link to the group profile photo of the member",
                "membership_dues": [
                    "Optional fields parameter for the last payment received for the Group's membership dues and optionally, the status of the member's dues for the current billing period if the group has set up recurring membership dues payments. This field is only visible only to the organizer of the group and to the member themselves. Members can not see other member's membership dues",
                    {
                        "paid_until": "For groups with recurring billing periods, this returns the time in milliseconds since the epoch that the member's next payment is due",
                        "total_amount": "Total amount paid",
                        "transaction_time": "Time the transaction was made in milliseconds since the epoch",
                        "cancelled": "For groups with recurring billing periods, this Boolean field indicates that membership dues were cancelled",
                        "exempt": "For groups with recurring billing periods, this Boolean field indicates that the member is exempt from payment.",
                        "trial": [
                            "If the group offers a trial membership, this indicates information for unpaid members.",
                            {
                                "days": "The total number of trial days offered by the group",
                                "expired": "Boolean indicator of whether or not the unpaid subscription has expired or not",
                                "days_remaining": "The number of days remaining in the member's trial period"
                            }
                        ],
                        "period_status": "For groups with recurring billing periods, this returns one of the following values grace, paid, pending, unpaid"
                    }
                ],
                "group": [
                    "The group this profile belongs to",
                    {
                        "join_mode": "\"open\", \"approval\", or \"closed\"",
                        "created": "Date and time that the group was founded, in milliseconds since the epoch",
                        "name": "Group name",
                        "group_lon": "Approximate group longitude",
                        "id": "Group id",
                        "urlname": "Group URL name",
                        "group_lat": "Approximate group latitude",
                        "who": "What the group calls its members"
                    }
                ],
                "status": "Value may be one of pending, active, blocked, pending_payment"
            },
            "tag": null,
            "responseModel": "GetProfiles"
        },
        "GetRsvp": {
            "version": "2",
            "name": "GetRsvp",
            "httpMethod": "GET",
            "parameters": {
                "id": {
                    "location": "uri",
                    "required": true,
                    "description": null
                },
                "fields": {
                    "location": "query",
                    "required": false,
                    "description": "Request that additional fields (separated by commas) be included in the output"
                },
                "page": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "offset": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "desc": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "order": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "only": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "omit": {
                    "location": "query",
                    "required": false,
                    "description": null
                }
            },
            "summary": "Retrieve a single RSVP",
            "uri": "/2/rsvp/{id}",
            "notes": "Only authorization parameters are needed.",
            "response": {
                "venue": [
                    "Venue, if selected and not hidden",
                    {
                        "zip": "ZIP code if, venue is in US or Canada",
                        "lat, lon": "Geographic coordinates of venue",
                        "localized_country_name": "Name of country the city belongs to",
                        "phone": "Phone number of venue",
                        "address_1": "Line 1 of venue address",
                        "city, state, country": "City, Country Code and if in US state of venue",
                        "address_2": "Line 2 of venue address",
                        "address_3": "Line 3 of venue address",
                        "name": "Venue name",
                        "id": "Venue id",
                        "repinned": "true if the editor of the event altered the original venues pin location, false otherwise"
                    }
                ],
                "comments": "The message that the member provided when RSVP was made",
                "created": "Creation time of the RSVP, in milliseconds since the epoch.",
                "member_photo": [
                    "The RSVPing member's photo if available. Members who registered via Facebook may not have highres photos",
                    {
                        "highres_link": "URL for the photo at its maximum size",
                        "photo_id": "Photo ID",
                        "photo_link": "URL for a standard size of the photo",
                        "thumb_link": "URL for a thumbnail of the photo"
                    }
                ],
                "answers": [
                    "List of answers to event survey questions asked when the member RSVP'd in the order asked, only available to organizers and assistant organizers. By default, this field returns a list of strings answers. You can request more structured answer info including the time the answer was updated, by setting fields=answer_info in the request",
                    {
                        "question": "The text of the question asked of the member",
                        "answer": "The members provided answer to the question",
                        "question_id": "The unique id of the question answered",
                        "updated": "The time the answer was last modified in milliseconds since the epoch"
                    }
                ],
                "rsvp_id": "The RSVP id. May be -1 for events scheduled in the future",
                "mtime": "Last modified time of the RSVP, in milliseconds since the epoch.",
                "pay_status": "The RSVPer's payment status if the event has an associated fee. Returned only for organizers when 'pay_status' is requested with the fields parameter. This may be one of 'none', 'paid', 'partially_paid', 'payment_pending', 'echeck_pending', 'refund_pending', 'partially_refunded', 'refunded', 'exempt'.",
                "response": "\"yes\", \"no\", \"waitlist\" or \"yes_pending_payment\" which is the response returned after RSVPing \"yes\" to an event that requires payment.",
                "guests": "Number of guests the RSVP'd member will be bringing",
                "host": "Optional field, `true` if RSVP is for an event host",
                "member": [
                    "Member who RSVP'd",
                    {
                        "member_id": "Member's ID",
                        "other_services": [
                            "Third-party services associated with the member account",
                            {
                                "[service-name]": [
                                    "This element is flickr, tumblr, twitter, or linkedin",
                                    {
                                        "identifier": "identifier for the service, a username or URL"
                                    }
                                ]
                            }
                        ],
                        "member_state": "Optional field",
                        "member_city": "Optional field",
                        "name": "Name of the member",
                        "bio": "Optional field returned when appending \"member_bio\" to the \"fields\" parameter. Contains the member's group \"introduction\"",
                        "member_country": "Optional field"
                    }
                ],
                "event": [
                    "The event associated with the RSVP",
                    {
                        "name": "Name of the event",
                        "id": "String ID of the event",
                        "time": "UTC start time of the event, in milliseconds since the epoch",
                        "event_url": "URL of the event's page on meetup.com"
                    }
                ],
                "attendance_status": "Represents an attendance status for this RSVP, returned when 'attendance_status' is requested with the fields parameter and when the authorized member has permission to take attendance. Value may be 'attended' when marked attending, 'absent' when marked absent or 'noshow' when marked noshow",
                "group": [
                    "Group hosting the event",
                    {
                        "join_mode": "\"open\", \"approval\", or \"closed\"",
                        "created": "Date and time that the group was founded, in milliseconds since the epoch",
                        "name": "Group name",
                        "group_lon": "Approximate group longitude",
                        "id": "Group id",
                        "urlname": "Group URL name",
                        "group_lat": "Approximate group latitude",
                        "who": "What the group calls its members"
                    }
                ]
            },
            "tag": "get",
            "responseModel": "GetRsvp"
        },
        "GetRsvps": {
            "version": "2",
            "name": "GetRsvps",
            "httpMethod": "GET",
            "parameters": {
                "fields": {
                    "location": "query",
                    "required": false,
                    "description": "Parameter for requesting optional response properties, set to other_services for a list of third party services"
                },
                "rsvp": {
                    "location": "query",
                    "required": false,
                    "description": "Filters response on RSVP status. \"yes\" if member RSVP'd yes otherwise \"no\""
                },
                "event_id": {
                    "location": "query",
                    "required": false,
                    "description": "Multiple alphanumeric ids may be separated with commas"
                },
                "name": {
                    "location": "query",
                    "required": false,
                    "description": "the name of the attendee"
                },
                "event": {
                    "location": "query",
                    "required": false,
                    "description": "the id or time of the event"
                },
                "social": {
                    "location": "query",
                    "required": false,
                    "description": "social connections of the authenticated member"
                },
                "page": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "offset": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "desc": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "order": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "only": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "omit": {
                    "location": "query",
                    "required": false,
                    "description": null
                }
            },
            "summary": "Query for Event RSVPs by event",
            "uri": "/2/rsvps",
            "notes": "At least one of the required parameter(s) must be supplied with the request.",
            "response": {
                "venue": [
                    "Venue, if selected and not hidden",
                    {
                        "zip": "ZIP code if, venue is in US or Canada",
                        "lat, lon": "Geographic coordinates of venue",
                        "localized_country_name": "Name of country the city belongs to",
                        "phone": "Phone number of venue",
                        "address_1": "Line 1 of venue address",
                        "city, state, country": "City, Country Code and if in US state of venue",
                        "address_2": "Line 2 of venue address",
                        "address_3": "Line 3 of venue address",
                        "name": "Venue name",
                        "id": "Venue id",
                        "repinned": "true if the editor of the event altered the original venues pin location, false otherwise"
                    }
                ],
                "comments": "The message that the member provided when RSVP was made",
                "created": "Creation time of the RSVP, in milliseconds since the epoch.",
                "member_photo": [
                    "The RSVPing member's photo if available. Members who registered via Facebook may not have highres photos",
                    {
                        "highres_link": "URL for the photo at its maximum size",
                        "photo_id": "Photo ID",
                        "photo_link": "URL for a standard size of the photo",
                        "thumb_link": "URL for a thumbnail of the photo"
                    }
                ],
                "answers": [
                    "List of answers to event survey questions asked when the member RSVP'd in the order asked, only available to organizers and assistant organizers. By default, this field returns a list of strings answers. You can request more structured answer info including the time the answer was updated, by setting fields=answer_info in the request",
                    {
                        "question": "The text of the question asked of the member",
                        "answer": "The members provided answer to the question",
                        "question_id": "The unique id of the question answered",
                        "updated": "The time the answer was last modified in milliseconds since the epoch"
                    }
                ],
                "rsvp_id": "The RSVP id. May be -1 for events scheduled in the future",
                "mtime": "Last modified time of the RSVP, in milliseconds since the epoch.",
                "pay_status": "The RSVPer's payment status if the event has an associated fee. Returned only for organizers when 'pay_status' is requested with the fields parameter. This may be one of 'none', 'paid', 'partially_paid', 'payment_pending', 'echeck_pending', 'refund_pending', 'partially_refunded', 'refunded', 'exempt'.",
                "response": "\"yes\", \"no\", \"waitlist\" or \"yes_pending_payment\" which is the response returned after RSVPing \"yes\" to an event that requires payment.",
                "guests": "Number of guests the RSVP'd member will be bringing",
                "host": "Optional field, `true` if RSVP is for an event host",
                "member": [
                    "Member who RSVP'd",
                    {
                        "member_id": "Member's ID",
                        "other_services": [
                            "Third-party services associated with the member account",
                            {
                                "[service-name]": [
                                    "This element is flickr, tumblr, twitter, or linkedin",
                                    {
                                        "identifier": "identifier for the service, a username or URL"
                                    }
                                ]
                            }
                        ],
                        "member_state": "Optional field",
                        "member_city": "Optional field",
                        "name": "Name of the member",
                        "bio": "Optional field returned when appending \"member_bio\" to the \"fields\" parameter. Contains the member's group \"introduction\"",
                        "member_country": "Optional field"
                    }
                ],
                "event": [
                    "The event associated with the RSVP",
                    {
                        "name": "Name of the event",
                        "id": "String ID of the event",
                        "time": "UTC start time of the event, in milliseconds since the epoch",
                        "event_url": "URL of the event's page on meetup.com"
                    }
                ],
                "attendance_status": "Represents an attendance status for this RSVP, returned when 'attendance_status' is requested with the fields parameter and when the authorized member has permission to take attendance. Value may be 'attended' when marked attending, 'absent' when marked absent or 'noshow' when marked noshow",
                "group": [
                    "Group hosting the event",
                    {
                        "join_mode": "\"open\", \"approval\", or \"closed\"",
                        "created": "Date and time that the group was founded, in milliseconds since the epoch",
                        "name": "Group name",
                        "group_lon": "Approximate group longitude",
                        "id": "Group id",
                        "urlname": "Group URL name",
                        "group_lat": "Approximate group latitude",
                        "who": "What the group calls its members"
                    }
                ]
            },
            "tag": null,
            "responseModel": "GetRsvps"
        },
        "GetTopicCategories": {
            "version": "2",
            "name": "GetTopicCategories",
            "httpMethod": "GET",
            "parameters": {
                "fields": {
                    "location": "query",
                    "required": false,
                    "description": "Parameter for requesting optional response properties"
                },
                "lat": {
                    "location": "query",
                    "required": false,
                    "description": "Use a given lat/lon/radius (miles) to search best_topics for instead of using the member's lat/lon.  When present, all three are required."
                },
                "lon": {
                    "location": "query",
                    "required": false,
                    "description": "Use a given lat/lon/radius (miles) to search best_topics for instead of using the member's lat/lon.  When present, all three are required."
                },
                "radius": {
                    "location": "query",
                    "required": false,
                    "description": "Use a given lat/lon/radius (miles) to search best_topics for instead of using the member's lat/lon.  When present, all three are required."
                },
                "shortname": {
                    "location": "query",
                    "required": false,
                    "description": "(default order) ascending"
                },
                "page": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "offset": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "desc": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "order": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "only": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "omit": {
                    "location": "query",
                    "required": false,
                    "description": null
                }
            },
            "summary": "Returns a list of Meetup topic categories",
            "uri": "/2/topic_categories",
            "notes": "No parameters required parameters",
            "response": {
                "best_topics": [
                    "Optional fields parameter representing the best topic matches for the category",
                    {
                        "urlkey": "The unique keyword used to identify this topic",
                        "name": "The name of the topic",
                        "id": "Topic ID"
                    }
                ],
                "icon": [
                    "An icon representing the category",
                    {
                        "highres_link": "URL for the photo at its maximum size",
                        "photo_id": "Photo ID",
                        "photo_link": "URL for a standard size of the photo",
                        "thumb_link": "URL for the thumbnail sized photo"
                    }
                ],
                "name": "Display name of the category",
                "photo": [
                    "A photo representing the category",
                    {
                        "highres_link": "URL for the photo at its maximum size",
                        "photo_id": "Photo ID",
                        "photo_link": "URL for a standard size of the photo",
                        "thumb_link": "URL for the thumbnail sized photo"
                    }
                ],
                "topic": [
                    "A topic linked to the category",
                    {
                        "urlkey": "The unique keyword used to identify this topic",
                        "name": "The name of the topic",
                        "id": "Topic ID"
                    }
                ],
                "sort_name": "Name used for sorting",
                "category_ids": "list of category ids associated with this topic category",
                "shortname": "String identifier of the category"
            },
            "tag": null,
            "responseModel": "GetTopicCategories"
        },
        "GetVenues": {
            "version": "2",
            "name": "GetVenues",
            "httpMethod": "GET",
            "parameters": {
                "venue_id": {
                    "location": "query",
                    "required": false,
                    "description": "multiple ids may be separated with commas"
                },
                "fields": {
                    "location": "query",
                    "required": false,
                    "description": "Request that additional fields (separated by commas) be included in the output"
                },
                "group_id": {
                    "location": "query",
                    "required": false,
                    "description": "multiple ids may be separated with commas"
                },
                "group_urlname": {
                    "location": "query",
                    "required": false,
                    "description": "path to group from meetup.com, no slashes"
                },
                "event_id": {
                    "location": "query",
                    "required": false,
                    "description": "multiple ids may be separated with commas"
                },
                "rating": {
                    "location": "query",
                    "required": false,
                    "description": "average member rating"
                },
                "distance": {
                    "location": "query",
                    "required": false,
                    "description": "(default order) ordering is approximate and will not exactly match the values in the \"distance\" field."
                },
                "rating_count": {
                    "location": "query",
                    "required": false,
                    "description": "number of member ratings."
                },
                "page": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "offset": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "desc": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "order": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "only": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "omit": {
                    "location": "query",
                    "required": false,
                    "description": null
                }
            },
            "summary": "Search for Meetup venues by one of your groups, events, or venue identifiers. For a full text search on public venues use [OpenVenues](/meetup_api/docs/2/open_venues).",
            "uri": "/2/venues",
            "notes": "At least one of the required parameter(s) must be supplied with the request. You can use either group_urlname or group_id to filter by groups but not both.",
            "response": {
                "zip": "if US or Canada",
                "localized_country_name": "Name of country of venue",
                "distance": "Distance in miles from the search location, if one was specified",
                "address_1": "line 1 of venue address",
                "address_2": "line 2 of venue address",
                "address_3": "line 3 of venue address",
                "rating": "The average member rating",
                "venue_url": "URL of the venues's page on meetup.com",
                "rating_count": "The number of member ratings",
                "taglist": "Optional array of associated tagnames provided when a value of \"taglist\" is supplied with the \"fields\" request parameter",
                "lat, lon": "coordinates of venue",
                "phone": "phone number of venue",
                "city, state, country": "City, County code and if in US state of venue",
                "name": "Name of the venue",
                "id": "ID of the venue",
                "fax": "fax number of venue",
                "email": "email address of venue"
            },
            "tag": null,
            "responseModel": "GetVenues"
        },
        "GetMembersv2": {
            "version": "2",
            "name": "GetMembersv2",
            "httpMethod": "GET",
            "parameters": {
                "topic": {
                    "location": "query",
                    "required": false,
                    "description": "Return members for the group with given topic and number"
                },
                "groupnum": {
                    "location": "query",
                    "required": false,
                    "description": "Return members for the group with given topic and number"
                },
                "group_urlname": {
                    "location": "query",
                    "required": false,
                    "description": "Return members for the group with the given custom URL path"
                },
                "member_id": {
                    "location": "query",
                    "required": false,
                    "description": "Return the member with this ID"
                },
                "fields": {
                    "location": "query",
                    "required": false,
                    "description": "Request that additional fields (separated by commas) be included in the output."
                },
                "group_id": {
                    "location": "query",
                    "required": false,
                    "description": "Return members in groups with these ID numbers, separated by commas"
                },
                "service": {
                    "location": "query",
                    "required": false,
                    "description": "Match users by the external services they've linked to their member account, specified as \"servicename:identifier\". For example, \"service=twitter:@MeetupAPI\" finds any member account that lists @MeetupAPI as its Twitter name (none, currently). You can query against several at a time by separating them with commas. Facebook identifiers should be provided as numeric values"
                },
                "name": {
                    "location": "query",
                    "required": false,
                    "description": "the name of the member (default order)"
                },
                "visited": {
                    "location": "query",
                    "required": false,
                    "description": "member's most recent activity"
                },
                "joined": {
                    "location": "query",
                    "required": false,
                    "description": "time member joined Meetup"
                },
                "page": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "offset": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "desc": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "order": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "only": {
                    "location": "query",
                    "required": false,
                    "description": null
                },
                "omit": {
                    "location": "query",
                    "required": false,
                    "description": null
                }
            },
            "summary": "API method for accessing members of Meetup Groups",
            "uri": "/2/members",
            "notes": "At least one of the required parameter(s) must be supplied with the request. If any of the groups you specify are private, you will not see its members listed in the result set unless you are a member of that group.",
            "response": {
                "birthday": [
                    "If the authorized is the current member, the member's birthday based on provided information",
                    {
                        "month": "Month of birth",
                        "year": "Year of birth",
                        "day": "Day of birth"
                    }
                ],
                "gender": "Optional fields parameter. Members can only see their own gender. May be one of other, none, female, male",
                "link": "URL to the member's profile page on meetup.com",
                "bio": "A description of the member",
                "privacy": [
                    "Optional fields parameter. Defines preferences for visibility of certain attributes only returned for the authenticated member",
                    {
                        "groups": "may be 'hidden' or 'visible'",
                        "bio": "may be 'hidden' or 'visible'",
                        "photos": "may be 'hidden' or 'visible'",
                        "topics": "may be 'hidden' or 'visible'",
                        "facebook": "may be 'hidden' or 'visible'. If absent, the member has not connected their Facebook account to Meetup"
                    }
                ],
                "photos": "List of all the member's photos returned as an array of the representation of the photo property",
                "messagable": "Returned when the \"fields\" parameter is set to \"messaging_pref\". Returns \"true\" if the authenticated member can message them, \"false\" otherwise.",
                "other_services": [
                    "Third-party services associated with the member account",
                    {
                        "[service-name]": [
                            "This element is flickr, tumblr, twitter, or linkedin",
                            {
                                "identifier": "identifier for the service, a username or URL"
                            }
                        ]
                    }
                ],
                "id": "The member's id",
                "photo_url": "Link to the profile photo of the member",
                "lang": "The member's current language preference. Returned only when the member in the response matches the authenticated member",
                "hometown": "Hometown of member",
                "topics": [
                    "A sampling of 50 topics this member has subscribed to. Only appears if the queried user has not hidden them, or if the authenticated and queried user are the same",
                    {
                        "urlkey": "Unique keyword used to identify this topic",
                        "name": "Topic name",
                        "id": "Topic ID"
                    }
                ],
                "joined": "Date and time a member joined in milliseconds since the epoch",
                "photo": [
                    "The member's photo if available",
                    {
                        "highres_link": "URL for the photo at its maximum size",
                        "photo_id": "Photo ID",
                        "photo_link": "URL for a standard size of the photo",
                        "thumb_link": "URL for a thumbnail of the photo"
                    }
                ],
                "reachable": "Optional fields parameter. If querying by group and the authorized member is an organizer the member's group, this will return false when the member's email address is known to bounce and true otherwise",
                "lat, lon": "Latitude and longitude coordinates of the members reported city",
                "membership_count": "Optional field indicating the number of active memberships this member has. If the member has a hidden group preference, this will return 0.",
                "facebook_connection": [
                    "Optional response field. Only returned for the members matching the authenticated member if the authenticated member has connected their Facebook account to their Meetup account",
                    {
                        "status": "The current status of the member's Facebook connection. Status may be one of: 'active', if you have an active Facebook connection or 'inactive', if your previous active connection was deactivated."
                    }
                ],
                "name": "The member's name",
                "visited": "Date and time of member's last activity in milliseconds since the epoch",
                "self": [
                    "Optional field, details particular to the authorized user.",
                    {
                        "common": [
                            "What the authorized user and queried member have in common",
                            {
                                "groups": [
                                    "Groups the members both belong to",
                                    {
                                        "join_mode": "\"open\", \"approval\", or \"closed\"",
                                        "created": "Date and time that the group was founded, in milliseconds since the epoch",
                                        "name": "Group name",
                                        "group_lon": "Approximate group longitude",
                                        "id": "Group id",
                                        "urlname": "Group URL name",
                                        "group_lat": "Approximate group latitude",
                                        "who": "What the group calls its members"
                                    }
                                ],
                                "friends": [
                                    "Members who are Facebook friends with both members",
                                    {
                                        "member_id": "Member's ID",
                                        "name": "Name of the member",
                                        "member_country": "Optional field",
                                        "member_state": "Optional field",
                                        "member_city": "Optional field"
                                    }
                                ]
                            }
                        ],
                        "blocks": "Boolean indicator of whether or not the authorized member has blocked this member. Only returned if fields is set to self_blocks"
                    }
                ],
                "country, city, state": "Country, City, (and for the US, State) the member has provided",
                "messaging_pref": "Returned when the \"fields\" parameter is set to \"messaging_pref\". This specifies the members preference for being contacted from members on the site. Possible values are \"orgs_only\", \"groups_only\", \"all_members\"",
                "status": "The member's status. Currently always 'active' for registered members"
            },
            "tag": null,
            "responseModel": "GetMembers"
        }
    },
    "models": {
        "CreateEvent": {
            "type": "object",
            "properties": {
                "status": {
                    "location": "statusCode",
                    "type": "integer"
                }
            }
        },
        "CreateEventComment": {
            "type": "object",
            "properties": {
                "status": {
                    "location": "statusCode",
                    "type": "integer"
                }
            }
        },
        "CreateEventCommentFlag": {
            "type": "object",
            "properties": {
                "status": {
                    "location": "statusCode",
                    "type": "integer"
                }
            }
        },
        "CreateEventRating": {
            "type": "object",
            "properties": {
                "rating": {
                    "location": "json",
                    "type": null
                },
                "event_id": {
                    "location": "json",
                    "type": null
                },
                "time": {
                    "location": "json",
                    "type": null
                },
                "group_id": {
                    "location": "json",
                    "type": null
                },
                "rating_count": {
                    "location": "json",
                    "type": null
                },
                "status": {
                    "location": "statusCode",
                    "type": "integer"
                }
            },
            "location": null,
            "items": null
        },
        "CreateGroupPhoto": {
            "type": "object",
            "properties": {
                "photo_url": {
                    "location": "json",
                    "type": null
                },
                "title": {
                    "location": "json",
                    "type": null
                },
                "group_photo_id": {
                    "location": "json",
                    "type": null
                },
                "status": {
                    "location": "statusCode",
                    "type": "integer"
                }
            },
            "location": null,
            "items": null
        },
        "CreateMemberPhoto": {
            "type": "object",
            "properties": {
                "photo_url": {
                    "location": "json",
                    "type": null
                },
                "title": {
                    "location": "json",
                    "type": null
                },
                "member_photo_id": {
                    "location": "json",
                    "type": null
                },
                "status": {
                    "location": "statusCode",
                    "type": "integer"
                }
            },
            "location": null,
            "items": null
        },
        "CreatePhoto": {
            "type": "object",
            "properties": {
                "site_link": {
                    "location": "json",
                    "type": null
                },
                "event_photo_id": {
                    "location": "json",
                    "type": null
                },
                "created": {
                    "location": "json",
                    "type": null
                },
                "member": {
                    "location": "json",
                    "type": "object"
                },
                "album_id": {
                    "location": "json",
                    "type": null
                },
                "photo_url": {
                    "location": "json",
                    "type": null
                },
                "title": {
                    "location": "json",
                    "type": null
                },
                "updated": {
                    "location": "json",
                    "type": null
                },
                "status": {
                    "location": "statusCode",
                    "type": "integer"
                }
            },
            "location": null,
            "items": null
        },
        "CreatePhotoAlbum": {
            "type": "object",
            "properties": {
                "status": {
                    "location": "statusCode",
                    "type": "integer"
                }
            }
        },
        "CreatePhotoComment": {
            "type": "object",
            "properties": {
                "status": {
                    "location": "statusCode",
                    "type": "integer"
                }
            }
        },
        "CreateProfile": {
            "type": "object",
            "properties": {
                "status": {
                    "location": "statusCode",
                    "type": "integer"
                }
            }
        },
        "CreateRsvp": {
            "type": "object",
            "properties": {
                "venue": {
                    "location": "json",
                    "type": "object"
                },
                "comments": {
                    "location": "json",
                    "type": null
                },
                "payment_redirect": {
                    "location": "json",
                    "type": null
                },
                "created": {
                    "location": "json",
                    "type": null
                },
                "member_photo": {
                    "location": "json",
                    "type": "object"
                },
                "answers": {
                    "location": "json",
                    "type": "object"
                },
                "rsvp_id": {
                    "location": "json",
                    "type": null
                },
                "mtime": {
                    "location": "json",
                    "type": null
                },
                "pay_status": {
                    "location": "json",
                    "type": null
                },
                "response": {
                    "location": "json",
                    "type": null
                },
                "tallies": {
                    "location": "json",
                    "type": "object"
                },
                "host": {
                    "location": "json",
                    "type": null
                },
                "member": {
                    "location": "json",
                    "type": "object"
                },
                "guests": {
                    "location": "json",
                    "type": null
                },
                "event": {
                    "location": "json",
                    "type": "object"
                },
                "attendance_status": {
                    "location": "json",
                    "type": null
                },
                "group": {
                    "location": "json",
                    "type": "object"
                },
                "status": {
                    "location": "statusCode",
                    "type": "integer"
                }
            },
            "location": null,
            "items": null
        },
        "DeleteEvent": {
            "type": "object",
            "properties": {
                "status": {
                    "location": "statusCode",
                    "type": "integer"
                }
            }
        },
        "DeleteEventComment": {
            "type": "object",
            "properties": {
                "status": {
                    "location": "statusCode",
                    "type": "integer"
                }
            }
        },
        "DeleteEventCommentLike": {
            "type": "object",
            "properties": {
                "status": {
                    "location": "statusCode",
                    "type": "integer"
                }
            }
        },
        "DeleteEventCommentSubscribe": {
            "type": "object",
            "properties": {
                "status": {
                    "location": "statusCode",
                    "type": "integer"
                }
            }
        },
        "DeleteMemberPhoto": {
            "type": "object",
            "properties": {
                "status": {
                    "location": "statusCode",
                    "type": "integer"
                }
            }
        },
        "DeletePhoto": {
            "type": "object",
            "properties": {
                "status": {
                    "location": "statusCode",
                    "type": "integer"
                }
            }
        },
        "DeleteProfile": {
            "type": "object",
            "properties": {
                "status": {
                    "location": "statusCode",
                    "type": "integer"
                }
            }
        },
        "EditEvent": {
            "type": "object",
            "properties": {
                "status": {
                    "location": "statusCode",
                    "type": "integer"
                }
            }
        },
        "EditEventCommentLike": {
            "type": "object",
            "properties": {
                "status": {
                    "location": "statusCode",
                    "type": "integer"
                }
            }
        },
        "EditEventCommentSubscribe": {
            "type": "object",
            "properties": {
                "status": {
                    "location": "statusCode",
                    "type": "integer"
                }
            }
        },
        "EditMember": {
            "type": "object",
            "properties": {
                "birthday": {
                    "location": "json",
                    "type": "object"
                },
                "gender": {
                    "location": "json",
                    "type": null
                },
                "link": {
                    "location": "json",
                    "type": null
                },
                "bio": {
                    "location": "json",
                    "type": null
                },
                "privacy": {
                    "location": "json",
                    "type": "object"
                },
                "photos": {
                    "location": "json",
                    "type": null
                },
                "messagable": {
                    "location": "json",
                    "type": null
                },
                "other_services": {
                    "location": "json",
                    "type": "object"
                },
                "id": {
                    "location": "json",
                    "type": null
                },
                "photo_url": {
                    "location": "json",
                    "type": null
                },
                "lang": {
                    "location": "json",
                    "type": null
                },
                "hometown": {
                    "location": "json",
                    "type": null
                },
                "topics": {
                    "location": "json",
                    "type": "object"
                },
                "joined": {
                    "location": "json",
                    "type": null
                },
                "photo": {
                    "location": "json",
                    "type": "object"
                },
                "reachable": {
                    "location": "json",
                    "type": null
                },
                "lat, lon": {
                    "location": "json",
                    "type": null
                },
                "membership_count": {
                    "location": "json",
                    "type": null
                },
                "facebook_connection": {
                    "location": "json",
                    "type": "object"
                },
                "name": {
                    "location": "json",
                    "type": null
                },
                "visited": {
                    "location": "json",
                    "type": null
                },
                "self": {
                    "location": "json",
                    "type": "object"
                },
                "country, city, state": {
                    "location": "json",
                    "type": null
                },
                "messaging_pref": {
                    "location": "json",
                    "type": null
                },
                "status": {
                    "location": "statusCode",
                    "type": "integer"
                }
            },
            "location": null,
            "items": null
        },
        "EditPhoto": {
            "type": "object",
            "properties": {
                "comment_count": {
                    "location": "json",
                    "type": null
                },
                "site_link": {
                    "location": "json",
                    "type": null
                },
                "highres_link": {
                    "location": "json",
                    "type": null
                },
                "photo_id": {
                    "location": "json",
                    "type": null
                },
                "created": {
                    "location": "json",
                    "type": null
                },
                "member_photo": {
                    "location": "json",
                    "type": "object"
                },
                "caption": {
                    "location": "json",
                    "type": null
                },
                "thumb_link": {
                    "location": "json",
                    "type": null
                },
                "photo_album": {
                    "location": "json",
                    "type": "object"
                },
                "member": {
                    "location": "json",
                    "type": "object"
                },
                "self": {
                    "location": "json",
                    "type": "object"
                },
                "photo_link": {
                    "location": "json",
                    "type": null
                },
                "updated": {
                    "location": "json",
                    "type": null
                },
                "status": {
                    "location": "statusCode",
                    "type": "integer"
                }
            },
            "location": null,
            "items": null
        },
        "EditProfile": {
            "type": "object",
            "properties": {
                "status": {
                    "location": "statusCode",
                    "type": "integer"
                }
            }
        },
        "GetCategories": {
            "type": "array",
            "properties": [],
            "location": "json",
            "items": {
                "type": "object",
                "properties": {
                    "name": {
                        "location": "json",
                        "type": null
                    },
                    "id": {
                        "location": "json",
                        "type": null
                    },
                    "shortname": {
                        "location": "json",
                        "type": null
                    },
                    "status": {
                        "location": "statusCode",
                        "type": "integer"
                    }
                },
                "location": null,
                "items": null
            }
        },
        "GetCities": {
            "type": "array",
            "properties": [],
            "location": "json",
            "items": {
                "type": "object",
                "properties": {
                    "zip": {
                        "location": "json",
                        "type": null
                    },
                    "country": {
                        "location": "json",
                        "type": null
                    },
                    "localized_country_name": {
                        "location": "json",
                        "type": null
                    },
                    "distance": {
                        "location": "json",
                        "type": null
                    },
                    "city": {
                        "location": "json",
                        "type": null
                    },
                    "lon": {
                        "location": "json",
                        "type": null
                    },
                    "ranking": {
                        "location": "json",
                        "type": null
                    },
                    "id": {
                        "location": "json",
                        "type": null
                    },
                    "state": {
                        "location": "json",
                        "type": null
                    },
                    "member_count": {
                        "location": "json",
                        "type": null
                    },
                    "name_string": {
                        "location": "json",
                        "type": null
                    },
                    "lat": {
                        "location": "json",
                        "type": null
                    },
                    "status": {
                        "location": "statusCode",
                        "type": "integer"
                    }
                },
                "location": null,
                "items": null
            }
        },
        "GetConcierge": {
            "type": "array",
            "properties": [],
            "location": "json",
            "items": {
                "type": "object",
                "properties": {
                    "utc_offset": {
                        "location": "json",
                        "type": null
                    },
                    "comment_count": {
                        "location": "json",
                        "type": null
                    },
                    "rsvp_limit": {
                        "location": "json",
                        "type": null
                    },
                    "venue": {
                        "location": "json",
                        "type": "object"
                    },
                    "featured": {
                        "location": "json",
                        "type": null
                    },
                    "photo_sample": {
                        "location": "json",
                        "type": "object"
                    },
                    "headcount": {
                        "location": "json",
                        "type": null
                    },
                    "survey_questions": {
                        "location": "json",
                        "type": "object"
                    },
                    "announced_at": {
                        "location": "json",
                        "type": null
                    },
                    "distance": {
                        "location": "json",
                        "type": null
                    },
                    "venue_visibility": {
                        "location": "json",
                        "type": null
                    },
                    "timezone": {
                        "location": "json",
                        "type": null
                    },
                    "fee": {
                        "location": "json",
                        "type": "object"
                    },
                    "rating": {
                        "location": "json",
                        "type": "object"
                    },
                    "why": {
                        "location": "json",
                        "type": null
                    },
                    "description": {
                        "location": "json",
                        "type": null
                    },
                    "is_simplehtml": {
                        "location": "json",
                        "type": null
                    },
                    "short_link": {
                        "location": "json",
                        "type": null
                    },
                    "yes_rsvp_count": {
                        "location": "json",
                        "type": null
                    },
                    "duration": {
                        "location": "json",
                        "type": null
                    },
                    "event_hosts": {
                        "location": "json",
                        "type": "object"
                    },
                    "id": {
                        "location": "json",
                        "type": null
                    },
                    "simple_html_description": {
                        "location": "json",
                        "type": null
                    },
                    "photo_url": {
                        "location": "json",
                        "type": null
                    },
                    "publish_status": {
                        "location": "json",
                        "type": null
                    },
                    "group": {
                        "location": "json",
                        "type": "object"
                    },
                    "photo_album_id": {
                        "location": "json",
                        "type": null
                    },
                    "rsvp_rules": {
                        "location": "json",
                        "type": "object"
                    },
                    "visibility": {
                        "location": "json",
                        "type": null
                    },
                    "created": {
                        "location": "json",
                        "type": null
                    },
                    "maybe_rsvp_count": {
                        "location": "json",
                        "type": null
                    },
                    "how_to_find_us": {
                        "location": "json",
                        "type": null
                    },
                    "event_url": {
                        "location": "json",
                        "type": null
                    },
                    "announced": {
                        "location": "json",
                        "type": null
                    },
                    "photo_count": {
                        "location": "json",
                        "type": null
                    },
                    "rsvpable": {
                        "location": "json",
                        "type": null
                    },
                    "rsvp_sample": {
                        "location": "json",
                        "type": "object"
                    },
                    "series": {
                        "location": "json",
                        "type": "object"
                    },
                    "name": {
                        "location": "json",
                        "type": null
                    },
                    "self": {
                        "location": "json",
                        "type": "object"
                    },
                    "time": {
                        "location": "json",
                        "type": null
                    },
                    "updated": {
                        "location": "json",
                        "type": null
                    },
                    "trending_rank": {
                        "location": "json",
                        "type": null
                    },
                    "status": {
                        "location": "statusCode",
                        "type": "integer"
                    }
                },
                "location": null,
                "items": null
            }
        },
        "GetDashboard": {
            "type": "array",
            "properties": [],
            "location": "json",
            "items": {
                "type": "object",
                "properties": {
                    "stats": {
                        "location": "json",
                        "type": "object"
                    },
                    "last_event": {
                        "location": "json",
                        "type": "object"
                    },
                    "service_status": {
                        "location": "json",
                        "type": "object"
                    },
                    "ongoing_event": {
                        "location": "json",
                        "type": "object"
                    },
                    "notifications": {
                        "location": "json",
                        "type": "object"
                    },
                    "next_event": {
                        "location": "json",
                        "type": "object"
                    },
                    "status": {
                        "location": "statusCode",
                        "type": "integer"
                    }
                },
                "location": null,
                "items": null
            }
        },
        "GetEventComment": {
            "type": "object",
            "properties": {
                "member_id": {
                    "location": "json",
                    "type": null
                },
                "like_count": {
                    "location": "json",
                    "type": null
                },
                "member_photo": {
                    "location": "json",
                    "type": "object"
                },
                "comment_url": {
                    "location": "json",
                    "type": null
                },
                "member_name": {
                    "location": "json",
                    "type": null
                },
                "in_reply_to": {
                    "location": "json",
                    "type": null
                },
                "event_comment_id": {
                    "location": "json",
                    "type": null
                },
                "event_id": {
                    "location": "json",
                    "type": null
                },
                "replies": {
                    "location": "json",
                    "type": null
                },
                "group_id": {
                    "location": "json",
                    "type": null
                },
                "self": {
                    "location": "json",
                    "type": "object"
                },
                "comment": {
                    "location": "json",
                    "type": null
                },
                "event": {
                    "location": "json",
                    "type": "object"
                },
                "notifications": {
                    "location": "json",
                    "type": null
                },
                "status": {
                    "location": "statusCode",
                    "type": "integer"
                }
            },
            "location": null,
            "items": null
        },
        "GetEventCommentLikes": {
            "type": "array",
            "properties": [],
            "location": "json",
            "items": {
                "type": "object",
                "properties": {
                    "member": {
                        "location": "json",
                        "type": "object"
                    },
                    "event_comment_id": {
                        "location": "json",
                        "type": null
                    },
                    "created": {
                        "location": "json",
                        "type": null
                    },
                    "status": {
                        "location": "statusCode",
                        "type": "integer"
                    }
                },
                "location": null,
                "items": null
            }
        },
        "GetEventComments": {
            "type": "array",
            "properties": [],
            "location": "json",
            "items": {
                "type": "object",
                "properties": {
                    "member_id": {
                        "location": "json",
                        "type": null
                    },
                    "like_count": {
                        "location": "json",
                        "type": null
                    },
                    "member_photo": {
                        "location": "json",
                        "type": "object"
                    },
                    "comment_url": {
                        "location": "json",
                        "type": null
                    },
                    "member_name": {
                        "location": "json",
                        "type": null
                    },
                    "in_reply_to": {
                        "location": "json",
                        "type": null
                    },
                    "event_comment_id": {
                        "location": "json",
                        "type": null
                    },
                    "event_id": {
                        "location": "json",
                        "type": null
                    },
                    "group_id": {
                        "location": "json",
                        "type": null
                    },
                    "self": {
                        "location": "json",
                        "type": "object"
                    },
                    "comment": {
                        "location": "json",
                        "type": null
                    },
                    "event": {
                        "location": "json",
                        "type": "object"
                    },
                    "notifications": {
                        "location": "json",
                        "type": null
                    },
                    "status": {
                        "location": "statusCode",
                        "type": "integer"
                    }
                },
                "location": null,
                "items": null
            }
        },
        "GetEventRatings": {
            "type": "array",
            "properties": [],
            "location": "json",
            "items": {
                "type": "object",
                "properties": {
                    "member_id": {
                        "location": "json",
                        "type": null
                    },
                    "event_id": {
                        "location": "json",
                        "type": null
                    },
                    "group_id": {
                        "location": "json",
                        "type": null
                    },
                    "rating": {
                        "location": "json",
                        "type": null
                    },
                    "time": {
                        "location": "json",
                        "type": null
                    },
                    "member_name": {
                        "location": "json",
                        "type": null
                    },
                    "status": {
                        "location": "statusCode",
                        "type": "integer"
                    }
                },
                "location": null,
                "items": null
            }
        },
        "GetEvents": {
            "type": "array",
            "properties": [],
            "location": "json",
            "items": {
                "type": "object",
                "properties": {
                    "utc_offset": {
                        "location": "json",
                        "type": null
                    },
                    "comment_count": {
                        "location": "json",
                        "type": null
                    },
                    "rsvp_limit": {
                        "location": "json",
                        "type": null
                    },
                    "venue": {
                        "location": "json",
                        "type": "object"
                    },
                    "featured": {
                        "location": "json",
                        "type": null
                    },
                    "photo_sample": {
                        "location": "json",
                        "type": "object"
                    },
                    "headcount": {
                        "location": "json",
                        "type": null
                    },
                    "survey_questions": {
                        "location": "json",
                        "type": "object"
                    },
                    "announced_at": {
                        "location": "json",
                        "type": null
                    },
                    "distance": {
                        "location": "json",
                        "type": null
                    },
                    "venue_visibility": {
                        "location": "json",
                        "type": null
                    },
                    "timezone": {
                        "location": "json",
                        "type": null
                    },
                    "fee": {
                        "location": "json",
                        "type": "object"
                    },
                    "rating": {
                        "location": "json",
                        "type": "object"
                    },
                    "why": {
                        "location": "json",
                        "type": null
                    },
                    "description": {
                        "location": "json",
                        "type": null
                    },
                    "is_simplehtml": {
                        "location": "json",
                        "type": null
                    },
                    "short_link": {
                        "location": "json",
                        "type": null
                    },
                    "yes_rsvp_count": {
                        "location": "json",
                        "type": null
                    },
                    "duration": {
                        "location": "json",
                        "type": null
                    },
                    "event_hosts": {
                        "location": "json",
                        "type": "object"
                    },
                    "id": {
                        "location": "json",
                        "type": null
                    },
                    "simple_html_description": {
                        "location": "json",
                        "type": null
                    },
                    "photo_url": {
                        "location": "json",
                        "type": null
                    },
                    "publish_status": {
                        "location": "json",
                        "type": null
                    },
                    "group": {
                        "location": "json",
                        "type": "object"
                    },
                    "photo_album_id": {
                        "location": "json",
                        "type": null
                    },
                    "rsvp_rules": {
                        "location": "json",
                        "type": "object"
                    },
                    "visibility": {
                        "location": "json",
                        "type": null
                    },
                    "created": {
                        "location": "json",
                        "type": null
                    },
                    "maybe_rsvp_count": {
                        "location": "json",
                        "type": null
                    },
                    "how_to_find_us": {
                        "location": "json",
                        "type": null
                    },
                    "event_url": {
                        "location": "json",
                        "type": null
                    },
                    "announced": {
                        "location": "json",
                        "type": null
                    },
                    "photo_count": {
                        "location": "json",
                        "type": null
                    },
                    "rsvpable": {
                        "location": "json",
                        "type": null
                    },
                    "rsvp_sample": {
                        "location": "json",
                        "type": "object"
                    },
                    "series": {
                        "location": "json",
                        "type": "object"
                    },
                    "name": {
                        "location": "json",
                        "type": null
                    },
                    "self": {
                        "location": "json",
                        "type": "object"
                    },
                    "time": {
                        "location": "json",
                        "type": null
                    },
                    "updated": {
                        "location": "json",
                        "type": null
                    },
                    "trending_rank": {
                        "location": "json",
                        "type": null
                    },
                    "status": {
                        "location": "statusCode",
                        "type": "integer"
                    }
                },
                "location": null,
                "items": null
            }
        },
        "GetGroups": {
            "type": "object",
            "properties": {
                "utc_offset": {
                    "location": "json",
                    "type": null
                },
                "country": {
                    "location": "json",
                    "type": null
                },
                "pending_members": {
                    "location": "json",
                    "type": null
                },
                "similar_groups": {
                    "location": "json",
                    "type": "object"
                },
                "city": {
                    "location": "json",
                    "type": null
                },
                "timezone": {
                    "location": "json",
                    "type": null
                },
                "primary_topic": {
                    "location": "json",
                    "type": null
                },
                "rating": {
                    "location": "json",
                    "type": null
                },
                "link": {
                    "location": "json",
                    "type": null
                },
                "description": {
                    "location": "json",
                    "type": null
                },
                "lon": {
                    "location": "json",
                    "type": null
                },
                "welcome_message": {
                    "location": "json",
                    "type": null
                },
                "is_simplehtml": {
                    "location": "json",
                    "type": null
                },
                "group_photo": {
                    "location": "json",
                    "type": "object"
                },
                "photos": {
                    "location": "json",
                    "type": "object"
                },
                "short_link": {
                    "location": "json",
                    "type": null
                },
                "other_services": {
                    "location": "json",
                    "type": "object"
                },
                "join_mode": {
                    "location": "json",
                    "type": null
                },
                "approved": {
                    "location": "json",
                    "type": null
                },
                "contributions": {
                    "location": "json",
                    "type": "object"
                },
                "sponsors": {
                    "location": "json",
                    "type": "object"
                },
                "members": {
                    "location": "json",
                    "type": null
                },
                "id": {
                    "location": "json",
                    "type": null
                },
                "state": {
                    "location": "json",
                    "type": null
                },
                "simple_html_description": {
                    "location": "json",
                    "type": null
                },
                "urlname": {
                    "location": "json",
                    "type": null
                },
                "membership_dues": {
                    "location": "json",
                    "type": "object"
                },
                "lat": {
                    "location": "json",
                    "type": null
                },
                "next_event": {
                    "location": "json",
                    "type": "object"
                },
                "list_mode": {
                    "location": "json",
                    "type": null
                },
                "ga_code": {
                    "location": "json",
                    "type": null
                },
                "join_info": {
                    "location": "json",
                    "type": "object"
                },
                "visibility": {
                    "location": "json",
                    "type": null
                },
                "topics": {
                    "location": "json",
                    "type": "object"
                },
                "created": {
                    "location": "json",
                    "type": null
                },
                "list_addr": {
                    "location": "json",
                    "type": null
                },
                "organizer": {
                    "location": "json",
                    "type": "object"
                },
                "last_event": {
                    "location": "json",
                    "type": "object"
                },
                "name": {
                    "location": "json",
                    "type": null
                },
                "self": {
                    "location": "json",
                    "type": "object"
                },
                "member_cap": {
                    "location": "json",
                    "type": null
                },
                "category": {
                    "location": "json",
                    "type": "object"
                },
                "who": {
                    "location": "json",
                    "type": null
                },
                "status": {
                    "location": "statusCode",
                    "type": "integer"
                }
            },
            "location": null,
            "items": null
        },
        "GetMember": {
            "type": "object",
            "properties": {
                "birthday": {
                    "location": "json",
                    "type": "object"
                },
                "gender": {
                    "location": "json",
                    "type": null
                },
                "link": {
                    "location": "json",
                    "type": null
                },
                "bio": {
                    "location": "json",
                    "type": null
                },
                "privacy": {
                    "location": "json",
                    "type": "object"
                },
                "photos": {
                    "location": "json",
                    "type": null
                },
                "messagable": {
                    "location": "json",
                    "type": null
                },
                "other_services": {
                    "location": "json",
                    "type": "object"
                },
                "id": {
                    "location": "json",
                    "type": null
                },
                "photo_url": {
                    "location": "json",
                    "type": null
                },
                "lang": {
                    "location": "json",
                    "type": null
                },
                "hometown": {
                    "location": "json",
                    "type": null
                },
                "topics": {
                    "location": "json",
                    "type": "object"
                },
                "joined": {
                    "location": "json",
                    "type": null
                },
                "photo": {
                    "location": "json",
                    "type": "object"
                },
                "reachable": {
                    "location": "json",
                    "type": null
                },
                "lat, lon": {
                    "location": "json",
                    "type": null
                },
                "membership_count": {
                    "location": "json",
                    "type": null
                },
                "facebook_connection": {
                    "location": "json",
                    "type": "object"
                },
                "name": {
                    "location": "json",
                    "type": null
                },
                "visited": {
                    "location": "json",
                    "type": null
                },
                "self": {
                    "location": "json",
                    "type": "object"
                },
                "country, city, state": {
                    "location": "json",
                    "type": null
                },
                "messaging_pref": {
                    "location": "json",
                    "type": null
                },
                "status": {
                    "location": "statusCode",
                    "type": "integer"
                }
            },
            "location": null,
            "items": null
        },
        "GetMembers": {
            "type": "array",
            "properties": [],
            "location": "json",
            "items": {
                "type": "object",
                "properties": {
                    "birthday": {
                        "location": "json",
                        "type": "object"
                    },
                    "gender": {
                        "location": "json",
                        "type": null
                    },
                    "link": {
                        "location": "json",
                        "type": null
                    },
                    "bio": {
                        "location": "json",
                        "type": null
                    },
                    "privacy": {
                        "location": "json",
                        "type": "object"
                    },
                    "photos": {
                        "location": "json",
                        "type": null
                    },
                    "messagable": {
                        "location": "json",
                        "type": null
                    },
                    "other_services": {
                        "location": "json",
                        "type": "object"
                    },
                    "id": {
                        "location": "json",
                        "type": null
                    },
                    "photo_url": {
                        "location": "json",
                        "type": null
                    },
                    "lang": {
                        "location": "json",
                        "type": null
                    },
                    "hometown": {
                        "location": "json",
                        "type": null
                    },
                    "topics": {
                        "location": "json",
                        "type": "object"
                    },
                    "joined": {
                        "location": "json",
                        "type": null
                    },
                    "photo": {
                        "location": "json",
                        "type": "object"
                    },
                    "reachable": {
                        "location": "json",
                        "type": null
                    },
                    "lat, lon": {
                        "location": "json",
                        "type": null
                    },
                    "membership_count": {
                        "location": "json",
                        "type": null
                    },
                    "facebook_connection": {
                        "location": "json",
                        "type": "object"
                    },
                    "name": {
                        "location": "json",
                        "type": null
                    },
                    "visited": {
                        "location": "json",
                        "type": null
                    },
                    "self": {
                        "location": "json",
                        "type": "object"
                    },
                    "country, city, state": {
                        "location": "json",
                        "type": null
                    },
                    "messaging_pref": {
                        "location": "json",
                        "type": null
                    },
                    "status": {
                        "location": "statusCode",
                        "type": "integer"
                    }
                },
                "location": null,
                "items": null
            }
        },
        "GetOpenEvents": {
            "type": "array",
            "properties": [],
            "location": "json",
            "items": {
                "type": "object",
                "properties": {
                    "utc_offset": {
                        "location": "json",
                        "type": null
                    },
                    "comment_count": {
                        "location": "json",
                        "type": null
                    },
                    "rsvp_limit": {
                        "location": "json",
                        "type": null
                    },
                    "venue": {
                        "location": "json",
                        "type": "object"
                    },
                    "featured": {
                        "location": "json",
                        "type": null
                    },
                    "photo_sample": {
                        "location": "json",
                        "type": "object"
                    },
                    "headcount": {
                        "location": "json",
                        "type": null
                    },
                    "survey_questions": {
                        "location": "json",
                        "type": "object"
                    },
                    "announced_at": {
                        "location": "json",
                        "type": null
                    },
                    "distance": {
                        "location": "json",
                        "type": null
                    },
                    "venue_visibility": {
                        "location": "json",
                        "type": null
                    },
                    "timezone": {
                        "location": "json",
                        "type": null
                    },
                    "fee": {
                        "location": "json",
                        "type": "object"
                    },
                    "rating": {
                        "location": "json",
                        "type": "object"
                    },
                    "why": {
                        "location": "json",
                        "type": null
                    },
                    "description": {
                        "location": "json",
                        "type": null
                    },
                    "is_simplehtml": {
                        "location": "json",
                        "type": null
                    },
                    "short_link": {
                        "location": "json",
                        "type": null
                    },
                    "yes_rsvp_count": {
                        "location": "json",
                        "type": null
                    },
                    "duration": {
                        "location": "json",
                        "type": null
                    },
                    "event_hosts": {
                        "location": "json",
                        "type": "object"
                    },
                    "id": {
                        "location": "json",
                        "type": null
                    },
                    "simple_html_description": {
                        "location": "json",
                        "type": null
                    },
                    "photo_url": {
                        "location": "json",
                        "type": null
                    },
                    "publish_status": {
                        "location": "json",
                        "type": null
                    },
                    "group": {
                        "location": "json",
                        "type": "object"
                    },
                    "photo_album_id": {
                        "location": "json",
                        "type": null
                    },
                    "rsvp_rules": {
                        "location": "json",
                        "type": "object"
                    },
                    "visibility": {
                        "location": "json",
                        "type": null
                    },
                    "created": {
                        "location": "json",
                        "type": null
                    },
                    "maybe_rsvp_count": {
                        "location": "json",
                        "type": null
                    },
                    "how_to_find_us": {
                        "location": "json",
                        "type": null
                    },
                    "event_url": {
                        "location": "json",
                        "type": null
                    },
                    "announced": {
                        "location": "json",
                        "type": null
                    },
                    "photo_count": {
                        "location": "json",
                        "type": null
                    },
                    "rsvpable": {
                        "location": "json",
                        "type": null
                    },
                    "rsvp_sample": {
                        "location": "json",
                        "type": "object"
                    },
                    "series": {
                        "location": "json",
                        "type": "object"
                    },
                    "name": {
                        "location": "json",
                        "type": null
                    },
                    "self": {
                        "location": "json",
                        "type": "object"
                    },
                    "time": {
                        "location": "json",
                        "type": null
                    },
                    "updated": {
                        "location": "json",
                        "type": null
                    },
                    "trending_rank": {
                        "location": "json",
                        "type": null
                    },
                    "status": {
                        "location": "statusCode",
                        "type": "integer"
                    }
                },
                "location": null,
                "items": null
            }
        },
        "GetOpenVenues": {
            "type": "array",
            "properties": [],
            "location": "json",
            "items": {
                "type": "object",
                "properties": {
                    "zip": {
                        "location": "json",
                        "type": null
                    },
                    "localized_country_name": {
                        "location": "json",
                        "type": null
                    },
                    "distance": {
                        "location": "json",
                        "type": null
                    },
                    "address_1": {
                        "location": "json",
                        "type": null
                    },
                    "address_2": {
                        "location": "json",
                        "type": null
                    },
                    "address_3": {
                        "location": "json",
                        "type": null
                    },
                    "rating": {
                        "location": "json",
                        "type": null
                    },
                    "venue_url": {
                        "location": "json",
                        "type": null
                    },
                    "rating_count": {
                        "location": "json",
                        "type": null
                    },
                    "taglist": {
                        "location": "json",
                        "type": null
                    },
                    "lat, lon": {
                        "location": "json",
                        "type": null
                    },
                    "phone": {
                        "location": "json",
                        "type": null
                    },
                    "city, state, country": {
                        "location": "json",
                        "type": null
                    },
                    "name": {
                        "location": "json",
                        "type": null
                    },
                    "id": {
                        "location": "json",
                        "type": null
                    },
                    "fax": {
                        "location": "json",
                        "type": null
                    },
                    "email": {
                        "location": "json",
                        "type": null
                    },
                    "status": {
                        "location": "statusCode",
                        "type": "integer"
                    }
                },
                "location": null,
                "items": null
            }
        },
        "GetPhotoAlbums": {
            "type": "array",
            "properties": [],
            "location": "json",
            "items": {
                "type": "object",
                "properties": {
                    "photo_album_id": {
                        "location": "json",
                        "type": null
                    },
                    "photo_count": {
                        "location": "json",
                        "type": null
                    },
                    "event_id": {
                        "location": "json",
                        "type": null
                    },
                    "group_id": {
                        "location": "json",
                        "type": null
                    },
                    "ordering": {
                        "location": "json",
                        "type": null
                    },
                    "created": {
                        "location": "json",
                        "type": null
                    },
                    "link": {
                        "location": "json",
                        "type": null
                    },
                    "title": {
                        "location": "json",
                        "type": null
                    },
                    "album_photo": {
                        "location": "json",
                        "type": "object"
                    },
                    "updated": {
                        "location": "json",
                        "type": null
                    },
                    "status": {
                        "location": "statusCode",
                        "type": "integer"
                    }
                },
                "location": null,
                "items": null
            }
        },
        "GetPhotoComments": {
            "type": "array",
            "properties": [],
            "location": "json",
            "items": {
                "type": "object",
                "properties": {
                    "photo_comment_id": {
                        "location": "json",
                        "type": null
                    },
                    "photo_id": {
                        "location": "json",
                        "type": null
                    },
                    "created": {
                        "location": "json",
                        "type": null
                    },
                    "member_photo": {
                        "location": "json",
                        "type": "object"
                    },
                    "member": {
                        "location": "json",
                        "type": "object"
                    },
                    "self": {
                        "location": "json",
                        "type": "object"
                    },
                    "comment": {
                        "location": "json",
                        "type": null
                    },
                    "status": {
                        "location": "statusCode",
                        "type": "integer"
                    }
                },
                "location": null,
                "items": null
            }
        },
        "GetPhotos": {
            "type": "array",
            "properties": [],
            "location": "json",
            "items": {
                "type": "object",
                "properties": {
                    "comment_count": {
                        "location": "json",
                        "type": null
                    },
                    "site_link": {
                        "location": "json",
                        "type": null
                    },
                    "highres_link": {
                        "location": "json",
                        "type": null
                    },
                    "photo_id": {
                        "location": "json",
                        "type": null
                    },
                    "created": {
                        "location": "json",
                        "type": null
                    },
                    "member_photo": {
                        "location": "json",
                        "type": "object"
                    },
                    "caption": {
                        "location": "json",
                        "type": null
                    },
                    "thumb_link": {
                        "location": "json",
                        "type": null
                    },
                    "photo_album": {
                        "location": "json",
                        "type": "object"
                    },
                    "member": {
                        "location": "json",
                        "type": "object"
                    },
                    "self": {
                        "location": "json",
                        "type": "object"
                    },
                    "photo_link": {
                        "location": "json",
                        "type": null
                    },
                    "updated": {
                        "location": "json",
                        "type": null
                    },
                    "status": {
                        "location": "statusCode",
                        "type": "integer"
                    }
                },
                "location": null,
                "items": null
            }
        },
        "GetProfile": {
            "type": "object",
            "properties": {
                "member_id": {
                    "location": "json",
                    "type": null
                },
                "created, updated": {
                    "location": "json",
                    "type": null
                },
                "role": {
                    "location": "json",
                    "type": null
                },
                "profile_url": {
                    "location": "json",
                    "type": null
                },
                "member_city": {
                    "location": "json",
                    "type": null
                },
                "additional": {
                    "location": "json",
                    "type": null
                },
                "answers": {
                    "location": "json",
                    "type": "object"
                },
                "bio": {
                    "location": "json",
                    "type": null
                },
                "photo": {
                    "location": "json",
                    "type": "object"
                },
                "title": {
                    "location": "json",
                    "type": null
                },
                "other_services": {
                    "location": "json",
                    "type": "object"
                },
                "site_url, site_name": {
                    "location": "json",
                    "type": null
                },
                "member_state": {
                    "location": "json",
                    "type": null
                },
                "name": {
                    "location": "json",
                    "type": null
                },
                "visited": {
                    "location": "json",
                    "type": null
                },
                "comment": {
                    "location": "json",
                    "type": null
                },
                "member_country": {
                    "location": "json",
                    "type": null
                },
                "photo_url": {
                    "location": "json",
                    "type": null
                },
                "membership_dues": {
                    "location": "json",
                    "type": "object"
                },
                "group": {
                    "location": "json",
                    "type": "object"
                },
                "status": {
                    "location": "statusCode",
                    "type": "integer"
                }
            },
            "location": null,
            "items": null
        },
        "GetProfiles": {
            "type": "array",
            "properties": [],
            "location": "json",
            "items": {
                "type": "object",
                "properties": {
                    "member_id": {
                        "location": "json",
                        "type": null
                    },
                    "created, updated": {
                        "location": "json",
                        "type": null
                    },
                    "role": {
                        "location": "json",
                        "type": null
                    },
                    "profile_url": {
                        "location": "json",
                        "type": null
                    },
                    "member_city": {
                        "location": "json",
                        "type": null
                    },
                    "additional": {
                        "location": "json",
                        "type": null
                    },
                    "answers": {
                        "location": "json",
                        "type": "object"
                    },
                    "bio": {
                        "location": "json",
                        "type": null
                    },
                    "photo": {
                        "location": "json",
                        "type": "object"
                    },
                    "title": {
                        "location": "json",
                        "type": null
                    },
                    "other_services": {
                        "location": "json",
                        "type": "object"
                    },
                    "site_url, site_name": {
                        "location": "json",
                        "type": null
                    },
                    "member_state": {
                        "location": "json",
                        "type": null
                    },
                    "name": {
                        "location": "json",
                        "type": null
                    },
                    "visited": {
                        "location": "json",
                        "type": null
                    },
                    "comment": {
                        "location": "json",
                        "type": null
                    },
                    "member_country": {
                        "location": "json",
                        "type": null
                    },
                    "photo_url": {
                        "location": "json",
                        "type": null
                    },
                    "membership_dues": {
                        "location": "json",
                        "type": "object"
                    },
                    "group": {
                        "location": "json",
                        "type": "object"
                    },
                    "status": {
                        "location": "statusCode",
                        "type": "integer"
                    }
                },
                "location": null,
                "items": null
            }
        },
        "GetRsvp": {
            "type": "object",
            "properties": {
                "venue": {
                    "location": "json",
                    "type": "object"
                },
                "comments": {
                    "location": "json",
                    "type": null
                },
                "created": {
                    "location": "json",
                    "type": null
                },
                "member_photo": {
                    "location": "json",
                    "type": "object"
                },
                "answers": {
                    "location": "json",
                    "type": "object"
                },
                "rsvp_id": {
                    "location": "json",
                    "type": null
                },
                "mtime": {
                    "location": "json",
                    "type": null
                },
                "pay_status": {
                    "location": "json",
                    "type": null
                },
                "response": {
                    "location": "json",
                    "type": null
                },
                "guests": {
                    "location": "json",
                    "type": null
                },
                "host": {
                    "location": "json",
                    "type": null
                },
                "member": {
                    "location": "json",
                    "type": "object"
                },
                "event": {
                    "location": "json",
                    "type": "object"
                },
                "attendance_status": {
                    "location": "json",
                    "type": null
                },
                "group": {
                    "location": "json",
                    "type": "object"
                },
                "status": {
                    "location": "statusCode",
                    "type": "integer"
                }
            },
            "location": null,
            "items": null
        },
        "GetRsvps": {
            "type": "array",
            "properties": [],
            "location": "json",
            "items": {
                "type": "object",
                "properties": {
                    "venue": {
                        "location": "json",
                        "type": "object"
                    },
                    "comments": {
                        "location": "json",
                        "type": null
                    },
                    "created": {
                        "location": "json",
                        "type": null
                    },
                    "member_photo": {
                        "location": "json",
                        "type": "object"
                    },
                    "answers": {
                        "location": "json",
                        "type": "object"
                    },
                    "rsvp_id": {
                        "location": "json",
                        "type": null
                    },
                    "mtime": {
                        "location": "json",
                        "type": null
                    },
                    "pay_status": {
                        "location": "json",
                        "type": null
                    },
                    "response": {
                        "location": "json",
                        "type": null
                    },
                    "guests": {
                        "location": "json",
                        "type": null
                    },
                    "host": {
                        "location": "json",
                        "type": null
                    },
                    "member": {
                        "location": "json",
                        "type": "object"
                    },
                    "event": {
                        "location": "json",
                        "type": "object"
                    },
                    "attendance_status": {
                        "location": "json",
                        "type": null
                    },
                    "group": {
                        "location": "json",
                        "type": "object"
                    },
                    "status": {
                        "location": "statusCode",
                        "type": "integer"
                    }
                },
                "location": null,
                "items": null
            }
        },
        "GetTopicCategories": {
            "type": "array",
            "properties": [],
            "location": "json",
            "items": {
                "type": "object",
                "properties": {
                    "best_topics": {
                        "location": "json",
                        "type": "object"
                    },
                    "icon": {
                        "location": "json",
                        "type": "object"
                    },
                    "name": {
                        "location": "json",
                        "type": null
                    },
                    "photo": {
                        "location": "json",
                        "type": "object"
                    },
                    "topic": {
                        "location": "json",
                        "type": "object"
                    },
                    "sort_name": {
                        "location": "json",
                        "type": null
                    },
                    "category_ids": {
                        "location": "json",
                        "type": null
                    },
                    "shortname": {
                        "location": "json",
                        "type": null
                    },
                    "status": {
                        "location": "statusCode",
                        "type": "integer"
                    }
                },
                "location": null,
                "items": null
            }
        },
        "GetVenues": {
            "type": "array",
            "properties": [],
            "location": "json",
            "items": {
                "type": "object",
                "properties": {
                    "zip": {
                        "location": "json",
                        "type": null
                    },
                    "localized_country_name": {
                        "location": "json",
                        "type": null
                    },
                    "distance": {
                        "location": "json",
                        "type": null
                    },
                    "address_1": {
                        "location": "json",
                        "type": null
                    },
                    "address_2": {
                        "location": "json",
                        "type": null
                    },
                    "address_3": {
                        "location": "json",
                        "type": null
                    },
                    "rating": {
                        "location": "json",
                        "type": null
                    },
                    "venue_url": {
                        "location": "json",
                        "type": null
                    },
                    "rating_count": {
                        "location": "json",
                        "type": null
                    },
                    "taglist": {
                        "location": "json",
                        "type": null
                    },
                    "lat, lon": {
                        "location": "json",
                        "type": null
                    },
                    "phone": {
                        "location": "json",
                        "type": null
                    },
                    "city, state, country": {
                        "location": "json",
                        "type": null
                    },
                    "name": {
                        "location": "json",
                        "type": null
                    },
                    "id": {
                        "location": "json",
                        "type": null
                    },
                    "fax": {
                        "location": "json",
                        "type": null
                    },
                    "email": {
                        "location": "json",
                        "type": null
                    },
                    "status": {
                        "location": "statusCode",
                        "type": "integer"
                    }
                },
                "location": null,
                "items": null
            }
        }
    }
}